{"hash":"4b9898265eeab19b3d8494c5e79b6e578760f2c1","fesm2022":[{"exports":["AbstractCell","AbstractKlesLazyTableService","AbstractKlesLazyTreetableService","AbstractKlesTableService","AbstractKlesTreeTableService","AbstractTreeCell","AlignCell","CellPipe","ConverterService","DefaultKlesTableService","DefaultKlesTreetableService","ElevationPipe","FieldPipe","GroupPipe","KlesCellStyleDirective","KlesComponentHeaderDirective","KlesDragDropRowTableService","KlesDragDropRowTreeTableService","KlesDynamicCellDirective","KlesDynamicTreeCellDirective","KlesFormDynamicHeaderFilterComponent","KlesFormTextHeaderComponent","KlesFormTextHeaderFilterComponent","KlesHeaderFilterTableService","KlesLazyTableComponent","KlesLazyTableService","KlesLazyTreetableComponent","KlesLazyTreetableService","KlesLeafComponent","KlesMaterialTableModule","KlesNodeComponent","KlesResizeColumnDirective","KlesSelectionClickTableService","KlesSelectionTableLazyService","KlesSelectionTableService","KlesSelectionTreetableService","KlesTableComponent","KlesTableDirective","KlesTableService","KlesTextFilterTableService","KlesTreetableComponent","KlesTreetableDirective","KlesTreetableService","KlesUnfoldCellComponent","KlesUnfoldRowTableService","MatTreetableData","RowDragDisabledPipe","RowPipe","RowTreePipe","Span","SpanPipe","TreeService"],"facadeModuleId":"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\3kles-kles-material-table.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\cell.model.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\node.model.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\options.model.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\columnconfig.model.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\tableconfig.model.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\header-field.config.model.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\interfaces\\pagination.interface.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\interfaces\\selection.interface.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\interfaces\\loadChildren.interface.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\table.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\resizecolumn.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\cellstyle.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\dynamic-component.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\cell\\cell.abstract.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\cell\\treecell.abstract.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\cell\\unfoldcell.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\dynamic-cell.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\cell\\leaf.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\cell\\node.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\dynamic-treecell.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\treetable.directive.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\animations\\row.animation.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\field.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\group.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\elevation.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\row.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\rowdragdisabled.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\enums\\span.enum.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\span.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\cell.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\abstracttable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\table\\table.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\abstractlazytable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\lazytable\\lazytable.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\header\\textheader.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\header\\textheaderfilter.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\header\\dynamic-headerfilter.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\mat-treetable-datasource.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\tree.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\converter.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\rowtree.pipe.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\abstracttreetable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\treetable.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\abstractlazytreetable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\lazytreetable\\lazytreetable.component.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\defaulttable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selection\\selectiontable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\filter\\headerfilter-table.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\dragdrop\\dragdroprow.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\unfoldrow\\unfoldrow.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\table.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selection\\selectiontablelazy.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\lazytable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\defaulttreetable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\dragdrop\\dragdroprowtree.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\lazytreetable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selection\\selectiontreetable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\treetable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\treetableservice.interface.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selectionclick\\selectionclick.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\tableservice.interface.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\filter\\textfiltertable.service.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\dragdrop\\dragdrop.interface.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\enums\\align.enum.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\modules\\material.module.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\table.module.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\public-api.mjs","D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\3kles-kles-material-table.mjs"],"name":"3kles-kles-material-table","type":"chunk","dynamicImports":[],"fileName":"3kles-kles-material-table.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@3kles/kles-material-dynamicforms":["KlesFormInputClearableComponent","EnumType","KlesFormSelectSearchComponent","KlesFormColorComponent","KlesFormDateComponent","*","KlesDynamicFieldDirective","componentMapper","klesFieldControlFactory","KlesFieldAbstract","KlesMaterialDynamicformsModule"],"@angular/core":["EventEmitter","Injector","signal","*","Directive","Input","Output","Component","ViewEncapsulation","Pipe","Injectable","computed","ChangeDetectionStrategy","Inject","ViewChild","NgModule"],"rxjs":["BehaviorSubject","Subject","of","merge","concat","Observable"],"@angular/material/paginator":["MatPaginatorIntl","*","MatPaginator","MatPaginatorModule"],"@angular/material/button":["*","MatButtonModule"],"@angular/material/icon":["*","MatIconModule"],"@angular/material/sort":["MatSort","*","MatSortModule"],"@ngx-translate/core":["*","TranslateModule"],"@angular/material/progress-spinner":["*","MatProgressSpinnerModule"],"@angular/cdk/collections":["SelectionModel"],"@angular/material/core":["*","MAT_DATE_LOCALE","DateAdapter","MAT_DATE_FORMATS","MatNativeDateModule"],"@angular/material-moment-adapter":["MomentDateAdapter","MAT_MOMENT_DATE_ADAPTER_OPTIONS","MAT_MOMENT_DATE_FORMATS"],"@angular/material/table":["MatTableDataSource","MatTable","*","MatTableModule"],"uuid":["*","v4"],"lodash":["*","cloneDeep"],"rxjs/operators":["takeUntil","debounceTime","take","catchError","map","tap","switchMap","distinctUntilChanged","startWith"],"@angular/animations":["style","animate","sequence","transition","trigger"],"@angular/forms":["*","ReactiveFormsModule","FormsModule"],"@angular/material/dialog":["*","MatDialogModule"],"@angular/platform-browser":["*"],"@angular/common":["*","CommonModule"],"@angular/cdk/scrolling":["*"],"@angular/cdk/table":["*","CdkTableModule"],"@angular/cdk/drag-drop":["*","moveItemInArray","DragDropModule"],"@angular/material/input":["*","MatInputModule"],"@angular/material/form-field":["*","MatFormFieldModule"],"@angular/material/tooltip":["*","MatTooltipModule"],"@angular/material/autocomplete":["*","MatAutocompleteModule"],"fp-ts/lib/Option":["*","fold","isSome"],"fp-ts/lib/function":["pipe"],"polytype":["classes"],"moment":["*"],"@angular/material/slider":["MatSliderModule"],"@angular/material/toolbar":["MatToolbarModule"],"@angular/material/sidenav":["MatSidenavModule"],"@angular/material/badge":["MatBadgeModule"],"@angular/material/list":["MatListModule"],"@angular/material/grid-list":["MatGridListModule"],"@angular/material/datepicker":["MatDatepickerModule"],"@angular/material/select":["MatSelectModule"],"@angular/material/radio":["MatRadioModule"],"@angular/material/chips":["MatChipsModule"],"@angular/material/card":["MatCardModule"],"@angular/material/menu":["MatMenuModule"],"@angular/material/tabs":["MatTabsModule"],"@angular/material/checkbox":["MatCheckboxModule"],"@angular/material/progress-bar":["MatProgressBarModule"],"@angular/material/expansion":["MatExpansionModule"],"@angular/material/snack-bar":["MatSnackBarModule"],"@angular/material/tree":["MatTreeModule"],"@angular/material/slide-toggle":["MatSlideToggleModule"],"ngx-color-picker":["ColorPickerModule"],"@3kles/kles-material-datepicker":["KlesMaterialDatepickerModule"]},"imports":["@3kles/kles-material-dynamicforms","@angular/core","rxjs","@angular/material/paginator","@angular/material/button","@angular/material/icon","@angular/material/sort","@ngx-translate/core","@angular/material/progress-spinner","@angular/cdk/collections","@angular/material/core","@angular/material-moment-adapter","@angular/material/table","uuid","lodash","rxjs/operators","@angular/animations","@angular/forms","@angular/material/dialog","@angular/platform-browser","@angular/common","@angular/cdk/scrolling","@angular/cdk/table","@angular/cdk/drag-drop","@angular/material/input","@angular/material/form-field","@angular/material/tooltip","@angular/material/autocomplete","fp-ts/lib/Option","fp-ts/lib/function","polytype","moment","@angular/material/slider","@angular/material/toolbar","@angular/material/sidenav","@angular/material/badge","@angular/material/list","@angular/material/grid-list","@angular/material/datepicker","@angular/material/select","@angular/material/radio","@angular/material/chips","@angular/material/card","@angular/material/menu","@angular/material/tabs","@angular/material/checkbox","@angular/material/progress-bar","@angular/material/expansion","@angular/material/snack-bar","@angular/material/tree","@angular/material/slide-toggle","ngx-color-picker","@3kles/kles-material-datepicker"],"modules":{"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\cell.model.mjs":{"code":"","originalLength":1805,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\node.model.mjs":{"code":"","originalLength":1253,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\options.model.mjs":{"code":"","originalLength":625,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\columnconfig.model.mjs":{"code":"","originalLength":1693,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\tableconfig.model.mjs":{"code":"","originalLength":2945,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\models\\header-field.config.model.mjs":{"code":"","originalLength":1009,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\interfaces\\pagination.interface.mjs":{"code":"","originalLength":677,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\interfaces\\selection.interface.mjs":{"code":"","originalLength":861,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\interfaces\\loadChildren.interface.mjs":{"code":"","originalLength":713,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\table.directive.mjs":{"code":"class KlesTableDirective {\n    constructor(resolver, container) {\n        this.resolver = resolver;\n        this.container = container;\n        this._onLoaded = new EventEmitter();\n        this._onSelected = new EventEmitter();\n        this._onChangeHeaderCell = new EventEmitter();\n        this._onChangeCell = new EventEmitter();\n        this._onChangeFooterCell = new EventEmitter();\n        this._onStatusHeaderChange = new EventEmitter();\n        this._onClick = new EventEmitter();\n    }\n    ngOnInit() {\n        // console.log('Directive KlesTable OnInit=', this.tableConfig);\n        // if (this.tableConfig) {\n        //     console.log('Directive KlesTable OnInit BuildComp=', this.tableConfig);\n        //     this.buildComponent();\n        // }\n    }\n    ngOnChanges(changes) {\n        if (changes.tableConfig) {\n            this.tableConfig = changes.tableConfig.currentValue;\n            if (this.tableConfig) {\n                this.buildComponent();\n                if (!changes.lines && !this.componentRef.instance.lines) {\n                    this.lines = [];\n                    this.componentRef.instance.lines = [];\n                }\n            }\n        }\n        if (changes.lines && this.componentRef) {\n            this.lines = changes.lines.currentValue;\n            this.componentRef.instance.lines = this.lines;\n        }\n        if (changes.footer && this.componentRef) {\n            this.footer = changes.footer.currentValue;\n            this.componentRef.instance.footer = this.footer;\n        }\n    }\n    buildComponent() {\n        const options = {\n            providers: [\n                {\n                    provide: 'tableService',\n                    useValue: this.tableConfig.tableService\n                },\n                ...this.tableConfig.customMatPaginatorIntl ? [{\n                        provide: MatPaginatorIntl,\n                        useClass: this.tableConfig.customMatPaginatorIntl\n                    }] : []\n            ]\n        };\n        const injector = Injector.create(options);\n        const factory = this.resolver.resolveComponentFactory(this.tableConfig.tableComponent);\n        if (this.componentRef) {\n            this.componentRef.destroy();\n        }\n        this.componentRef = this.container.createComponent(factory, 0, injector);\n        this.componentRef.instance.columns = signal(this.tableConfig.columns.map(m => {\n            const obj = { ...m };\n            obj.headerCell.filterable = obj.filterable;\n            obj.headerCell.sortable = obj.sortable;\n            if ((obj.filterable || obj.headerCell.filterable) && !obj.headerCell.component && obj.headerCell.type) {\n                obj.headerCell.component = KlesFormDynamicHeaderFilterComponent;\n                switch (obj.headerCell.type) {\n                    case EnumType.date:\n                        obj.headerCell.filterComponent = KlesFormDateComponent;\n                        break;\n                    case EnumType.color:\n                        obj.headerCell.filterComponent = KlesFormColorComponent;\n                        break;\n                    case EnumType.list:\n                        obj.headerCell.filterComponent = KlesFormInputClearableComponent;\n                        obj.headerCell.autocomplete = true;\n                        obj.headerCell.options = new BehaviorSubject([]);\n                        break;\n                    case EnumType.multi:\n                        obj.headerCell.filterComponent = KlesFormSelectSearchComponent;\n                        obj.headerCell.autocomplete = true;\n                        obj.headerCell.options = new BehaviorSubject([]);\n                        obj.headerCell.multiple = true;\n                        break;\n                    default:\n                        obj.headerCell.filterComponent = KlesFormInputClearableComponent;\n                        obj.headerCell.inputType = obj.headerCell.type;\n                        break;\n                }\n            }\n            return obj;\n        }));\n        if (this.tableConfig.options) {\n            this.componentRef.instance.options = this.tableConfig.options;\n        }\n        if (this.tableConfig.selectionMode !== undefined) {\n            this.componentRef.instance.selectionMode = this.tableConfig.selectionMode;\n        }\n        if (this.tableConfig.sortConfig) {\n            this.componentRef.instance.sortConfig = this.tableConfig.sortConfig;\n        }\n        //PAGINATION\n        if (this.tableConfig.hidePaginator) {\n            this.componentRef.instance.hidePaginator = this.tableConfig.hidePaginator;\n        }\n        if (this.tableConfig.pageSize) {\n            this.componentRef.instance.pageSize = this.tableConfig.pageSize;\n        }\n        if (this.tableConfig.pageSizeOptions) {\n            this.componentRef.instance.pageSizeOptions = this.tableConfig.pageSizeOptions;\n        }\n        //VALIDATION\n        if (this.tableConfig.lineValidations) {\n            this.componentRef.instance.lineValidations = this.tableConfig.lineValidations;\n        }\n        if (this.tableConfig.lineAsyncValidations) {\n            this.componentRef.instance.lineAsyncValidations = this.tableConfig.lineAsyncValidations;\n        }\n        //FOOTER\n        if (this.tableConfig.showFooter) {\n            this.componentRef.instance.showFooter = this.tableConfig.showFooter;\n        }\n        if (this.tableConfig.ngClassRow) {\n            this.componentRef.instance.ngClassRow = this.tableConfig.ngClassRow;\n        }\n        if (this.tableConfig.multiTemplate) {\n            this.componentRef.instance.multiTemplate = this.tableConfig.multiTemplate;\n            this.componentRef.instance.templates = this.tableConfig.templates || [];\n            this.componentRef.instance.templateUnfold = this.tableConfig.templateUnfold;\n        }\n        this.componentRef.instance.dragDropRows = this.tableConfig.dragDropRows;\n        this.componentRef.instance.dragDropRowsOptions = { autoScrollStep: 5, ...this.tableConfig.dragDropRowsOptions };\n        this.componentRef.instance.id = this.tableConfig.id;\n        // this.componentRef.instance.lines = [...this.lines];\n        this.componentRef.instance._onChangeHeaderCell = this._onChangeHeaderCell;\n        this.componentRef.instance._onChangeCell = this._onChangeCell;\n        this.componentRef.instance._onChangeFooterCell = this._onChangeFooterCell;\n        this.componentRef.instance._onSelected = this._onSelected;\n        this.componentRef.instance._onLoaded = this._onLoaded;\n        this.componentRef.instance._onStatusHeaderChange = this._onStatusHeaderChange;\n        this.componentRef.instance._onClick = this._onClick;\n    }\n    static { this.ɵfac = function KlesTableDirective_Factory(t) { return new (t || KlesTableDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesTableDirective, selectors: [[\"\", \"klesTable\", \"\"]], inputs: { tableConfig: \"tableConfig\", lines: \"lines\", footer: \"footer\" }, outputs: { _onLoaded: \"_onLoaded\", _onSelected: \"_onSelected\", _onChangeHeaderCell: \"_onChangeHeaderCell\", _onChangeCell: \"_onChangeCell\", _onChangeFooterCell: \"_onChangeFooterCell\", _onStatusHeaderChange: \"_onStatusHeaderChange\", _onClick: \"_onClick\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTableDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesTable]'\n            }]\n    }], () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }], { tableConfig: [{\n            type: Input\n        }], lines: [{\n            type: Input\n        }], footer: [{\n            type: Input\n        }], _onLoaded: [{\n            type: Output\n        }], _onSelected: [{\n            type: Output\n        }], _onChangeHeaderCell: [{\n            type: Output\n        }], _onChangeCell: [{\n            type: Output\n        }], _onChangeFooterCell: [{\n            type: Output\n        }], _onStatusHeaderChange: [{\n            type: Output\n        }], _onClick: [{\n            type: Output\n        }] }); })();","originalLength":27802,"removedExports":[],"renderedExports":["KlesTableDirective"],"renderedLength":8195},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\resizecolumn.directive.mjs":{"code":"class KlesResizeColumnDirective {\n    constructor(renderer, el) {\n        this.renderer = renderer;\n        this.el = el;\n        this.onMouseDown = (event) => {\n            this.pressed = true;\n            this.startX = event.pageX;\n            this.startWidth = this.column.offsetWidth;\n        };\n        this.onMouseMove = (event) => {\n            const offset = 35;\n            if (this.pressed && event.buttons) {\n                this.renderer.addClass(this.table, \"resizing\");\n                // Calculate width of column\n                let width = this.startWidth + (event.pageX - this.startX - offset);\n                const tableCells = Array.from(this.table.querySelectorAll(\".mat-row\")).map((row) => row.querySelectorAll(\".mat-cell\").item(this.index));\n                // Set table header width\n                this.renderer.setStyle(this.column, \"width\", `${width}px`);\n                // Set table cells width\n                for (const cell of tableCells) {\n                    this.renderer.setStyle(cell, \"width\", `${width}px`);\n                }\n            }\n        };\n        this.onMouseUp = (event) => {\n            if (this.pressed) {\n                this.pressed = false;\n                this.renderer.removeClass(this.table, \"resizing\");\n            }\n        };\n        this.column = this.el.nativeElement;\n    }\n    ngOnInit() {\n        if (this.resizable) {\n            const row = this.renderer.parentNode(this.column);\n            const thead = this.renderer.parentNode(row);\n            this.table = this.renderer.parentNode(thead);\n            const resizer = this.renderer.createElement(\"span\");\n            this.renderer.addClass(resizer, \"resize-holder\");\n            this.renderer.appendChild(this.column, resizer);\n            this.renderer.listen(resizer, \"mousedown\", this.onMouseDown);\n            this.renderer.listen(this.table, \"mousemove\", this.onMouseMove);\n            this.renderer.listen(\"document\", \"mouseup\", this.onMouseUp);\n        }\n    }\n    static { this.ɵfac = function KlesResizeColumnDirective_Factory(t) { return new (t || KlesResizeColumnDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesResizeColumnDirective, selectors: [[\"\", \"klesResizeColumn\", \"\"]], inputs: { resizable: [\"klesResizeColumn\", \"resizable\"], index: \"index\" } }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesResizeColumnDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[klesResizeColumn]\"\n            }]\n    }], () => [{ type: i0.Renderer2 }, { type: i0.ElementRef }], { resizable: [{\n            type: Input,\n            args: [\"klesResizeColumn\"]\n        }], index: [{\n            type: Input\n        }] }); })();","originalLength":9728,"removedExports":[],"renderedExports":["KlesResizeColumnDirective"],"renderedLength":2835},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\cellstyle.directive.mjs":{"code":"class KlesCellStyleDirective {\n    constructor(elementRef, cdRef) {\n        this.elementRef = elementRef;\n        this.domElement = this.elementRef.nativeElement;\n        this.context = (cdRef.context);\n    }\n    ngOnChanges(changes) {\n        const style = this.context.getCellStyle(this.row, this.column);\n        if (style) {\n            this.domElement.style = style;\n        }\n    }\n    static { this.ɵfac = function KlesCellStyleDirective_Factory(t) { return new (t || KlesCellStyleDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesCellStyleDirective, selectors: [[\"\", \"klesCellStyle\", \"\"]], inputs: { row: \"row\", column: \"column\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesCellStyleDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[klesCellStyle]\"\n            }]\n    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { row: [{\n            type: Input\n        }], column: [{\n            type: Input\n        }] }); })();","originalLength":3728,"removedExports":[],"renderedExports":["KlesCellStyleDirective"],"renderedLength":1187},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\dynamic-component.directive.mjs":{"code":"class KlesComponentHeaderDirective {\n    constructor(resolver, container) {\n        this.resolver = resolver;\n        this.container = container;\n    }\n    ngOnInit() {\n        this.buildComponent();\n    }\n    ngOnChanges(changes) {\n        if (changes.component && !changes.component.isFirstChange()) {\n            this.component = changes.component.currentValue;\n            this.buildComponent();\n        }\n        if (changes.value && !changes.value.isFirstChange()) {\n            this.value = changes.value.currentValue;\n            this.componentRef.instance.value = this.value;\n        }\n    }\n    buildComponent() {\n        const factory = this.resolver.resolveComponentFactory(this.component);\n        if (this.componentRef)\n            this.componentRef.destroy();\n        this.componentRef = this.container.createComponent(factory);\n        this.componentRef.instance.component = this.component;\n        this.componentRef.instance.value = this.value;\n        this.componentRef.instance.field = this.field;\n        this.componentRef.instance.group = this.group;\n    }\n    static { this.ɵfac = function KlesComponentHeaderDirective_Factory(t) { return new (t || KlesComponentHeaderDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesComponentHeaderDirective, selectors: [[\"\", \"klesComponentHeader\", \"\"]], inputs: { component: \"component\", value: \"value\", group: \"group\", field: \"field\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesComponentHeaderDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesComponentHeader]'\n            }]\n    }], () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }], { component: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], field: [{\n            type: Input\n        }] }); })();","originalLength":6619,"removedExports":[],"renderedExports":["KlesComponentHeaderDirective"],"renderedLength":2078},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\cell\\cell.abstract.mjs":{"code":"class AbstractCell {\n}","originalLength":776,"removedExports":[],"renderedExports":["AbstractCell"],"renderedLength":22},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\cell\\treecell.abstract.mjs":{"code":"class AbstractTreeCell extends AbstractCell {\n    formatIndentation(node, step = 5) {\n        return '&nbsp;'.repeat(node.value._status.depth * step);\n    }\n    onNodeClick(row) {\n        row.controls._status.patchValue({\n            isExpanded: !row.value._status.isExpanded\n        });\n    }\n}","originalLength":2038,"removedExports":[],"renderedExports":["AbstractTreeCell"],"renderedLength":295},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\cell\\unfoldcell.component.mjs":{"code":"function KlesUnfoldCellComponent_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function KlesUnfoldCellComponent_Conditional_1_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); ctx_r1.onFoldClick(ctx_r1.group); return i0.ɵɵresetView($event.stopPropagation()); });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.group.value._unfold ? \"keyboard_arrow_up\" : \"keyboard_arrow_down\", \" \");\n} }\nclass KlesUnfoldCellComponent extends AbstractCell {\n    onFoldClick(row) {\n        row.controls._unfold.patchValue(!row.value._unfold);\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesUnfoldCellComponent_BaseFactory; return function KlesUnfoldCellComponent_Factory(t) { return (ɵKlesUnfoldCellComponent_BaseFactory || (ɵKlesUnfoldCellComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesUnfoldCellComponent)))(t || KlesUnfoldCellComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesUnfoldCellComponent, selectors: [[\"app-kles-fold\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 4, consts: [[\"mat-icon-button\", \"\", \"aria-label\", \"expand row\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-icon-button\", \"\", \"aria-label\", \"expand row\", 3, \"click\"]], template: function KlesUnfoldCellComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\");\n            i0.ɵɵtemplate(1, KlesUnfoldCellComponent_Conditional_1_Template, 3, 1, \"button\", 0);\n            i0.ɵɵelementContainer(2, 1);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(1, !(ctx.templateUnfold == null ? null : ctx.templateUnfold.disabled) || !(ctx.templateUnfold == null ? null : ctx.templateUnfold.disabled(ctx.group)) ? 1 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"field\", ctx.field)(\"group\", ctx.group)(\"siblingFields\", ctx.siblingFields);\n        } }, dependencies: [i1.MatIconButton, i2.MatIcon, i13.KlesDynamicFieldDirective], encapsulation: 2 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesUnfoldCellComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-fold', encapsulation: ViewEncapsulation.None, template: `\r\n            <div>\r\n                @if ((!templateUnfold?.disabled || !templateUnfold?.disabled(group))) {\r\n                    <button mat-icon-button aria-label=\"expand row\" (click)=\"onFoldClick(group); $event.stopPropagation()\">\r\n                        <mat-icon> {{group.value._unfold ? 'keyboard_arrow_up' : 'keyboard_arrow_down'}} </mat-icon>\r\n                    </button>\r\n                }\r\n\r\n                <ng-container klesDynamicField [field]=\"field\"\r\n                    [group]=\"group\" [siblingFields]=\"siblingFields\">\r\n                </ng-container>\r\n            </div>\r\n    ` }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesUnfoldCellComponent, { className: \"KlesUnfoldCellComponent\", filePath: \"lib\\\\component\\\\cell\\\\unfoldcell.component.ts\", lineNumber: 28 }); })();","originalLength":6875,"removedExports":[],"renderedExports":["KlesUnfoldCellComponent"],"renderedLength":3404},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\dynamic-cell.directive.mjs":{"code":"class KlesDynamicCellDirective extends KlesDynamicFieldDirective {\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    buildComponent() {\n        if (this.column.canUnfold) {\n            if (this.componentRef) {\n                this.componentRef.destroy();\n            }\n            this.componentRef = this.container.createComponent(KlesUnfoldCellComponent);\n            this.componentRef.instance.field = this.field;\n            this.componentRef.instance.group = this.group;\n            this.componentRef.instance.siblingFields = this.siblingFields;\n            this.componentRef.instance.templateUnfold = this.config?.templateUnfold;\n        }\n        else {\n            super.buildComponent();\n        }\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesDynamicCellDirective_BaseFactory; return function KlesDynamicCellDirective_Factory(t) { return (ɵKlesDynamicCellDirective_BaseFactory || (ɵKlesDynamicCellDirective_BaseFactory = i0.ɵɵgetInheritedFactory(KlesDynamicCellDirective)))(t || KlesDynamicCellDirective); }; })(); }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesDynamicCellDirective, selectors: [[\"\", \"klesDynamicCell\", \"\"]], inputs: { column: \"column\", config: \"config\" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesDynamicCellDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesDynamicCell]'\n            }]\n    }], null, { column: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }] }); })();","originalLength":5651,"removedExports":[],"renderedExports":["KlesDynamicCellDirective"],"renderedLength":1761},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\cell\\leaf.component.mjs":{"code":"class KlesLeafComponent extends AbstractTreeCell {\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesLeafComponent_BaseFactory; return function KlesLeafComponent_Factory(t) { return (ɵKlesLeafComponent_BaseFactory || (ɵKlesLeafComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesLeafComponent)))(t || KlesLeafComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesLeafComponent, selectors: [[\"app-kles-leaf\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 4, consts: [[3, \"innerHTML\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"column\"]], template: function KlesLeafComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", 0);\n            i0.ɵɵelementContainer(1, 1);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"innerHTML\", ctx.formatIndentation(ctx.row), i0.ɵɵsanitizeHtml);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"field\", ctx.field)(\"group\", ctx.group)(\"column\", ctx.column);\n        } }, dependencies: [KlesDynamicCellDirective], styles: [\"[_nghost-%COMP%]{display:inline-flex}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesLeafComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-leaf', template: `\r\n        <div [innerHTML]=\"formatIndentation(row)\"></div>\r\n        <ng-container klesDynamicCell [field]=\"field\" [group]=\"group\" [column]=\"column\">\r\n        </ng-container>\r\n    `, styles: [\":host{display:inline-flex}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesLeafComponent, { className: \"KlesLeafComponent\", filePath: \"lib\\\\component\\\\treetable\\\\cell\\\\leaf.component.ts\", lineNumber: 16 }); })();","originalLength":3416,"removedExports":[],"renderedExports":["KlesLeafComponent"],"renderedLength":1761},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\cell\\node.component.mjs":{"code":"function KlesNodeComponent_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 2);\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatIndentation(ctx_r0.row), i0.ɵɵsanitizeHtml);\n} }\nfunction KlesNodeComponent_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-icon\", 8);\n    i0.ɵɵlistener(\"click\", function KlesNodeComponent_Conditional_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onNodeClick(ctx_r4.row)); });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.row.value._status.isExpanded ? \"remove\" : \"add\", \" \");\n} }\nfunction KlesNodeComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 4);\n} }\nconst _c0$3 = () => [5, 10, 25, 100];\nfunction KlesNodeComponent_Conditional_7_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-paginator\", 9, 10);\n    i0.ɵɵlistener(\"page\", function KlesNodeComponent_Conditional_7_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.handlePageEvent($event)); });\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"length\", ctx_r3.row.value._status.paginator == null ? null : ctx_r3.row.value._status.paginator.length)(\"pageSize\", ctx_r3.row.value._status.paginator == null ? null : ctx_r3.row.value._status.paginator.pageSize)(\"showFirstLastButtons\", ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.showFirstLastButtons)(\"hidePageSize\", (ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.hidePageSize) === undefined ? true : ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.hidePageSize)(\"pageSizeOptions\", (ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.pageSizeOptions) || i0.ɵɵpureFunction0(6, _c0$3))(\"pageIndex\", ctx_r3.row.value._status.paginator == null ? null : ctx_r3.row.value._status.paginator.pageIndex);\n} }\nconst _c1$2 = a0 => ({ templateUnfold: a0 });\nclass KlesNodeComponent extends AbstractTreeCell {\n    onNodeClick(row) {\n        this.group.controls._status.controls.paginator?.patchValue({\n            pageIndex: 0\n        }, { emitEvent: false });\n        super.onNodeClick(row);\n    }\n    handlePageEvent(e) {\n        this.group.controls._status.patchValue({\n            paginator: {\n                pageIndex: e.pageIndex,\n                pageSize: e.pageSize,\n                length: e.length\n            }\n        });\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesNodeComponent_BaseFactory; return function KlesNodeComponent_Factory(t) { return (ɵKlesNodeComponent_BaseFactory || (ɵKlesNodeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesNodeComponent)))(t || KlesNodeComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesNodeComponent, selectors: [[\"app-kles-node\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 10, consts: [[2, \"display\", \"flex\", \"flex-direction\", \"column\", \"flex\", \"auto\"], [2, \"display\", \"flex\", \"align-items\", \"center\", \"gap\", \"3px\"], [3, \"innerHTML\"], [\"class\", \"size-16\"], [\"diameter\", \"25\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"column\", \"config\"], [1, \"paginator\"], [3, \"length\", \"pageSize\", \"showFirstLastButtons\", \"hidePageSize\", \"pageSizeOptions\", \"pageIndex\"], [1, \"size-16\", 3, \"click\"], [3, \"length\", \"pageSize\", \"showFirstLastButtons\", \"hidePageSize\", \"pageSizeOptions\", \"pageIndex\", \"page\"], [\"treePaginator\", \"\"]], template: function KlesNodeComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵtemplate(2, KlesNodeComponent_Conditional_2_Template, 1, 1, \"div\", 2)(3, KlesNodeComponent_Conditional_3_Template, 2, 1, \"mat-icon\", 3)(4, KlesNodeComponent_Conditional_4_Template, 1, 0, \"mat-spinner\", 4);\n            i0.ɵɵelementContainer(5, 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 6);\n            i0.ɵɵtemplate(7, KlesNodeComponent_Conditional_7_Template, 2, 7, \"mat-paginator\", 7);\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            let tmp_1_0;\n            let tmp_2_0;\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(2, ctx.column.canExpand ? 2 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(3, !((tmp_1_0 = ctx.row.getRawValue()) == null ? null : tmp_1_0._status == null ? null : tmp_1_0._status.isBusy) && ctx.row.value._status.childrenCounter > 0 ? 3 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(4, ((tmp_2_0 = ctx.row.getRawValue()) == null ? null : tmp_2_0._status == null ? null : tmp_2_0._status.isBusy) && ctx.column.canExpand ? 4 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"field\", ctx.field)(\"group\", ctx.group)(\"column\", ctx.column)(\"config\", i0.ɵɵpureFunction1(8, _c1$2, ctx.templateUnfold));\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(7, ctx.column.paginator && ctx.row.value._status.childrenCounter > 0 && ctx.row.value._status.isExpanded ? 7 : -1);\n        } }, dependencies: [i2.MatIcon, i9.MatPaginator, i3.MatProgressSpinner, KlesDynamicCellDirective], styles: [\"app-kles-node mat-icon{cursor:pointer}\\n\", \"app-kles-node .size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}\\n\", \"app-kles-node{display:inline-flex;align-items:center;flex-direction:row;width:100%}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{margin:0}\\n\", \"app-kles-node .mat-mdc-paginator{background:transparent}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{min-width:max-content}\\n\", \"app-kles-node .mat-mdc-paginator-container{padding:0 2px 0 8px;min-height:auto}\\n\", \"app-kles-node .paginator{display:flex;width:100%;justify-content:end}\\n\"], encapsulation: 2 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesNodeComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-node', encapsulation: ViewEncapsulation.None, template: `\r\n        <div style=\"display: flex; flex-direction: column; flex: auto;\">\r\n        <div style=\"display:flex; align-items: center; gap:3px\">\r\n            @if (column.canExpand) {\r\n                <div [innerHTML]=\"formatIndentation(row)\"></div>\r\n            }\r\n        \r\n            @if (!row.getRawValue()?._status?.isBusy && row.value._status.childrenCounter > 0) {\r\n                <mat-icon class=\"size-16\" (click)=\"onNodeClick(row)\">\r\n                    {{row.value._status.isExpanded ? 'remove' : 'add'}}\r\n                </mat-icon>\r\n            }\r\n\r\n            @if (row.getRawValue()?._status?.isBusy && column.canExpand) {\r\n                <mat-spinner diameter=\"25\"></mat-spinner>\r\n            }\r\n\r\n            <ng-container klesDynamicCell [field]=\"field\"\r\n                [group]=\"group\" [column]=\"column\" [config]=\"{templateUnfold}\">\r\n            </ng-container>\r\n        </div>\r\n\r\n        <div class=\"paginator\">\r\n            @if (column.paginator && row.value._status.childrenCounter>0 && row.value._status.isExpanded) {\r\n                <mat-paginator #treePaginator\r\n                    [length]=\"row.value._status.paginator?.length\"\r\n                    [pageSize]=\"row.value._status.paginator?.pageSize\"\r\n                    [showFirstLastButtons]=\"column.paginatorOption?.showFirstLastButtons\"\r\n                    [hidePageSize]=\"column.paginatorOption?.hidePageSize === undefined ? true : column.paginatorOption?.hidePageSize\"\r\n                    [pageSizeOptions]=\"column.paginatorOption?.pageSizeOptions || [5, 10, 25, 100]\"\r\n                    [pageIndex]=\"row.value._status.paginator?.pageIndex\"\r\n                    (page)=\"handlePageEvent($event)\">\r\n                </mat-paginator>\r\n            }\r\n        </div>\r\n\r\n        </div>\r\n    \r\n    \r\n    `, styles: [\"app-kles-node mat-icon{cursor:pointer}\\n\", \"app-kles-node .size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}\\n\", \"app-kles-node{display:inline-flex;align-items:center;flex-direction:row;width:100%}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{margin:0}\\n\", \"app-kles-node .mat-mdc-paginator{background:transparent}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{min-width:max-content}\\n\", \"app-kles-node .mat-mdc-paginator-container{padding:0 2px 0 8px;min-height:auto}\\n\", \"app-kles-node .paginator{display:flex;width:100%;justify-content:end}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesNodeComponent, { className: \"KlesNodeComponent\", filePath: \"lib\\\\component\\\\treetable\\\\cell\\\\node.component.ts\", lineNumber: 69 }); })();","originalLength":16815,"removedExports":[],"renderedExports":["KlesNodeComponent"],"renderedLength":9074},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\dynamic-treecell.directive.mjs":{"code":"class KlesDynamicTreeCellDirective extends KlesDynamicFieldDirective {\n    ngOnInit() {\n        this.buildComponent();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    buildComponent() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n        }\n        this.componentRef = this.container.createComponent(this.column.canExpand ? KlesNodeComponent : KlesLeafComponent);\n        this.componentRef.instance.field = this.field;\n        this.componentRef.instance.group = this.group;\n        this.componentRef.instance.row = this.row;\n        this.componentRef.instance.column = this.column;\n        this.componentRef.instance.templateUnfold = this.config?.templateUnfold;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesDynamicTreeCellDirective_BaseFactory; return function KlesDynamicTreeCellDirective_Factory(t) { return (ɵKlesDynamicTreeCellDirective_BaseFactory || (ɵKlesDynamicTreeCellDirective_BaseFactory = i0.ɵɵgetInheritedFactory(KlesDynamicTreeCellDirective)))(t || KlesDynamicTreeCellDirective); }; })(); }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesDynamicTreeCellDirective, selectors: [[\"\", \"klesDynamicTreeCell\", \"\"]], inputs: { column: \"column\", row: \"row\", config: \"config\" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesDynamicTreeCellDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesDynamicTreeCell]'\n            }]\n    }], null, { column: [{\n            type: Input\n        }], row: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }] }); })();","originalLength":6109,"removedExports":[],"renderedExports":["KlesDynamicTreeCellDirective"],"renderedLength":1801},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\directives\\treetable.directive.mjs":{"code":"class KlesTreetableDirective extends KlesTableDirective {\n    constructor() {\n        super(...arguments);\n        this._onLineOpen = new EventEmitter();\n        this._onLineClose = new EventEmitter();\n    }\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    buildComponent() {\n        super.buildComponent();\n        this.componentRef.instance._onLineOpen = this._onLineOpen;\n        this.componentRef.instance._onLineClose = this._onLineClose;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesTreetableDirective_BaseFactory; return function KlesTreetableDirective_Factory(t) { return (ɵKlesTreetableDirective_BaseFactory || (ɵKlesTreetableDirective_BaseFactory = i0.ɵɵgetInheritedFactory(KlesTreetableDirective)))(t || KlesTreetableDirective); }; })(); }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesTreetableDirective, selectors: [[\"\", \"klesTreetable\", \"\"]], outputs: { _onLineOpen: \"_onLineOpen\", _onLineClose: \"_onLineClose\" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTreetableDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesTreetable]'\n            }]\n    }], null, { _onLineOpen: [{\n            type: Output\n        }], _onLineClose: [{\n            type: Output\n        }] }); })();","originalLength":3880,"removedExports":[],"renderedExports":["KlesTreetableDirective"],"renderedLength":1460},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\animations\\row.animation.mjs":{"code":"const rowsAnimation = trigger('rowsAnimation', [\n    transition('void => *', [\n        style({ height: '*', opacity: '0', 'box-shadow': 'none' }),\n        sequence([\n            animate(\".35s ease\", style({ height: '*', opacity: '.9', 'box-shadow': 'none' })),\n            animate(\".35s ease\", style({ height: '*', opacity: 1, }))\n        ])\n    ])\n]);","originalLength":2115,"removedExports":[],"renderedExports":["rowsAnimation"],"renderedLength":352},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\field.pipe.mjs":{"code":"class FieldPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(column, index) {\n        if (this.context) {\n            return this.context.getLineFields(index, column.cell.name);\n        }\n        return null;\n    }\n    static { this.ɵfac = function FieldPipe_Factory(t) { return new (t || FieldPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"fieldPipe\", type: FieldPipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'fieldPipe',\n                pure: false\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();","originalLength":2637,"removedExports":[],"renderedExports":["FieldPipe"],"renderedLength":780},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\group.pipe.mjs":{"code":"class GroupPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(index) {\n        if (this.context) {\n            return this.context.getControls(index);\n        }\n        return null;\n    }\n    static { this.ɵfac = function GroupPipe_Factory(t) { return new (t || GroupPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"groupPipe\", type: GroupPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GroupPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'groupPipe',\n                pure: true\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();","originalLength":2387,"removedExports":[],"renderedExports":["GroupPipe"],"renderedLength":750},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\elevation.pipe.mjs":{"code":"class ElevationPipe {\n    constructor() {\n    }\n    transform(elevation) {\n        return `mat-elevation-z${elevation}`;\n    }\n    static { this.ɵfac = function ElevationPipe_Factory(t) { return new (t || ElevationPipe)(); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"elevationPipe\", type: ElevationPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ElevationPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'elevationPipe',\n                pure: true\n            }]\n    }], () => [], null); })();","originalLength":1745,"removedExports":[],"renderedExports":["ElevationPipe"],"renderedLength":596},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\row.pipe.mjs":{"code":"class RowPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(row) {\n        if (this.context) {\n            return this.context.ngClassRow(row);\n        }\n        return null;\n    }\n    static { this.ɵfac = function RowPipe_Factory(t) { return new (t || RowPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"rowPipe\", type: RowPipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'rowPipe',\n                pure: false\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();","originalLength":2454,"removedExports":[],"renderedExports":["RowPipe"],"renderedLength":733},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\rowdragdisabled.pipe.mjs":{"code":"class RowDragDisabledPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(row) {\n        if (this.context && this.context.dragDropRowsOptions.dragDisabled) {\n            return this.context.dragDropRowsOptions.dragDisabled(row);\n        }\n        return false;\n    }\n    static { this.ɵfac = function RowDragDisabledPipe_Factory(t) { return new (t || RowDragDisabledPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"rowDragDisabledPipe\", type: RowDragDisabledPipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowDragDisabledPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'rowDragDisabledPipe',\n                pure: false\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();","originalLength":2866,"removedExports":[],"renderedExports":["RowDragDisabledPipe"],"renderedLength":889},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\enums\\span.enum.mjs":{"code":"var Span;\n(function (Span) {\n    Span[\"MAX\"] = \"max\";\n})(Span || (Span = {}));","originalLength":564,"removedExports":[],"renderedExports":["Span"],"renderedLength":78},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\span.pipe.mjs":{"code":"class SpanPipe {\n    transform(span, maxSize) {\n        if (span === Span.MAX) {\n            return maxSize;\n        }\n        return span;\n    }\n    static { this.ɵfac = function SpanPipe_Factory(t) { return new (t || SpanPipe)(); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"spanPipe\", type: SpanPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SpanPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'spanPipe',\n            }]\n    }], null, null); })();","originalLength":1918,"removedExports":[],"renderedExports":["SpanPipe"],"renderedLength":554},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\cell.pipe.mjs":{"code":"class CellPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(column) {\n        return {\n            'vertical-separator': this.context?.options?.verticalSeparator,\n            ...(column.align && { ['align-' + column.align]: true })\n        };\n    }\n    static { this.ɵfac = function CellPipe_Factory(t) { return new (t || CellPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"cellPipe\", type: CellPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CellPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'cellPipe',\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();","originalLength":2640,"removedExports":[],"renderedExports":["CellPipe"],"renderedLength":779},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\abstracttable.service.mjs":{"code":"class AbstractKlesTableService {\n    constructor() {\n        this.onSelectIndeterminate = new Subject();\n    }\n    /**Setters */\n    setTable(table) {\n        this.table = table;\n    }\n    static { this.ɵfac = function AbstractKlesTableService_Factory(t) { return new (t || AbstractKlesTableService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AbstractKlesTableService, factory: AbstractKlesTableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractKlesTableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":4336,"removedExports":[],"renderedExports":["AbstractKlesTableService"],"renderedLength":701},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\table\\table.component.mjs":{"code":"const _c0$2 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesTableComponent_ng_container_3_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14)(1, \"div\", 15);\n    i0.ɵɵelementContainer(2, 16);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r8.class);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r8.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c0$2, ctx_r9.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r8.headerCell)(\"group\", ctx_r9.formHeader);\n} }\nconst _c1$1 = a0 => ({ templateUnfold: a0 });\nfunction KlesTableComponent_ng_container_3_Conditional_3_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 19);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    const index_r16 = ctx.dataIndex;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r14.getCellStyle(row_r15, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r15.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r16))(\"siblingFields\", ctx_r14.lineFields[index_r16])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c1$1, ctx_r14.templateUnfold));\n} }\nfunction KlesTableComponent_ng_container_3_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_ng_container_3_Conditional_3_td_0_Template, 5, 17, \"td\", 17);\n} }\nfunction KlesTableComponent_ng_container_3_Conditional_4_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 19);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    const index_r20 = ctx.index;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r18.getCellStyle(row_r19, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r19.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r20))(\"siblingFields\", ctx_r18.lineFields[row_r19.value._index])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c1$1, ctx_r18.templateUnfold));\n} }\nfunction KlesTableComponent_ng_container_3_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_ng_container_3_Conditional_4_td_0_Template, 5, 17, \"td\", 17);\n} }\nfunction KlesTableComponent_ng_container_3_td_5_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 16);\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r22 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r8.footerCell)(\"group\", ctx_r22.formFooter);\n} }\nfunction KlesTableComponent_ng_container_3_td_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 20);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_3_td_5_Conditional_1_Template, 1, 2, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r12.getFooterStyle(column_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r8.footerCell ? 1 : -1);\n} }\nfunction KlesTableComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 10);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_3_th_1_Template, 3, 9, \"th\", 11);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtemplate(3, KlesTableComponent_ng_container_3_Conditional_3_Template, 1, 0, \"td\", 12)(4, KlesTableComponent_ng_container_3_Conditional_4_Template, 1, 0)(5, KlesTableComponent_ng_container_3_td_5_Template, 2, 3, \"td\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r8 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r8.columnDef)(\"sticky\", column_r8.sticky || false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, ctx_r0.multiTemplate ? 3 : 4);\n} }\nfunction KlesTableComponent_Conditional_4_ng_container_0_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 23);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r28 = ctx.$implicit;\n    const index_r29 = ctx.dataIndex;\n    const cell_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0$2, ctx_r27.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 6, cell_r26.colspan, ctx_r27.displayedColumns().length))(\"rowspan\", cell_r26.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r26)(\"group\", i0.ɵɵpipeBind1(3, 9, index_r29))(\"siblingFields\", ctx_r27.lineFields[row_r28.value._index]);\n} }\nfunction KlesTableComponent_Conditional_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, KlesTableComponent_Conditional_4_ng_container_0_td_1_Template, 4, 13, \"td\", 22);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r26.name);\n} }\nfunction KlesTableComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_Conditional_4_ng_container_0_Template, 2, 1, \"ng-container\", 21);\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.templateUnfold.cells);\n} }\nfunction KlesTableComponent_ng_container_5_ng_container_1_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 16);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const index_r36 = ctx.dataIndex;\n    const cell_r33 = i0.ɵɵnextContext().$implicit;\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0$2, ctx_r34.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 5, cell_r33.colspan, ctx_r34.displayedColumns().length))(\"rowspan\", cell_r33.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r33)(\"group\", i0.ɵɵpipeBind1(3, 8, index_r36));\n} }\nfunction KlesTableComponent_ng_container_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_5_ng_container_1_td_1_Template, 4, 12, \"td\", 22);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r33 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r33.name);\n} }\nfunction KlesTableComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_5_ng_container_1_Template, 2, 1, \"ng-container\", 21);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const template_r31 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", template_r31.cells);\n} }\nfunction KlesTableComponent_tr_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 24);\n} }\nfunction KlesTableComponent_tr_7_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 28);\n} if (rf & 2) {\n    const row_r38 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r41 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r41.dragDropRowsOptions == null ? null : ctx_r41.dragDropRowsOptions.dragPreview == null ? null : ctx_r41.dragDropRowsOptions.dragPreview.component)(\"value\", row_r38);\n} }\nfunction KlesTableComponent_tr_7_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_tr_7_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 26);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesTableComponent_tr_7_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 28);\n} if (rf & 2) {\n    const row_r38 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r43 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r43.dragDropRowsOptions == null ? null : ctx_r43.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r43.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r38);\n} }\nfunction KlesTableComponent_tr_7_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_tr_7_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 27);\n} }\nfunction KlesTableComponent_tr_7_Template(rf, ctx) { if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 25);\n    i0.ɵɵlistener(\"click\", function KlesTableComponent_tr_7_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r46); const row_r38 = restoredCtx.$implicit; const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.onClick(row_r38)); });\n    i0.ɵɵpipe(1, \"rowPipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesTableComponent_tr_7_Conditional_3_Template, 1, 1, null, 26)(4, KlesTableComponent_tr_7_Conditional_4_Template, 1, 0, null, 27);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r38 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 6, row_r38))(\"cdkDragData\", row_r38)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 8, row_r38))(\"@rowsAnimation\", undefined);\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPreview == null ? null : ctx_r4.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesTableComponent_Conditional_8_Conditional_0_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 29);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesTableComponent_Conditional_8_Conditional_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_Conditional_8_Conditional_0_tr_0_Template, 1, 1, \"tr\", 30);\n} if (rf & 2) {\n    const ctx_r47 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r47.getTemplateColumns(ctx_r47.templateUnfold))(\"matRowDefWhen\", ctx_r47.tableService.unfoldPredicate);\n} }\nfunction KlesTableComponent_Conditional_8_ng_container_1_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 32);\n    i0.ɵɵpipe(1, \"rowPipe\");\n} if (rf & 2) {\n    const row_r53 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 2, row_r53))(\"@rowsAnimation\", undefined);\n} }\nfunction KlesTableComponent_Conditional_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, KlesTableComponent_Conditional_8_ng_container_1_tr_1_Template, 2, 4, \"tr\", 31);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const template_r51 = ctx.$implicit;\n    const ctx_r48 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r48.getTemplateColumns(template_r51))(\"matRowDefWhen\", template_r51.when);\n} }\nfunction KlesTableComponent_Conditional_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_Conditional_8_Conditional_0_Template, 1, 2, \"tr\", 29)(1, KlesTableComponent_Conditional_8_ng_container_1_Template, 2, 2, \"ng-container\", 4);\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵconditional(0, ctx_r5.templateUnfold ? 0 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.templates);\n} }\nfunction KlesTableComponent_Conditional_9_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 34);\n} }\nfunction KlesTableComponent_Conditional_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesTableComponent_Conditional_9_tr_1_Template, 1, 0, \"tr\", 33);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r6.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesTableComponent {\n    set matSort(ms) {\n        if (!this.sort) {\n            this.sort = ms;\n            this.setDataSourceAttributes();\n        }\n    }\n    set matPaginator(mp) {\n        if (!this.paginator) {\n            this.paginator = mp;\n            this.setDataSourceAttributes();\n        }\n    }\n    set lines(lines) {\n        this.updateData(lines);\n    }\n    set footer(footer) {\n        if (footer) {\n            this.updateFooter(footer);\n        }\n    }\n    set selectionMode(selectionMode) {\n        this.selection = new SelectionModel(selectionMode);\n    }\n    constructor(translate, adapter, fb, ref, dialog, sanitizer, _adapter, \n    //@Inject('tableService') public tableService: DefaultKlesTableService\n    tableService) {\n        this.translate = translate;\n        this.adapter = adapter;\n        this.fb = fb;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.tableService = tableService;\n        this.sortDefault = false;\n        this._onDestroy = new Subject();\n        this._onLinesChanges = new Subject();\n        this._lines = [];\n        this._footer = {};\n        this.columns = signal([]);\n        this.options = {\n            verticalSeparator: true,\n            capitalisedHeader: true,\n            highlightRowOnHover: true,\n            elevation: 5\n        };\n        this.hidePaginator = false;\n        this.pageSize = 10;\n        this.pageSizeOptions = [5, 10, 20, 25, 50];\n        this.showFooter = false;\n        this.dragDropRows = false;\n        this.dragDropRowsOptions = { autoScrollStep: 5 };\n        this.ngClassRow = ((row) => ({ 'highlight-on-hover': this.options.highlightRowOnHover }));\n        this.multiTemplate = false;\n        this.templates = [];\n        /** Output Component */\n        this._onLoaded = new EventEmitter();\n        this._onSelected = new EventEmitter();\n        this._onChangeHeaderCell = new EventEmitter();\n        this._onChangeCell = new EventEmitter();\n        this._onChangeFooterCell = new EventEmitter();\n        this._onStatusHeaderChange = new EventEmitter();\n        this._onStatusLineChange = new EventEmitter();\n        this._onStatusCellChange = new EventEmitter();\n        this._onClick = new EventEmitter();\n        this._onDragDropRow = new EventEmitter();\n        this.dataSource = new MatTableDataSource([]);\n        this.selection = new SelectionModel(true);\n        this.displayedColumns = computed(() => this.columns().filter(e => e.visible).map(c => c.columnDef));\n        this.tableService.setTable(this);\n    }\n    ngOnDestroy() {\n        this._onLinesChanges.next();\n        this._onDestroy.next();\n        this._onLinesChanges.complete();\n        this._onDestroy.complete();\n    }\n    ngOnInit() {\n        this.dataSource.connect().subscribe(d => {\n            this.renderedData = d;\n        });\n        this.formHeader = this.initFormHeader();\n        this.formFooter = this.initFormFooter();\n    }\n    ngOnChanges(changes) {\n        // console.log('changes', changes);\n        // if (changes.columns) {\n        //     this.columns = changes.columns.currentValue;\n        //     this.formHeader = this.initFormHeader();\n        // }\n        // if (changes.lines) {\n        //     this.updateData(changes.lines.currentValue);\n        // }\n        // if (changes.selectionMode) {\n        //     this.selectionMode = changes.selectionMode.currentValue;\n        //     this.selection = new SelectionModel<any>(this.selectionMode);\n        // }\n        // if (changes.footer) {\n        // }\n    }\n    ngAfterViewInit() {\n        this.matTable?.updateStickyColumnStyles();\n    }\n    trackById(index, item) {\n        return item;\n    }\n    /** Form Header */\n    initFormHeader() {\n        const group = this.fb.group({});\n        this.columns().forEach(column => {\n            const colCellHeader = _.cloneDeep(column.headerCell);\n            colCellHeader.name = column.columnDef;\n            const control = this.buildControlField(colCellHeader, colCellHeader.value || '');\n            control.valueChanges.pipe(takeUntil(this._onDestroy), debounceTime(colCellHeader.debounceTime || 0)).subscribe(e => {\n                const group = control.parent;\n                this._onChangeHeaderCell.emit({ column, group });\n                this.tableService.onHeaderCellChange({ column, group });\n            });\n            group.addControl(colCellHeader.name, control);\n        });\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\n            this.tableService.onHeaderChange(e);\n        });\n        group.statusChanges.subscribe(e => {\n            this.tableService.onStatusHeaderChange(e);\n            this._onStatusHeaderChange.emit(e);\n        });\n        return group;\n    }\n    /** Form Array Line Table */\n    initFormArray() {\n        this.lineFields = [];\n        this._onLinesChanges.next();\n        const array = this.fb.array(this._lines.map((row) => {\n            return this.addFormLine(row);\n        }));\n        return array;\n    }\n    addFormLine(row) {\n        const group = this.fb.group({});\n        const idControl = this.fb.control(row._id);\n        const indexControl = this.fb.control(row._index);\n        const unfoldControl = this.fb.control(row._unfold || false);\n        group.addControl('_id', idControl);\n        group.addControl('_index', indexControl);\n        group.addControl('_unfold', unfoldControl);\n        const listField = [];\n        this.columns().forEach(column => {\n            column.cell.name = column.columnDef;\n            const colCell = _.cloneDeep(column.cell);\n            const control = this.buildControlField(colCell, row.value[colCell.name]);\n            listField.push(colCell);\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            })).subscribe(e => {\n                const group = control.parent;\n                this.tableService.onCellChange({ column, row: { ...group.value, [colCell.name]: e.value }, group, response: e.response });\n                this._onChangeCell.emit({ column, row: { ...group.value, [colCell.name]: e.value }, group, response: e.response });\n            });\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\n                const group = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group, status });\n                this._onStatusCellChange.emit({ cell: control, group, status });\n            });\n            group.addControl(column.cell.name, control);\n        });\n        this.lineFields.push(listField);\n        if (this.multiTemplate) {\n            if (this.templateUnfold) {\n                this.templateUnfold.cells.forEach((cell) => {\n                    const field = _.cloneDeep(cell);\n                    const control = this.buildControlField(field, row.value[cell.name]);\n                    group.addControl(cell.name, control);\n                });\n            }\n            if (this.templates?.length) {\n                this.templates.forEach(template => {\n                    template.cells.forEach((cell) => {\n                        const field = _.cloneDeep(cell);\n                        const control = this.buildControlField(field, row.value[cell.name]);\n                        group.addControl(cell.name, control);\n                    });\n                });\n            }\n        }\n        group.setValidators(this.lineValidations);\n        group.setAsyncValidators(this.lineAsyncValidations);\n        group.valueChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(value => {\n            this.tableService.onLineChange({ group, row, value });\n        });\n        group.statusChanges.subscribe(status => {\n            this.tableService.onStatusLineChange({ group, row, status });\n            this._onStatusLineChange.emit({ group, row, status });\n        });\n        return group;\n    }\n    updateFormCell(index, cell) {\n        const cellIndex = this.lineFields[index].findIndex(field => field.name === cell.name);\n        const column = this.columns().find(col => col.columnDef === cell.name);\n        const group = (this.form.controls.rows.controls\n            .find((c) => c.controls._index.value === index));\n        if (cellIndex >= 0 && column && group) {\n            this.lineFields[index][cellIndex] = _.cloneDeep(cell);\n            const colCell = _.cloneDeep(cell);\n            const control = this.buildControlField(colCell, group.value[cell.name] || cell.value);\n            group.setControl(cell.name, control);\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            }))\n                // distinctUntilChanged((prev, curr) => {\n                //     if (column.cell?.property && prev && curr) {\n                //         return prev[column.cell.property] === curr[column.cell.property];\n                //     }\n                //     return prev === curr;\n                // }))\n                .subscribe(e => {\n                const parent = control.parent;\n                this.tableService.onCellChange({ column, row: { ...parent.value, [cell.name]: e.value }, group: parent, response: e.response });\n                this._onChangeCell.emit({ column, row: { ...parent.value, [cell.name]: e.value }, group: parent, response: e.response });\n            });\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\n                const parent = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group: parent, status });\n                this._onStatusCellChange.emit({ cell: control, group: parent, status });\n            });\n            this.ref.markForCheck();\n        }\n    }\n    /** Form Footer */\n    initFormFooter() {\n        const group = this.fb.group({});\n        this.columns()\n            .filter((column) => column.footerCell)\n            .forEach(column => {\n            const colCellFooter = column.footerCell;\n            colCellFooter.name = column.columnDef;\n            const control = this.buildControlField(colCellFooter, this._footer[colCellFooter.name]);\n            control.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\n                const parent = control.parent;\n                const change = { column, group: parent };\n                this._onChangeFooterCell.emit(change);\n                this.tableService.onFooterCellChange(change);\n            });\n            group.addControl(colCellFooter.name, control);\n        });\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\n            this.tableService.onFooterChange(e);\n        });\n        return group;\n    }\n    /**Field and control */\n    buildControlField(field, value) {\n        const asyncValidations = field.asyncValidations?.map(asyncValisation => {\n            const klesValidator = { ...asyncValisation };\n            const validatorFn = ((c) => {\n                const validator$ = klesValidator.validator(c);\n                if (validator$ instanceof Promise) {\n                    return validator$.finally(() => this.ref.markForCheck());\n                }\n                else {\n                    return validator$.pipe(tap(() => this.ref.markForCheck()));\n                }\n            });\n            asyncValisation.validator = validatorFn;\n            return asyncValisation;\n        }) || [];\n        if (field.type) {\n            return componentMapper.find(c => c.type === field.type)?.factory({ ...field, value, asyncValidations }) || klesFieldControlFactory({ ...field, value, asyncValidations });\n        }\n        else {\n            return componentMapper.find(c => c.component === field.component)?.factory({ ...field, value, asyncValidations }) || klesFieldControlFactory({ ...field, value, asyncValidations });\n        }\n    }\n    getFormArray() {\n        return this.form.get('rows');\n    }\n    getFilterFormArray() {\n        // return this.fb.array(this.renderedData);\n        return this.renderedData;\n    }\n    getActualIndex(index) {\n        if (this.paginator && !this.hidePaginator) {\n            return index + this.paginator.pageSize * this.paginator.pageIndex;\n        }\n        return index;\n    }\n    getControls(index) {\n        //console.log('GetControls index=', index, \"=\", (this.form.get('rows') as FormArray).controls);\n        //(this.form.get('rows') as FormArray).push\n        //(this.form.get('rows') as FormArray).removeAt(index)\n        //return (this.form.get('rows') as FormArray).controls[index];\n        // return this.getFilterFormArray().controls[this.getActualIndex(index)];\n        // return this.getFilterFormArray().controls[index];\n        return this.getFilterFormArray()[index];\n    }\n    getLineFields(index, key) {\n        // return this.lineFields[this.getActualIndex(index)].find(f => f.name === key);\n        return this.lineFields[index].find(f => f.name === key);\n    }\n    /**Manage Data */\n    /**\n* Method to set the data lines to datasource table\n*/\n    setItems() {\n        this.form = this.fb.group({\n            rows: this.initFormArray()\n        });\n        this.dataSource.data = this.getFormArray().controls;\n        this.dataSource.filteredData = this.getFormArray().controls;\n        this._onLoaded.emit();\n        this.tableService.onDataLoaded();\n    }\n    updateFooter(footer) {\n        this._footer = { ...footer };\n        this.formFooter = this.initFormFooter();\n    }\n    updateData(lines) {\n        this._lines = lines.map((l, index) => {\n            const data = { ...l };\n            const options = data.options;\n            const _id = l._id || uuid.v4();\n            const _unfold = l._unfold || false;\n            const _index = index;\n            delete data._id;\n            delete data.options;\n            return {\n                _id,\n                _unfold,\n                _index,\n                ...options && { options },\n                value: data,\n            };\n        });\n        this.setItems();\n    }\n    setDataSourceAttributes() {\n        if (!this.hidePaginator) {\n            this.dataSource.paginator = this.paginator;\n        }\n        else {\n            this.dataSource.paginator = null;\n        }\n        if (this.sort) {\n            this.dataSource.sort = this.sort;\n            this.tableService.setTable(this);\n            this.dataSource.sortingDataAccessor = this.tableService.getSortingDataAccessor;\n            if (this.paginator && !this.hidePaginator) {\n                this.sort.sortChange.subscribe(() => {\n                    this.paginator.pageIndex = 0;\n                });\n            }\n            if (!this.sortDefault && this.sortConfig) {\n                // console.log('Active default sort');\n                this.sort.active = this.sortConfig.active;\n                this.sort.direction = this.sortConfig.direction;\n                this.sort.sortChange.emit(this.sortConfig);\n                this.sortDefault = !this.sortDefault;\n            }\n        }\n    }\n    getSelectedLines() {\n        return this.getFormArray().controls.filter(f => this.selection.isSelected(f));\n    }\n    /** Table rendering */\n    /**\n     * Method to rendering cell color\n     * @param row\n     * @param column\n     */\n    getCellStyle(row, column) {\n        return this.tableService.getCellStyle(row, column);\n    }\n    getFooterStyle(column) {\n        return this.tableService.getFooterStyle(column);\n    }\n    /**\n     * Method to check if column is sticky\n     * @param column\n     */\n    // isSticky(column: KlesColumnConfig): boolean {\n    //     console.log('isSticky')\n    //     return column.sticky || false;\n    // }\n    formatElevation() {\n        return `mat-elevation-z${this.options.elevation}`;\n    }\n    isSortingDisabled(column) {\n        return column.sortable || false;\n    }\n    setVisible(name, visible) {\n        this.columns.update((columns) => {\n            const column = columns.find(col => col.columnDef === name);\n            if (column) {\n                column.visible = visible;\n            }\n            return columns;\n        });\n    }\n    pageChanged(event) {\n        this.tableService.onPageChange(event);\n    }\n    getTemplateColumns(template) {\n        return template.cells.map(c => c.name);\n    }\n    onClick(row) {\n        this._onClick.emit(row);\n        this.tableService.onClick(row);\n    }\n    drop(event) {\n        this.tableService.drop(event);\n    }\n    sortPredicate() {\n        return ((index, item) => {\n            return this.tableService?.getSortPredicate(index, item);\n        });\n    }\n    static { this.ɵfac = function KlesTableComponent_Factory(t) { return new (t || KlesTableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesTableComponent, selectors: [[\"app-kles-dynamictable\"]], viewQuery: function KlesTableComponent_Query(rf, ctx) { if (rf & 1) {\n            i0.ɵɵviewQuery(MatSort, 5);\n            i0.ɵɵviewQuery(MatPaginator, 7);\n            i0.ɵɵviewQuery(MatTable, 5);\n        } if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matSort = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matPaginator = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matTable = _t.first);\n        } }, inputs: { id: \"id\", _lines: \"_lines\", lines: \"lines\", _footer: \"_footer\", footer: \"footer\", columns: \"columns\", selectionMode: \"selectionMode\", options: \"options\", sortConfig: \"sortConfig\", hidePaginator: \"hidePaginator\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", showFooter: \"showFooter\", dragDropRows: \"dragDropRows\", dragDropRowsOptions: \"dragDropRowsOptions\", lineValidations: \"lineValidations\", lineAsyncValidations: \"lineAsyncValidations\", ngClassRow: \"ngClassRow\", multiTemplate: \"multiTemplate\", templates: \"templates\", templateUnfold: \"templateUnfold\" }, outputs: { _onLoaded: \"_onLoaded\", _onSelected: \"_onSelected\", _onChangeHeaderCell: \"_onChangeHeaderCell\", _onChangeCell: \"_onChangeCell\", _onChangeFooterCell: \"_onChangeFooterCell\", _onStatusHeaderChange: \"_onStatusHeaderChange\", _onStatusLineChange: \"_onStatusLineChange\", _onStatusCellChange: \"_onStatusCellChange\", _onClick: \"_onClick\", _onDragDropRow: \"_onDragDropRow\" }, features: [i0.ɵɵProvidersFeature([\n                { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                {\n                    provide: DateAdapter,\n                    useClass: MomentDateAdapter,\n                    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                },\n                { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n            ]), i0.ɵɵNgOnChangesFeature], decls: 13, vars: 25, consts: [[\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"id\", \"dataSource\", \"ngClass\", \"trackBy\", \"multiTemplateDataRows\", \"cdkDropListData\", \"cdkDropListDisabled\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [3, \"cdkColumnDef\", \"sticky\", 4, \"ngFor\", \"ngForOf\"], [3, \"matColumnDef\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"], [\"paginator\", \"\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\", 4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"siblingFields\", \"column\", \"config\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-row\", \"\", 3, \"ngClass\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-row\", \"\", 3, \"ngClass\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesTableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesTableComponent_Template_table_cdkDropListDropped_1_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(2, \"elevationPipe\");\n            i0.ɵɵtemplate(3, KlesTableComponent_ng_container_3_Template, 6, 3, \"ng-container\", 2)(4, KlesTableComponent_Conditional_4_Template, 1, 1, \"ng-container\", 3)(5, KlesTableComponent_ng_container_5_Template, 2, 1, \"ng-container\", 4)(6, KlesTableComponent_tr_6_Template, 1, 0, \"tr\", 5)(7, KlesTableComponent_tr_7_Template, 5, 10, \"tr\", 6)(8, KlesTableComponent_Conditional_8_Template, 2, 2, \"ng-container\")(9, KlesTableComponent_Conditional_9_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(10, \"div\", 7)(11, \"mat-paginator\", 8, 9);\n            i0.ɵɵlistener(\"page\", function KlesTableComponent_Template_mat_paginator_page_11_listener($event) { return ctx.pageChanged($event); });\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"id\", ctx.id)(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(2, 23, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate())(\"cdkDropListConnectedTo\", ctx.dragDropRowsOptions.connectedTo);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.columns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(4, ctx.templateUnfold && ctx.multiTemplate ? 4 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.templates);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(8, ctx.multiTemplate ? 8 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(9, ctx.showFooter ? 9 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i8.NgForOf, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.size-16[_ngcontent-%COMP%]{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}  .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-dynamictable', animations: [rowsAnimation], providers: [\n                    { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                    {\n                        provide: DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    },\n                    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n                ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n  <table [id]=\\\"id\\\" mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n    formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" [multiTemplateDataRows]=\\\"multiTemplate\\\"\\r\\n    cdkDropList (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n    [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\" [cdkDropListSortPredicate]=\\\"sortPredicate()\\\"\\r\\n    [cdkDropListConnectedTo]=\\\"dragDropRowsOptions.connectedTo\\\">\\r\\n    <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n\\r\\n      <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n        <div style=\\\"display: inline-flex;\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n          </ng-container>\\r\\n        </div>\\r\\n      </th>\\r\\n      <div>\\r\\n        @if (multiTemplate) {\\r\\n          <td mat-cell *cdkCellDef=\\\"let row;let index = dataIndex;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n            [ngClass]=\\\"column | cellPipe\\\">\\r\\n            <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\" [group]=\\\"index | groupPipe\\\"\\r\\n              [siblingFields]=\\\"lineFields[index]\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n          </td>\\r\\n        }\\r\\n        @else {\\r\\n          <td mat-cell *cdkCellDef=\\\"let row;let index = index;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n            [ngClass]=\\\"column | cellPipe\\\">\\r\\n            <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\" [group]=\\\"index | groupPipe\\\"\\r\\n              [siblingFields]=\\\"lineFields[row.value._index]\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n          </td>\\r\\n        }\\r\\n\\r\\n        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n          @if (column.footerCell) {\\r\\n            <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n            </ng-container>\\r\\n          }\\r\\n        </td>\\r\\n      </div>\\r\\n\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    @if (templateUnfold && multiTemplate) {\\r\\n      <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n          [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n          [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n            [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n          </ng-container>\\r\\n        </td>\\r\\n      </ng-container>\\r\\n    }\\r\\n\\r\\n    <ng-container *ngFor=\\\"let template of templates\\\">\\r\\n      <ng-container *ngFor=\\\"let cell of template.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n          [attr.colspan]=\\\"cell.colspan | spanPipe: displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n          [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\">\\r\\n          </ng-container>\\r\\n        </td>\\r\\n      </ng-container>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n    <tr mat-row [ngClass]=\\\"(row | rowPipe)\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\" (click)=\\\"onClick(row)\\\"\\r\\n      cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\" [@rowsAnimation]=\\\"\\\">\\r\\n\\r\\n      @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n        <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n          <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n          </ng-container>\\r\\n        </ng-template>\\r\\n      }\\r\\n\\r\\n      @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n        <ng-template cdkDragPlaceholder>\\r\\n          <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\" [value]=\\\"row\\\">\\r\\n          </ng-container>\\r\\n        </ng-template>\\r\\n      }\\r\\n    </tr>\\r\\n\\r\\n    @if (multiTemplate) {\\r\\n      @if (templateUnfold) {\\r\\n        <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\"></tr>\\r\\n      }\\r\\n\\r\\n      <ng-container *ngFor=\\\"let template of templates\\\">\\r\\n        <tr mat-row [ngClass]=\\\"row | rowPipe\\\" [@rowsAnimation]=\\\"\\\"\\r\\n          *matRowDef=\\\"let row; columns: getTemplateColumns(template); when: template.when\\\"></tr>\\r\\n      </ng-container>\\r\\n    }\\r\\n\\r\\n    @if (showFooter) {\\r\\n      <div>\\r\\n        <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n        </tr>\\r\\n      </div>\\r\\n    }\\r\\n  </table>\\r\\n\\r\\n</form>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n  <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n    (page)=\\\"pageChanged($event)\\\">\\r\\n  </mat-paginator>\\r\\n</div> \", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-cell,.mat-mdc-footer-cell{text-align:center}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}.value-cell{display:flex;align-items:left}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}::ng-deep .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row{font-weight:700}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: AbstractKlesTableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], { matSort: [{\n            type: ViewChild,\n            args: [MatSort, { static: false }]\n        }], matPaginator: [{\n            type: ViewChild,\n            args: [MatPaginator, { static: true }]\n        }], matTable: [{\n            type: ViewChild,\n            args: [MatTable]\n        }], id: [{\n            type: Input\n        }], _lines: [{\n            type: Input\n        }], lines: [{\n            type: Input\n        }], _footer: [{\n            type: Input\n        }], footer: [{\n            type: Input\n        }], columns: [{\n            type: Input\n        }], selectionMode: [{\n            type: Input\n        }], options: [{\n            type: Input\n        }], sortConfig: [{\n            type: Input\n        }], hidePaginator: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], pageSizeOptions: [{\n            type: Input\n        }], showFooter: [{\n            type: Input\n        }], dragDropRows: [{\n            type: Input\n        }], dragDropRowsOptions: [{\n            type: Input\n        }], lineValidations: [{\n            type: Input\n        }], lineAsyncValidations: [{\n            type: Input\n        }], ngClassRow: [{\n            type: Input\n        }], multiTemplate: [{\n            type: Input\n        }], templates: [{\n            type: Input\n        }], templateUnfold: [{\n            type: Input\n        }], _onLoaded: [{\n            type: Output\n        }], _onSelected: [{\n            type: Output\n        }], _onChangeHeaderCell: [{\n            type: Output\n        }], _onChangeCell: [{\n            type: Output\n        }], _onChangeFooterCell: [{\n            type: Output\n        }], _onStatusHeaderChange: [{\n            type: Output\n        }], _onStatusLineChange: [{\n            type: Output\n        }], _onStatusCellChange: [{\n            type: Output\n        }], _onClick: [{\n            type: Output\n        }], _onDragDropRow: [{\n            type: Output\n        }] }); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesTableComponent, { className: \"KlesTableComponent\", filePath: \"lib\\\\component\\\\table\\\\table.component.ts\", lineNumber: 48 }); })();","originalLength":128967,"removedExports":[],"renderedExports":["KlesTableComponent"],"renderedLength":56157},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\abstractlazytable.service.mjs":{"code":"class AbstractKlesLazyTableService extends AbstractKlesTableService {\n}","originalLength":1218,"removedExports":[],"renderedExports":["AbstractKlesLazyTableService"],"renderedLength":71},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\lazytable\\lazytable.component.mjs":{"code":"const _forTrack0$1 = ($index, $item) => $item.columnDef;\nfunction KlesLazyTableComponent_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"mat-spinner\");\n    i0.ɵɵelementEnd();\n} }\nconst _c1 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesLazyTableComponent_For_6_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15)(1, \"div\", 16);\n    i0.ɵɵelementContainer(2, 17);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r8.ngClass);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r8.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c1, ctx_r11.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r8.headerCell)(\"group\", ctx_r11.formHeader);\n} }\nconst _c2 = a0 => ({ templateUnfold: a0 });\nfunction KlesLazyTableComponent_For_6_Conditional_3_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 20);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r17 = ctx.$implicit;\n    const index_r18 = ctx.dataIndex;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r16.getCellStyle(row_r17, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r17.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r18))(\"siblingFields\", ctx_r16.lineFields[row_r17.value._index])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c2, ctx_r16.templateUnfold));\n} }\nfunction KlesLazyTableComponent_For_6_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_For_6_Conditional_3_td_0_Template, 5, 17, \"td\", 18);\n} }\nfunction KlesLazyTableComponent_For_6_Conditional_4_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 20);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r21 = ctx.$implicit;\n    const index_r22 = ctx.index;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r20.getCellStyle(row_r21, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r21.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r22))(\"siblingFields\", ctx_r20.lineFields[row_r21.value._index])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c2, ctx_r20.templateUnfold));\n} }\nfunction KlesLazyTableComponent_For_6_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_For_6_Conditional_4_td_0_Template, 5, 17, \"td\", 18);\n} }\nfunction KlesLazyTableComponent_For_6_td_5_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 17);\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r24 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r8.footerCell)(\"group\", ctx_r24.formFooter);\n} }\nfunction KlesLazyTableComponent_For_6_td_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_For_6_td_5_Conditional_1_Template, 1, 2, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r14.getFooterStyle(column_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r8.footerCell ? 1 : -1);\n} }\nfunction KlesLazyTableComponent_For_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 11);\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_For_6_th_1_Template, 3, 9, \"th\", 12);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtemplate(3, KlesLazyTableComponent_For_6_Conditional_3_Template, 1, 0, \"td\", 13)(4, KlesLazyTableComponent_For_6_Conditional_4_Template, 1, 0)(5, KlesLazyTableComponent_For_6_td_5_Template, 2, 3, \"td\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r8 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r8.columnDef)(\"sticky\", column_r8.sticky || false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, ctx_r1.multiTemplate ? 3 : 4);\n} }\nconst _forTrack3 = ($index, $item) => $item.name;\nfunction KlesLazyTableComponent_Conditional_7_For_1_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 24);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r32 = ctx.$implicit;\n    const index_r33 = ctx.dataIndex;\n    const cell_r28 = i0.ɵɵnextContext().$implicit;\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c1, ctx_r31.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 6, cell_r28.colspan, ctx_r31.displayedColumns().length))(\"rowspan\", cell_r28.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r28)(\"group\", i0.ɵɵpipeBind1(3, 9, index_r33))(\"siblingFields\", ctx_r31.lineFields[row_r32.value._index]);\n} }\nfunction KlesLazyTableComponent_Conditional_7_For_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 22);\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_Conditional_7_For_1_td_1_Template, 4, 13, \"td\", 23);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r28 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r28.name);\n} }\nfunction KlesLazyTableComponent_Conditional_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, KlesLazyTableComponent_Conditional_7_For_1_Template, 2, 1, \"ng-container\", 22, _forTrack3);\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵrepeater(0, ctx_r2.templateUnfold.cells);\n} }\nfunction KlesLazyTableComponent_tr_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 25);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 29);\n} if (rf & 2) {\n    const row_r35 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r38 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r38.dragDropRowsOptions == null ? null : ctx_r38.dragDropRowsOptions.dragPreview == null ? null : ctx_r38.dragDropRowsOptions.dragPreview.component)(\"value\", row_r35);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_tr_9_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 27);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 29);\n} if (rf & 2) {\n    const row_r35 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r40 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r40.dragDropRowsOptions == null ? null : ctx_r40.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r40.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r35);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_tr_9_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 28);\n} }\nfunction KlesLazyTableComponent_tr_9_Template(rf, ctx) { if (rf & 1) {\n    const _r43 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 26);\n    i0.ɵɵlistener(\"click\", function KlesLazyTableComponent_tr_9_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r43); const row_r35 = restoredCtx.$implicit; const ctx_r42 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r42.onClick(row_r35)); });\n    i0.ɵɵpipe(1, \"rowPipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesLazyTableComponent_tr_9_Conditional_3_Template, 1, 1, null, 27)(4, KlesLazyTableComponent_tr_9_Conditional_4_Template, 1, 0, null, 28);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r35 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 6, row_r35))(\"@rowsAnimation\", undefined)(\"cdkDragData\", row_r35)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 8, row_r35));\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPreview == null ? null : ctx_r4.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesLazyTableComponent_Conditional_10_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 6);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesLazyTableComponent_Conditional_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_Conditional_10_tr_0_Template, 1, 1, \"tr\", 30);\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r5.getTemplateColumns(ctx_r5.templateUnfold))(\"matRowDefWhen\", ctx_r5.tableService.unfoldPredicate);\n} }\nfunction KlesLazyTableComponent_Conditional_11_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 32);\n} }\nfunction KlesLazyTableComponent_Conditional_11_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_Conditional_11_tr_1_Template, 1, 0, \"tr\", 31);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r6.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesLazyTableComponent extends KlesTableComponent {\n    constructor(translate, adapter, fb1, ref, dialog, sanitizer, _adapter, tableService) {\n        super(translate, adapter, fb1, ref, dialog, sanitizer, _adapter, tableService);\n        this.translate = translate;\n        this.adapter = adapter;\n        this.fb1 = fb1;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.tableService = tableService;\n        this.loading = signal(false);\n        this.filteredValues$ = new BehaviorSubject({});\n        this.reload$ = new Subject();\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.filteredValues$.next(this.columns()\n            .filter(column => column.filterable)\n            .map(column => {\n            return { [column.columnDef]: this.formHeader.controls[column.columnDef].value };\n        })\n            .reduce((a, b) => ({ ...a, ...b }), {}));\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        merge(this.sort.sortChange, this.filteredValues$.pipe(debounceTime(500)), this.reload$)\n            .subscribe(() => this.paginator.pageIndex = 0);\n        merge(this.reload$, this.sort.sortChange.pipe(distinctUntilChanged()), this.paginator.page.pipe(distinctUntilChanged()), this.filteredValues$.pipe(debounceTime(500)))\n            .pipe(takeUntil(this._onDestroy), switchMap(() => {\n            return concat(of({ loading: true, value: { lines: [], totalCount: 0, footer: {}, header: {} } }), this.tableService.load(this.sort.active, this.sort.direction, this.paginator.pageIndex, this.paginator.pageSize, this.filteredValues$.getValue()).pipe(map(value => ({ loading: false, value })), catchError((err) => {\n                console.error(err);\n                return of({ loading: false, value: { lines: [], totalCount: 0, footer: {}, header: {} } });\n            })));\n        }))\n            .subscribe((response) => {\n            if (response.loading) {\n                this.loading.set(true);\n            }\n            else {\n                this.loading.set(false);\n                if (this.showFooter && response.value.footer) {\n                    this.formFooter.patchValue(response.value.footer);\n                }\n                if (response.value.header) {\n                    this.formHeader.patchValue(response.value.header, { emitEvent: false });\n                }\n                this.updateData(response.value.lines);\n                this.paginator.length = response.value.totalCount;\n            }\n        });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    getLineFields(index, key) {\n        return this.lineFields[index].find(f => f.name === key);\n    }\n    setDataSourceAttributes() {\n        if (this.sort) {\n            if (this.paginator && !this.hidePaginator) {\n                this.sort.sortChange.subscribe(() => {\n                    this.paginator.pageIndex = 0;\n                });\n            }\n            if (this.sortConfig) {\n                this.sort.active = this.sortConfig.active;\n                this.sort.direction = this.sortConfig.direction;\n                this.sort.sortChange.emit(this.sortConfig);\n                // this.sortDefault = !this.sortDefault;\n            }\n        }\n        this.tableService.setTable(this);\n    }\n    static { this.ɵfac = function KlesLazyTableComponent_Factory(t) { return new (t || KlesLazyTableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesLazyTableComponent, selectors: [[\"app-kles-lazytable\"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 15, vars: 24, consts: [[2, \"position\", \"relative\"], [\"class\", \"loading\"], [\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"id\", \"dataSource\", \"ngClass\", \"trackBy\", \"cdkDropListData\", \"cdkDropListDisabled\", \"multiTemplateDataRows\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-row\", \"\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"], [\"paginator\", \"\"], [1, \"loading\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\", 4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"siblingFields\", \"column\", \"config\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesLazyTableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, KlesLazyTableComponent_Conditional_1_Template, 2, 0, \"div\", 1);\n            i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesLazyTableComponent_Template_table_cdkDropListDropped_3_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(4, \"elevationPipe\");\n            i0.ɵɵrepeaterCreate(5, KlesLazyTableComponent_For_6_Template, 6, 3, \"ng-container\", 11, _forTrack0$1);\n            i0.ɵɵtemplate(7, KlesLazyTableComponent_Conditional_7_Template, 2, 0)(8, KlesLazyTableComponent_tr_8_Template, 1, 0, \"tr\", 4)(9, KlesLazyTableComponent_tr_9_Template, 5, 10, \"tr\", 5)(10, KlesLazyTableComponent_Conditional_10_Template, 1, 2, \"tr\", 6)(11, KlesLazyTableComponent_Conditional_11_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(12, \"div\", 7)(13, \"mat-paginator\", 8, 9);\n            i0.ɵɵlistener(\"page\", function KlesLazyTableComponent_Template_mat_paginator_page_13_listener($event) { return ctx.pageChanged($event); });\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(1, ctx.loading() ? 1 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"id\", ctx.id)(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(4, 22, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate())(\"cdkDropListConnectedTo\", ctx.dragDropRowsOptions.connectedTo);\n            i0.ɵɵrepeater(5, ctx.columns());\n            i0.ɵɵadvance(4);\n            i0.ɵɵconditional(7, ctx.templateUnfold && ctx.multiTemplate ? 7 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(10, ctx.multiTemplate && ctx.templateUnfold ? 10 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(11, ctx.showFooter ? 11 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i3.MatProgressSpinner, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:last-of-type{padding-right:0!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.size-16[_ngcontent-%COMP%]{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}  .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}.loading[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesLazyTableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-lazytable', animations: [rowsAnimation], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div style=\\\"position: relative;\\\">\\r\\n    @if (loading()) {\\r\\n        <div class=\\\"loading\\\">\\r\\n            <mat-spinner></mat-spinner>\\r\\n        </div>\\r\\n    }\\r\\n    <form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n        <table [id]=\\\"id\\\" mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n            formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n            (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n            [multiTemplateDataRows]=\\\"multiTemplate\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n            [cdkDropListSortPredicate]=\\\"sortPredicate()\\\" [cdkDropListConnectedTo]=\\\"dragDropRowsOptions.connectedTo\\\">\\r\\n            @for (column of columns(); track column.columnDef) {\\r\\n                <ng-container [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.ngClass}}\\\"\\r\\n                        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                        <div style=\\\"display: inline-flex;\\\">\\r\\n                            <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </th>\\r\\n                    <div>\\r\\n                        @if (multiTemplate) {\\r\\n                            <td mat-cell *cdkCellDef=\\\"let row;let index = dataIndex;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [siblingFields]=\\\"lineFields[row.value._index]\\\"\\r\\n                                    [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        }\\r\\n                        @else {\\r\\n                            <td mat-cell *cdkCellDef=\\\"let row;let index = index;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [siblingFields]=\\\"lineFields[row.value._index]\\\"\\r\\n                                    [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        }\\r\\n\\r\\n                        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                            @if (column.footerCell) {\\r\\n                                <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                                </ng-container>\\r\\n                            }\\r\\n                        </td>\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            }\\r\\n\\r\\n            @if (templateUnfold && multiTemplate) {\\r\\n                @for (cell of templateUnfold.cells; track cell.name) {\\r\\n                    <ng-container [matColumnDef]=\\\"cell.name\\\">\\r\\n                        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                            [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                            [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                            <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n                                [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n                            </ng-container>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                }\\r\\n            }\\r\\n\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n            <tr mat-row [ngClass]=\\\"row | rowPipe\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\" [@rowsAnimation]=\\\"\\\"\\r\\n                (click)=\\\"onClick(row)\\\" cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\">\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                    <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                    <ng-template cdkDragPlaceholder>\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\"\\r\\n                            [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n            </tr>\\r\\n\\r\\n            @if (multiTemplate && templateUnfold) {\\r\\n                <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n                </tr>\\r\\n            }\\r\\n\\r\\n            @if (showFooter) {\\r\\n                <div>\\r\\n                    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                    </tr>\\r\\n                </div>\\r\\n            }\\r\\n        </table>\\r\\n\\r\\n    </form>\\r\\n</div>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n        (page)=\\\"pageChanged($event)\\\">\\r\\n    </mat-paginator>\\r\\n</div>\", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-cell,.mat-mdc-footer-cell{text-align:center}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell:last-of-type,td.mat-mdc-cell:last-of-type,td.mat-mdc-footer-cell:last-of-type{padding-right:0!important}.value-cell{display:flex;align-items:left}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}::ng-deep .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row{font-weight:700}.loading{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: AbstractKlesLazyTableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesLazyTableComponent, { className: \"KlesLazyTableComponent\", filePath: \"lib\\\\component\\\\lazytable\\\\lazytable.component.ts\", lineNumber: 20 }); })();","originalLength":61925,"removedExports":[],"renderedExports":["KlesLazyTableComponent"],"renderedLength":36135},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\header\\textheader.component.mjs":{"code":"class KlesFormTextHeaderComponent extends KlesFieldAbstract {\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesFormTextHeaderComponent_BaseFactory; return function KlesFormTextHeaderComponent_Factory(t) { return (ɵKlesFormTextHeaderComponent_BaseFactory || (ɵKlesFormTextHeaderComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesFormTextHeaderComponent)))(t || KlesFormTextHeaderComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesFormTextHeaderComponent, selectors: [[\"kles-form-textheader\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [[\"mat-sort-header\", \"\", 3, \"disabled\"]], template: function KlesFormTextHeaderComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n            i0.ɵɵtext(2);\n            i0.ɵɵpipe(3, \"translate\");\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"disabled\", !ctx.field.sortable);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, ctx.field.label));\n        } }, dependencies: [i11.MatSortHeader, i1$1.TranslatePipe], styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesFormTextHeaderComponent, [{\n        type: Component,\n        args: [{ selector: 'kles-form-textheader', template: `\r\n    <div mat-sort-header [disabled]=\"!field.sortable\"><span>{{ field.label | translate}}</span></div>\r\n    `, styles: [\"mat-form-field{width:100%}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesFormTextHeaderComponent, { className: \"KlesFormTextHeaderComponent\", filePath: \"lib\\\\component\\\\header\\\\textheader.component.ts\", lineNumber: 12 }); })();","originalLength":3848,"removedExports":[],"renderedExports":["KlesFormTextHeaderComponent"],"renderedLength":1885},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\header\\textheaderfilter.component.mjs":{"code":"const _forTrack0 = ($index, $item) => $item.name;\nfunction KlesFormTextHeaderFilterComponent_Conditional_5_For_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r7);\n} }\nfunction KlesFormTextHeaderFilterComponent_Conditional_5_Template(rf, ctx) { if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 4);\n    i0.ɵɵlistener(\"click\", function KlesFormTextHeaderFilterComponent_Conditional_5_Template_input_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.stopPropagation($event)); });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-autocomplete\", null, 5);\n    i0.ɵɵrepeaterCreate(4, KlesFormTextHeaderFilterComponent_Conditional_5_For_5_Template, 2, 2, \"mat-option\", 6, i0.ɵɵrepeaterTrackByIdentity);\n    i0.ɵɵpipe(6, \"async\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r5 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx_r0.field.tooltip);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.field.ngClass)(\"formControlName\", ctx_r0.field.name)(\"placeholder\", i0.ɵɵpipeBind1(1, 7, ctx_r0.field.placeholder))(\"type\", ctx_r0.field.inputType)(\"matAutocomplete\", _r5);\n    i0.ɵɵattribute(\"id\", ctx_r0.field.id);\n    i0.ɵɵrepeater(4, i0.ɵɵpipeBind1(6, 9, ctx_r0.filteredOption));\n} }\nfunction KlesFormTextHeaderFilterComponent_Conditional_6_Template(rf, ctx) { if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 7);\n    i0.ɵɵlistener(\"click\", function KlesFormTextHeaderFilterComponent_Conditional_6_Template_input_click_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.stopPropagation($event)); });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx_r1.field.tooltip);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.field.ngClass)(\"formControlName\", ctx_r1.field.name)(\"placeholder\", i0.ɵɵpipeBind1(1, 6, ctx_r1.field.placeholder))(\"type\", ctx_r1.field.inputType);\n    i0.ɵɵattribute(\"id\", ctx_r1.field.id);\n} }\nfunction KlesFormTextHeaderFilterComponent_Conditional_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 3);\n} }\nfunction KlesFormTextHeaderFilterComponent_For_12_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const validation_r14 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, validation_r14.message));\n} }\nfunction KlesFormTextHeaderFilterComponent_For_12_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 8);\n    i0.ɵɵtemplate(1, KlesFormTextHeaderFilterComponent_For_12_Conditional_1_Template, 3, 3, \"mat-error\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const validation_r14 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r3.group.get(ctx_r3.field.name).hasError(validation_r14.name) ? 1 : -1);\n} }\nfunction KlesFormTextHeaderFilterComponent_For_14_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const validation_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, validation_r19.message));\n} }\nfunction KlesFormTextHeaderFilterComponent_For_14_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 8);\n    i0.ɵɵtemplate(1, KlesFormTextHeaderFilterComponent_For_14_Conditional_1_Template, 3, 3, \"mat-error\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const validation_r19 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r4.group.get(ctx_r4.field.name).hasError(validation_r19.name) ? 1 : -1);\n} }\nclass KlesFormTextHeaderFilterComponent extends KlesFieldAbstract {\n    ngOnInit() {\n        if (this.field.options instanceof Observable) {\n            this.options$ = this.field.options;\n        }\n        else {\n            this.options$ = of(this.field.options);\n        }\n        this.filteredOption = this.group.get(this.field.name).valueChanges\n            .pipe(startWith(''), switchMap(data => data ? this.filterData(data) : this.options$));\n    }\n    isPending() {\n        return this.group.controls[this.field.name].pending;\n    }\n    filterData(value) {\n        let filterValue;\n        if (typeof value === 'string' && Object.prototype.toString.call(value) === '[object String]') {\n            filterValue = value.toLowerCase();\n        }\n        else {\n            filterValue = value[this.field.property].toLowerCase();\n        }\n        if (this.field.property) {\n            return this.options$\n                .pipe(map(options => options.filter(option => option[this.field.property].toLowerCase().indexOf(filterValue) === 0)));\n        }\n        return this.options$.pipe(map(options => options.filter(option => option.toLowerCase().indexOf(filterValue) === 0)));\n    }\n    stopPropagation(event) {\n        event.stopPropagation();\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesFormTextHeaderFilterComponent_BaseFactory; return function KlesFormTextHeaderFilterComponent_Factory(t) { return (ɵKlesFormTextHeaderFilterComponent_BaseFactory || (ɵKlesFormTextHeaderFilterComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesFormTextHeaderFilterComponent)))(t || KlesFormTextHeaderFilterComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesFormTextHeaderFilterComponent, selectors: [[\"kles-form-textheaderfilter\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 7, consts: [[\"mat-sort-header\", \"\", 3, \"disabled\"], [1, \"form-element\", 3, \"formGroup\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [\"matSuffix\", \"\", \"mode\", \"indeterminate\", \"diameter\", \"17\"], [\"matInput\", \"\", 3, \"matTooltip\", \"ngClass\", \"formControlName\", \"placeholder\", \"type\", \"matAutocomplete\", \"click\"], [\"auto\", \"matAutocomplete\"], [3, \"value\"], [\"matInput\", \"\", 3, \"matTooltip\", \"ngClass\", \"formControlName\", \"placeholder\", \"type\", \"click\"], [\"ngProjectAs\", \"mat-error\", 5, [\"mat-error\"]]], template: function KlesFormTextHeaderFilterComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n            i0.ɵɵtext(2);\n            i0.ɵɵpipe(3, \"translate\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(4, \"mat-form-field\", 1);\n            i0.ɵɵtemplate(5, KlesFormTextHeaderFilterComponent_Conditional_5_Template, 7, 11)(6, KlesFormTextHeaderFilterComponent_Conditional_6_Template, 2, 8);\n            i0.ɵɵelementStart(7, \"button\", 2);\n            i0.ɵɵlistener(\"click\", function KlesFormTextHeaderFilterComponent_Template_button_click_7_listener($event) { ctx.group.controls[ctx.field.name].reset(\"\"); return ctx.stopPropagation($event); });\n            i0.ɵɵelementStart(8, \"mat-icon\");\n            i0.ɵɵtext(9, \"close\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(10, KlesFormTextHeaderFilterComponent_Conditional_10_Template, 1, 0, \"mat-spinner\", 3);\n            i0.ɵɵrepeaterCreate(11, KlesFormTextHeaderFilterComponent_For_12_Template, 2, 1, \"ng-container\", 8, _forTrack0);\n            i0.ɵɵrepeaterCreate(13, KlesFormTextHeaderFilterComponent_For_14_Template, 2, 1, \"ng-container\", 8, _forTrack0);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"disabled\", !ctx.field.sortable);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, ctx.field.label));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.group);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(5, ctx.field.autocomplete ? 5 : 6);\n            i0.ɵɵadvance(5);\n            i0.ɵɵconditional(10, ctx.isPending() ? 10 : -1);\n            i0.ɵɵrepeater(11, ctx.field.validations);\n            i0.ɵɵrepeater(13, ctx.field.asyncValidations);\n        } }, dependencies: [i8.NgClass, i1.MatButton, i1.MatIconButton, i2.MatIcon, i4$1.MatInput, i5$1.MatFormField, i5$1.MatError, i5$1.MatSuffix, i2$1.MatOption, i7$1.MatTooltip, i3.MatProgressSpinner, i9$1.MatAutocomplete, i9$1.MatAutocompleteTrigger, i11.MatSortHeader, i3$1.DefaultValueAccessor, i3$1.NgControlStatus, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormControlName, i8.AsyncPipe, i1$1.TranslatePipe], styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesFormTextHeaderFilterComponent, [{\n        type: Component,\n        args: [{ selector: 'kles-form-textheaderfilter', template: `\r\n    <div mat-sort-header [disabled]=\"!field.sortable\"><span>{{ field.label | translate}}</span></div>\r\n    <mat-form-field [formGroup]=\"group\" class=\"form-element\">\r\n        @if (field.autocomplete) {\r\n            <input matInput matTooltip=\"{{field.tooltip}}\" [attr.id]=\"field.id\" (click)=\"stopPropagation($event)\" [ngClass]=\"field.ngClass\" [formControlName]=\"field.name\" [placeholder]=\"field.placeholder | translate\" [type]=\"field.inputType\"\r\n            [matAutocomplete]=\"auto\">\r\n\r\n            <mat-autocomplete #auto=\"matAutocomplete\">\r\n                @for (option of filteredOption | async; track option) {\r\n                    <mat-option [value]=\"option\">{{option}}</mat-option>\r\n                }\r\n            </mat-autocomplete>\r\n        }\r\n        @else {\r\n            <input matInput matTooltip=\"{{field.tooltip}}\" [attr.id]=\"field.id\" (click)=\"stopPropagation($event)\" [ngClass]=\"field.ngClass\" [formControlName]=\"field.name\" [placeholder]=\"field.placeholder | translate\" [type]=\"field.inputType\">\r\n        }\r\n\r\n        <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"group.controls[field.name].reset(''); stopPropagation($event)\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n\r\n        @if (isPending()) {\r\n            <mat-spinner matSuffix mode=\"indeterminate\" diameter=\"17\"></mat-spinner>\r\n        }\r\n\r\n        @for (validation of field.validations; track validation.name) {\r\n            <ng-container ngProjectAs=\"mat-error\">\r\n                @if (group.get(field.name).hasError(validation.name)) {\r\n                    <mat-error>{{validation.message | translate}}</mat-error>\r\n                }\r\n            </ng-container>\r\n        }\r\n        @for (validation of field.asyncValidations; track validation.name) {\r\n            <ng-container ngProjectAs=\"mat-error\">\r\n                @if (group.get(field.name).hasError(validation.name)) {\r\n                    <mat-error>{{validation.message | translate}}</mat-error>\r\n                }\r\n            </ng-container>\r\n        }\r\n    </mat-form-field>\r\n    `, styles: [\"mat-form-field{width:100%}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesFormTextHeaderFilterComponent, { className: \"KlesFormTextHeaderFilterComponent\", filePath: \"lib\\\\component\\\\header\\\\textheaderfilter.component.ts\", lineNumber: 52 }); })();","originalLength":22109,"removedExports":[],"renderedExports":["KlesFormTextHeaderFilterComponent"],"renderedLength":11558},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\header\\dynamic-headerfilter.component.mjs":{"code":"function KlesFormDynamicHeaderFilterComponent_Conditional_4_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function KlesFormDynamicHeaderFilterComponent_Conditional_4_Conditional_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r2.group.controls[ctx_r2.field.name].reset()); });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n} }\nfunction KlesFormDynamicHeaderFilterComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function KlesFormDynamicHeaderFilterComponent_Conditional_4_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.stopPropagation($event)); });\n    i0.ɵɵelementContainer(1, 3);\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtemplate(3, KlesFormDynamicHeaderFilterComponent_Conditional_4_Conditional_3_Template, 3, 0, \"button\", 5);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"component\", ctx_r0.field.filterComponent)(\"group\", ctx_r0.group)(\"field\", ctx_r0.filterField);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(3, ctx_r0.field.filterClearable && ctx_r0.group.get(ctx_r0.field.name).value ? 3 : -1);\n} }\nclass KlesFormDynamicHeaderFilterComponent extends KlesFieldAbstract {\n    ngOnInit() {\n        super.ngOnInit();\n        this.filterField = Object.assign({}, this.field);\n        delete this.filterField['label'];\n    }\n    stopPropagation(event) {\n        event.stopPropagation();\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesFormDynamicHeaderFilterComponent_BaseFactory; return function KlesFormDynamicHeaderFilterComponent_Factory(t) { return (ɵKlesFormDynamicHeaderFilterComponent_BaseFactory || (ɵKlesFormDynamicHeaderFilterComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesFormDynamicHeaderFilterComponent)))(t || KlesFormDynamicHeaderFilterComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesFormDynamicHeaderFilterComponent, selectors: [[\"kles-form-textheaderfilter\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [[\"mat-sort-header\", \"\", 3, \"disabled\"], [\"style\", \"display: inline-flex;\"], [2, \"display\", \"inline-flex\", 3, \"click\"], [\"klesComponentHeader\", \"\", 3, \"component\", \"group\", \"field\"], [2, \"padding-top\", \"10px\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"type\", \"button\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"type\", \"button\", 3, \"click\"]], template: function KlesFormDynamicHeaderFilterComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n            i0.ɵɵtext(2);\n            i0.ɵɵpipe(3, \"translate\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(4, KlesFormDynamicHeaderFilterComponent_Conditional_4_Template, 4, 4, \"div\", 1);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"disabled\", !ctx.field.sortable);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 3, ctx.field.label));\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(4, ctx.field.filterComponent ? 4 : -1);\n        } }, dependencies: [i1.MatButton, i1.MatIconButton, i2.MatIcon, i11.MatSortHeader, KlesComponentHeaderDirective, i1$1.TranslatePipe], styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}mat-icon[_ngcontent-%COMP%]{font-size:16px;height:16px;width:16px}.mat-mdc-icon-button[_ngcontent-%COMP%]{padding-bottom:4px;min-width:0;width:22px;height:22px;flex-shrink:0;line-height:1;border-radius:50%}.mat-sort-header-container[_ngcontent-%COMP%]{display:flex;justify-content:center}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesFormDynamicHeaderFilterComponent, [{\n        type: Component,\n        args: [{ selector: 'kles-form-textheaderfilter', template: `\r\n    <div mat-sort-header [disabled]=\"!field.sortable\"><span>{{ field.label | translate}}</span></div>\r\n    @if (field.filterComponent) {\r\n        <div (click)=\"stopPropagation($event)\" style=\"display: inline-flex;\">\r\n            <ng-container klesComponentHeader [component]=\"field.filterComponent\" [group]=\"group\" [field]=\"filterField\" >\r\n            </ng-container>\r\n            <span style=\"padding-top: 10px;\">\r\n                @if (field.filterClearable && group.get(field.name).value) {\r\n                    <button mat-button mat-icon-button aria-label=\"Clear\" type=\"button\"\r\n                        (click)=\"group.controls[field.name].reset();\">\r\n                        <mat-icon>close</mat-icon>\r\n                    </button>\r\n                }\r\n            </span>\r\n    </div>\r\n    }\r\n    `, styles: [\"mat-form-field{width:100%}mat-icon{font-size:16px;height:16px;width:16px}.mat-mdc-icon-button{padding-bottom:4px;min-width:0;width:22px;height:22px;flex-shrink:0;line-height:1;border-radius:50%}.mat-sort-header-container{display:flex;justify-content:center}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesFormDynamicHeaderFilterComponent, { className: \"KlesFormDynamicHeaderFilterComponent\", filePath: \"lib\\\\component\\\\header\\\\dynamic-headerfilter.component.ts\", lineNumber: 30 }); })();","originalLength":10067,"removedExports":[],"renderedExports":["KlesFormDynamicHeaderFilterComponent"],"renderedLength":5527},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\mat-treetable-datasource.mjs":{"code":"class MatTreetableData extends MatTableDataSource {\n    constructor() {\n        super(...arguments);\n        this._compareFn = new Intl.Collator('pl', { sensitivity: 'base', numeric: true }).compare;\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return (this.sortChildrends(null, sort, data)); /** parent = null because first element has no parent */\n        };\n        this.deptDataAccessor = (data, sortHeaderId) => {\n            return 0;\n        };\n    }\n    sortChildrends(parent, sort, data) {\n        return data.filter(line => parent === this.parentDataAccessor(line, sort.active))\n            .sort((a, b) => {\n            const valueA = this.sortingDataAccessor(a, sort.active);\n            const valueB = this.sortingDataAccessor(b, sort.active);\n            const comparatorResult = this._compareFn(valueA, valueB);\n            return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        })\n            .flatMap(children => {\n            return [children].concat(this.sortChildrends(children, sort, data));\n        });\n    }\n}","originalLength":5527,"removedExports":[],"renderedExports":["MatTreetableData"],"renderedLength":1231},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\tree.service.mjs":{"code":"class TreeService {\n    /**\n     * Traverse a tree data structure and applies the provided @param f function\n     * to all nodes\n     * @param root the tree to be traversed\n     * @param f the function to be applied to all nodes\n     * N.B. this function modifies the existing tree\n     */\n    traverse(root, f) {\n        this._traverse(root, (node) => {\n            f(node);\n            return true;\n        });\n    }\n    /**\n     * Search a tree for a node with the provided @param id\n     * @param root the tree to be searched\n     * @param id the id of the node to be retrieved\n     */\n    searchById(root, id) {\n        let matchingNode;\n        const pathToRoot = {};\n        this._traverse(root, (node) => {\n            node.children?.forEach(child => {\n                pathToRoot[child._id] = node;\n            });\n            if (node._id === id) {\n                matchingNode = node;\n            }\n            return node._id !== id;\n        });\n        return matchingNode ? O.some({\n            _id: matchingNode._id,\n            value: matchingNode.value,\n            children: matchingNode.children,\n            pathToRoot: this.buildPath(id, pathToRoot)\n        }) : O.none;\n    }\n    getById(root, id) {\n        let matchingNode;\n        this._traverse(root, (node) => {\n            if (node._id === id) {\n                matchingNode = node;\n            }\n            return node._id !== id;\n        });\n        return matchingNode;\n    }\n    /**\n     * Internal function that can be used to traverse or search the tree\n     * @param root the tree to be scanned\n     * @param f an optional function to be applied to all nodes\n     */\n    _traverse(root, f) {\n        if (!f(root)) {\n            return;\n        }\n        root.children?.forEach(c => this._traverse(c, f));\n    }\n    /**\n     * Given a @param root tree and a @param node node, calculate the\n     * depth of the node in the tree\n     * @param root the tree\n     * @param node the node we want to calculate the depth of\n     */\n    getNodeDepth(root, node) {\n        return pipe(this.searchById(root, node._id), O.fold(() => -1, n => n.pathToRoot.length));\n    }\n    /**\n     * Flatten a @param root tree into a list of its nodes\n     * @param root the tree to be flattened\n     */\n    flatten(root) {\n        const result = [cloneDeep(root)];\n        for (const node of result) {\n            if (node.children) {\n                result.splice(result.indexOf(node) + 1, 0, ...node.children);\n            }\n        }\n        return result;\n    }\n    /**\n     * Internal function used to build the pathToRoot of a node in a tree\n     * @param id the id of the node\n     * @param pathMap the pathMap returned by searchById\n     */\n    buildPath(id, pathMap) {\n        const pathToRoot = [];\n        let key = id;\n        while (key) {\n            if (pathMap[key]) {\n                pathToRoot.push(pathMap[key]);\n                key = pathMap[key]._id;\n            }\n            else {\n                key = null;\n            }\n        }\n        return pathToRoot;\n    }\n    static { this.ɵfac = function TreeService_Factory(t) { return new (t || TreeService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeService, factory: TreeService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":12934,"removedExports":[],"renderedExports":["TreeService"],"renderedLength":3501},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\converter.service.mjs":{"code":"class ConverterService {\n    constructor(treeService) {\n        this.treeService = treeService;\n    }\n    /**\n     * Clone a Node<T> object and convert it to a SearchableNode<T>\n     * @param tree the node to be converted\n     */\n    toSearchableTree(tree) {\n        const treeClone = cloneDeep(tree);\n        this.treeService.traverse(treeClone, (node) => {\n            node._id = node._id ? node._id : v4();\n        });\n        return treeClone;\n    }\n    /**\n     * Clone a SearchableNode<T> object and convert it to a TreeTableNode<T>\n     * @param tree the node to be converted\n     */\n    toTreeTableTree(tree) {\n        const treeClone = cloneDeep(tree);\n        this.treeService.traverse(treeClone, (node) => {\n            const root = this.treeService.searchById(treeClone, node._id);\n            if (O.isSome(root) && root.value.pathToRoot.length > 0) {\n                node.parentId = root.value.pathToRoot[0]._id;\n            }\n            node.depth = this.treeService.getNodeDepth(treeClone, node);\n            node.isExpanded = false;\n            node.isVisible = node.depth === 0;\n            node.childrenCounter = node.childrenCounter || ~~node.children?.length;\n            node.isBusy = node.isBusy || false;\n        });\n        return treeClone;\n    }\n    static { this.ɵfac = function ConverterService_Factory(t) { return new (t || ConverterService)(i0.ɵɵinject(TreeService)); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConverterService, factory: ConverterService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConverterService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], () => [{ type: TreeService }], null); })();","originalLength":6821,"removedExports":[],"renderedExports":["ConverterService"],"renderedLength":1798},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\pipe\\rowtree.pipe.mjs":{"code":"class RowTreePipe extends RowPipe {\n    transform(row) {\n        return {\n            'row-odd': row.value._status.depth % 2 !== 0,\n            ...super.transform(row)\n        };\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵRowTreePipe_BaseFactory; return function RowTreePipe_Factory(t) { return (ɵRowTreePipe_BaseFactory || (ɵRowTreePipe_BaseFactory = i0.ɵɵgetInheritedFactory(RowTreePipe)))(t || RowTreePipe); }; })(); }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"rowTreePipe\", type: RowTreePipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowTreePipe, [{\n        type: Pipe,\n        args: [{\n                name: 'rowTreePipe',\n                pure: false\n            }]\n    }], null, null); })();","originalLength":2331,"removedExports":[],"renderedExports":["RowTreePipe"],"renderedLength":796},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\abstracttreetable.service.mjs":{"code":"class AbstractKlesTreeTableService extends AbstractKlesTableService {\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵAbstractKlesTreeTableService_BaseFactory; return function AbstractKlesTreeTableService_Factory(t) { return (ɵAbstractKlesTreeTableService_BaseFactory || (ɵAbstractKlesTreeTableService_BaseFactory = i0.ɵɵgetInheritedFactory(AbstractKlesTreeTableService)))(t || AbstractKlesTreeTableService); }; })(); }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AbstractKlesTreeTableService, factory: AbstractKlesTreeTableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractKlesTreeTableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":2994,"removedExports":[],"renderedExports":["AbstractKlesTreeTableService"],"renderedLength":830},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\treetable\\treetable.component.mjs":{"code":"const _c0$1 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesTreetableComponent_ng_container_3_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 12)(1, \"div\", 13);\n    i0.ɵɵelementContainer(2, 14);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r7.class);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r7.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c0$1, ctx_r8.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r7.headerCell)(\"group\", ctx_r8.formHeader);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 17);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 18);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    const index_r16 = ctx.dataIndex;\n    const column_r7 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r14.getCellStyle(row_r15, column_r7));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r7));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r7, index_r16))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r16))(\"row\", row_r15)(\"column\", column_r7);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_ng_container_0_Template, 6, 14, \"ng-container\", 16);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 17);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 18);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    const index_r20 = ctx.index;\n    const column_r7 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r18.getCellStyle(row_r19, column_r7));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r7));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r7, index_r20))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r20))(\"row\", row_r19)(\"column\", column_r7);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_ng_container_0_Template, 6, 14, \"ng-container\", 16);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 14);\n} if (rf & 2) {\n    const column_r7 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r22 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r7.footerCell)(\"group\", ctx_r22.formFooter);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtemplate(1, KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Conditional_1_Template, 1, 2, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r7 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r13.getFooterStyle(column_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r7.footerCell ? 1 : -1);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_Template, 1, 0, \"ng-container\")(2, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_Template, 1, 0)(3, KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Template, 2, 3, \"td\", 15);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r9.multiTemplate ? 1 : 2);\n} }\nfunction KlesTreetableComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 10);\n    i0.ɵɵtemplate(1, KlesTreetableComponent_ng_container_3_th_1_Template, 3, 9, \"th\", 11)(2, KlesTreetableComponent_ng_container_3_Conditional_2_Template, 4, 1, \"div\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r7.columnDef)(\"sticky\", column_r7.sticky || false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(2, column_r7.visible ? 2 : -1);\n} }\nfunction KlesTreetableComponent_Conditional_4_ng_container_0_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 17);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 14);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const index_r29 = ctx.dataIndex;\n    const cell_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0$1, ctx_r27.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 5, cell_r26.colspan, ctx_r27.displayedColumns().length))(\"rowspan\", cell_r26.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r26)(\"group\", i0.ɵɵpipeBind1(3, 8, index_r29));\n} }\nfunction KlesTreetableComponent_Conditional_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, KlesTreetableComponent_Conditional_4_ng_container_0_td_1_Template, 4, 12, \"td\", 21);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r26.name);\n} }\nfunction KlesTreetableComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_Conditional_4_ng_container_0_Template, 2, 1, \"ng-container\", 20);\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.templateUnfold.cells);\n} }\nfunction KlesTreetableComponent_tr_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 22);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 26);\n} if (rf & 2) {\n    const row_r31 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r34 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r34.dragDropRowsOptions == null ? null : ctx_r34.dragDropRowsOptions.dragPreview == null ? null : ctx_r34.dragDropRowsOptions.dragPreview.component)(\"value\", row_r31);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_tr_6_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 24);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 26);\n} if (rf & 2) {\n    const row_r31 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r36 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r36.dragDropRowsOptions == null ? null : ctx_r36.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r36.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r31);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_tr_6_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 25);\n} }\nfunction KlesTreetableComponent_tr_6_Template(rf, ctx) { if (rf & 1) {\n    const _r39 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 23);\n    i0.ɵɵlistener(\"click\", function KlesTreetableComponent_tr_6_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r39); const row_r31 = restoredCtx.$implicit; const ctx_r38 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r38.onClick(row_r31)); });\n    i0.ɵɵpipe(1, \"rowTreePipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesTreetableComponent_tr_6_Conditional_3_Template, 1, 1, null, 24)(4, KlesTreetableComponent_tr_6_Conditional_4_Template, 1, 0, null, 25);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r31 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"cdk-visually-hidden\", !row_r31.value._status.isVisible);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, row_r31))(\"@rowsAnimation\", undefined)(\"cdkDragData\", row_r31)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 10, row_r31));\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r3.dragDropRowsOptions == null ? null : ctx_r3.dragDropRowsOptions.dragPreview == null ? null : ctx_r3.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r3.dragDropRowsOptions == null ? null : ctx_r3.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r3.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesTreetableComponent_Conditional_7_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 6);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesTreetableComponent_Conditional_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_Conditional_7_tr_0_Template, 1, 1, \"tr\", 27);\n} if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r4.getTemplateColumns(ctx_r4.templateUnfold))(\"matRowDefWhen\", ctx_r4.tableService.unfoldPredicate);\n} }\nfunction KlesTreetableComponent_Conditional_8_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 29);\n} }\nfunction KlesTreetableComponent_Conditional_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesTreetableComponent_Conditional_8_tr_1_Template, 1, 0, \"tr\", 28);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r5.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesTreetableComponent extends KlesTableComponent {\n    constructor(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService, tableService) {\n        super(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, tableService);\n        this.translate = translate;\n        this.adapter = adapter;\n        this.formBuilder = formBuilder;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.treeService = treeService;\n        this.converterService = converterService;\n        this.tableService = tableService;\n        this._onLineOpen = new EventEmitter();\n        this._onLineClose = new EventEmitter();\n        this.dataSource = new MatTreetableData([]);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n    }\n    updateData(lines) {\n        this.updateTree(lines);\n        // this.displayedColumns = this.columns.filter(e => e.visible).map(c => c.columnDef);\n        this.setItems();\n    }\n    updateTree(data) {\n        this._lines = (Array.isArray(data) ? data : [data]).map((line => {\n            return { _id: uuid.v4(), ...line };\n        }));\n        this.searchableTree = this._lines.map(t => this.converterService.toSearchableTree(t));\n    }\n    initFormArray() {\n        const treeTableTree = this.searchableTree.map(st => this.converterService.toTreeTableTree(st));\n        this.lineFields = [];\n        const array = this.formBuilder.array(treeTableTree.flatMap(node => {\n            return this.createFormNode(node);\n        }));\n        return array;\n    }\n    createFormNode(node) {\n        let children = [];\n        const parent = this.addFormLine(node);\n        if (node.children) {\n            children = node.children.flatMap(child => {\n                const childControls = this.createFormNode(child);\n                childControls.filter(control => control.value._status.depth === parent.value._status.depth + 1)\n                    .forEach((control) => {\n                    control.valueChanges\n                        .pipe(takeUntil(this._onDestroy))\n                        .subscribe((value) => {\n                        // delete value._id;\n                        // delete value._status;\n                        const v = { ...value };\n                        delete v._id;\n                        delete v._status;\n                        const data = {\n                            value: v,\n                            ...(value._status.children && { children: value._status.children }),\n                            childrenCounter: ~~value._status?.children?.length,\n                            depth: value._status.depth,\n                            isExpanded: value._status.isExpanded,\n                            isVisible: value._status.isVisible,\n                            _id: value._id\n                        };\n                        parent.controls._status\n                            .patchValue({\n                            children: parent.controls._status.value.children.map((c => {\n                                if (c._id === data._id) {\n                                    return data;\n                                }\n                                return c;\n                            }))\n                        }, { emitEvent: false });\n                    });\n                });\n                return childControls;\n            });\n        }\n        return [parent, ...children];\n    }\n    addFormLine(row) {\n        const group = this.formBuilder.group({});\n        const idControl = this.formBuilder.control(row._id);\n        const unfoldControl = this.fb.control(row._unfold || false);\n        group.addControl('_id', idControl);\n        group.addControl('_unfold', unfoldControl);\n        const paginator = this.columns().find(c => c.paginator && c.canExpand);\n        const statusControl = this.formBuilder.group({\n            parentId: row.parentId,\n            isVisible: row.isVisible,\n            isExpanded: row.isExpanded,\n            depth: row.depth,\n            children: [row.children],\n            childrenCounter: row.childrenCounter || ~~row.children?.length,\n            ...(paginator && {\n                paginator: this.formBuilder.group({\n                    pageIndex: 0,\n                    pageSize: paginator.paginatorOption?.pageSize || 5,\n                    length: row.childrenCounter || ~~row.children?.length || 0\n                })\n            })\n        });\n        group.addControl('_status', statusControl);\n        const rowValue = row?.value;\n        const listField = [];\n        this.columns().forEach(column => {\n            column.cell.name = column.columnDef;\n            const colCell = _.cloneDeep(column.cell);\n            const control = this.buildControlField(colCell, rowValue[colCell.name]);\n            listField.push({ ...column.cell });\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            })\n            // distinctUntilChanged((prev, curr) => {\n            //     if (Array.isArray(prev) && Array.isArray(curr)) {\n            //         if (column.cell?.property) {\n            //             return prev.length === curr.length\n            //                 && prev.every((value, index) => value[column.cell.property] === curr[index][column.cell.property]);\n            //         } else {\n            //             return prev.length === curr.length && prev.every((value, index) => value === curr[index]);\n            //         }\n            //     } else {\n            //         if (column.cell?.property && prev && curr) {\n            //             return prev[column.cell.property] === curr[column.cell.property];\n            //         }\n            //     }\n            //     return prev === curr;\n            // })\n            ).subscribe(e => {\n                const group = control.parent;\n                this.tableService.onCellChange({ column, row, group, response: e.response });\n                this._onChangeCell.emit({ column, row, group, response: e.response });\n            });\n            control.statusChanges.subscribe(status => {\n                const group = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group, status });\n                this._onStatusCellChange.emit({ cell: control, group, status });\n            });\n            group.addControl(column.cell.name, control);\n        });\n        this.lineFields.push(listField);\n        group.setValidators(this.lineValidations);\n        group.setAsyncValidators(this.lineAsyncValidations);\n        group.valueChanges.subscribe(value => {\n            this.tableService.onLineChange({ group, row, value });\n        });\n        group.statusChanges.subscribe(status => {\n            this.tableService.onStatusLineChange({ group, row, status });\n            this._onStatusLineChange.emit({ group, row, status });\n        });\n        return group;\n    }\n    setDataSourceAttributes() {\n        super.setDataSourceAttributes();\n        this.dataSource.table = this;\n        this.dataSource.deptDataAccessor = this.tableService.getDepthDataAccessor;\n        this.dataSource.parentDataAccessor = this.tableService.getParentDataAccessor;\n    }\n    static { this.ɵfac = function KlesTreetableComponent_Factory(t) { return new (t || KlesTreetableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(TreeService), i0.ɵɵdirectiveInject(ConverterService), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesTreetableComponent, selectors: [[\"app-kles-dynamictreetable\"]], outputs: { _onLineOpen: \"_onLineOpen\", _onLineClose: \"_onLineClose\" }, features: [i0.ɵɵProvidersFeature([\n                { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                {\n                    provide: DateAdapter,\n                    useClass: MomentDateAdapter,\n                    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                },\n                { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n            ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 12, vars: 22, consts: [[\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"dataSource\", \"ngClass\", \"trackBy\", \"cdkDropListData\", \"cdkDropListDisabled\", \"multiTemplateDataRows\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListDropped\"], [3, \"cdkColumnDef\", \"sticky\", 4, \"ngFor\", \"ngForOf\"], [3, \"matColumnDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"cdk-visually-hidden\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-row\", \"\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\"], [\"paginator\", \"\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicTreeCell\", \"\", 3, \"field\", \"group\", \"row\", \"column\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesTreetableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesTreetableComponent_Template_table_cdkDropListDropped_1_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(2, \"elevationPipe\");\n            i0.ɵɵtemplate(3, KlesTreetableComponent_ng_container_3_Template, 3, 3, \"ng-container\", 2)(4, KlesTreetableComponent_Conditional_4_Template, 1, 1, \"ng-container\", 3)(5, KlesTreetableComponent_tr_5_Template, 1, 0, \"tr\", 4)(6, KlesTreetableComponent_tr_6_Template, 5, 12, \"tr\", 5)(7, KlesTreetableComponent_Conditional_7_Template, 1, 2, \"tr\", 6)(8, KlesTreetableComponent_Conditional_8_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"div\", 7);\n            i0.ɵɵelement(10, \"mat-paginator\", 8, 9);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(2, 20, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.columns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(4, ctx.templateUnfold && ctx.multiTemplate ? 4 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(7, ctx.multiTemplate && ctx.templateUnfold ? 7 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(8, ctx.showFooter ? 8 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i8.NgForOf, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicTreeCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}.mat-mdc-cell[_ngcontent-%COMP%]{text-align:left}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:last-of-type{padding-right:0!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}.row-odd[_ngcontent-%COMP%]{background:var(--accent-lighter-color)}  .mat-sort-header-container{display:flex}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTreetableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-dynamictreetable', animations: [rowsAnimation], providers: [\n                    { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                    {\n                        provide: DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    },\n                    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n                ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n    <table mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n        formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n        (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n        [multiTemplateDataRows]=\\\"multiTemplate\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n        [cdkDropListSortPredicate]=\\\"sortPredicate()\\\">\\r\\n        <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\"\\r\\n            [sticky]=\\\"column.sticky || false\\\">\\r\\n\\r\\n            <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n                [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                <div style=\\\"display: inline-flex;\\\">\\r\\n                    <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                    </ng-container>\\r\\n                </div>\\r\\n            </th>\\r\\n\\r\\n            @if (column.visible) {\\r\\n                <div>\\r\\n                    @if (multiTemplate) {\\r\\n                        <ng-container *cdkCellDef=\\\"let row;let index = dataIndex;\\\">\\r\\n                            <td mat-cell [style]=\\\"getCellStyle(row,column)\\\" [ngClass]=\\\"column | cellPipe\\\">\\r\\n    \\r\\n                                <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        </ng-container>\\r\\n                    }\\r\\n                    @else {\\r\\n                        <ng-container *cdkCellDef=\\\"let row;let index = index;\\\">\\r\\n                            <td mat-cell [style]=\\\"getCellStyle(row,column)\\\" [ngClass]=\\\"column | cellPipe\\\">\\r\\n    \\r\\n                                <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n    \\r\\n                        </ng-container>\\r\\n                    }\\r\\n    \\r\\n                    <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                        @if (column.footerCell) {\\r\\n                            <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                            </ng-container>\\r\\n                        }\\r\\n                    </td>\\r\\n                </div>\\r\\n            }\\r\\n        </ng-container>\\r\\n\\r\\n        @if (templateUnfold && multiTemplate) {\\r\\n            <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n                <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                    [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                    [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                    <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\">\\r\\n                    </ng-container>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n        }\\r\\n\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n\\r\\n        <tr mat-row [ngClass]=\\\"row | rowTreePipe\\\" [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\"\\r\\n            (click)=\\\"onClick(row)\\\" cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\"\\r\\n            [class.cdk-visually-hidden]=\\\"!row.value._status.isVisible\\\">\\r\\n\\r\\n\\r\\n            @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                    <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                    </ng-container>\\r\\n                </ng-template>\\r\\n            }\\r\\n\\r\\n            @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                <ng-template cdkDragPlaceholder>\\r\\n                    <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\" [value]=\\\"row\\\">\\r\\n                    </ng-container>\\r\\n                </ng-template>\\r\\n            }\\r\\n        </tr>\\r\\n\\r\\n        @if (multiTemplate && templateUnfold) {\\r\\n            <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n            </tr>\\r\\n        }\\r\\n\\r\\n        @if (showFooter) {\\r\\n            <div>\\r\\n                <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                </tr>\\r\\n            </div>\\r\\n        }\\r\\n    </table>\\r\\n\\r\\n</form>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\">\\r\\n    </mat-paginator>\\r\\n</div>\", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-footer-cell{text-align:center}.mat-mdc-cell{text-align:left}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell:last-of-type,td.mat-mdc-cell:last-of-type,td.mat-mdc-footer-cell:last-of-type{padding-right:0!important}.value-cell{display:flex;align-items:left}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}.row-odd{background:var(--accent-lighter-color)}::ng-deep .mat-sort-header-container{display:flex}tr.mat-mdc-footer-row{font-weight:700}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: TreeService }, { type: ConverterService }, { type: AbstractKlesTreeTableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], { _onLineOpen: [{\n            type: Output\n        }], _onLineClose: [{\n            type: Output\n        }] }); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesTreetableComponent, { className: \"KlesTreetableComponent\", filePath: \"lib\\\\component\\\\treetable\\\\treetable.component.ts\", lineNumber: 40 }); })();","originalLength":79723,"removedExports":[],"renderedExports":["KlesTreetableComponent"],"renderedLength":40233},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\abstractlazytreetable.service.mjs":{"code":"class AbstractKlesLazyTreetableService extends AbstractKlesTreeTableService {\n}","originalLength":1680,"removedExports":[],"renderedExports":["AbstractKlesLazyTreetableService"],"renderedLength":79},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\component\\lazytreetable\\lazytreetable.component.mjs":{"code":"function KlesLazyTreetableComponent_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelement(1, \"mat-spinner\");\n    i0.ɵɵelementEnd();\n} }\nconst _c0 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesLazyTreetableComponent_ng_container_5_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15)(1, \"div\", 16);\n    i0.ɵɵelementContainer(2, 17);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r8.class);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r8.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r9.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r8.headerCell)(\"group\", ctx_r9.formHeader);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 20);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 21);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r16 = ctx.$implicit;\n    const index_r17 = ctx.dataIndex;\n    const column_r8 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r15.getCellStyle(row_r16, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r8, index_r17))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r17))(\"row\", row_r16)(\"column\", column_r8);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_ng_container_0_Template, 6, 14, \"ng-container\", 19);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 20);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 21);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r20 = ctx.$implicit;\n    const index_r21 = ctx.index;\n    const column_r8 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r19.getCellStyle(row_r20, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r8, index_r21))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r21))(\"row\", row_r20)(\"column\", column_r8);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_ng_container_0_Template, 6, 14, \"ng-container\", 19);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 17);\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r23 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r8.footerCell)(\"group\", ctx_r23.formFooter);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Conditional_1_Template, 1, 2, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r14.getFooterStyle(column_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r8.footerCell ? 1 : -1);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_Template, 1, 0, \"ng-container\")(2, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_Template, 1, 0)(3, KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Template, 2, 3, \"td\", 18);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r10.multiTemplate ? 1 : 2);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 13);\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_ng_container_5_th_1_Template, 3, 9, \"th\", 14)(2, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Template, 4, 1, \"div\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r8.columnDef)(\"sticky\", column_r8.sticky || false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(2, column_r8.visible ? 2 : -1);\n} }\nfunction KlesLazyTreetableComponent_Conditional_6_ng_container_0_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 20);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 25);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r29 = ctx.$implicit;\n    const index_r30 = ctx.dataIndex;\n    const cell_r27 = i0.ɵɵnextContext().$implicit;\n    const ctx_r28 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r28.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 6, cell_r27.colspan, ctx_r28.displayedColumns().length))(\"rowspan\", cell_r27.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r27)(\"group\", i0.ɵɵpipeBind1(3, 9, index_r30))(\"siblingFields\", ctx_r28.lineFields[row_r29.value._index]);\n} }\nfunction KlesLazyTreetableComponent_Conditional_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 5);\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_Conditional_6_ng_container_0_td_1_Template, 4, 13, \"td\", 24);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r27 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r27.name);\n} }\nfunction KlesLazyTreetableComponent_Conditional_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_Conditional_6_ng_container_0_Template, 2, 1, \"ng-container\", 23);\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.templateUnfold.cells);\n} }\nfunction KlesLazyTreetableComponent_tr_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 26);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 30);\n} if (rf & 2) {\n    const row_r32 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r35 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r35.dragDropRowsOptions == null ? null : ctx_r35.dragDropRowsOptions.dragPreview == null ? null : ctx_r35.dragDropRowsOptions.dragPreview.component)(\"value\", row_r32);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_tr_8_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 28);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 30);\n} if (rf & 2) {\n    const row_r32 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r37 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r37.dragDropRowsOptions == null ? null : ctx_r37.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r37.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r32);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_tr_8_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 29);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Template(rf, ctx) { if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 27);\n    i0.ɵɵlistener(\"click\", function KlesLazyTreetableComponent_tr_8_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r40); const row_r32 = restoredCtx.$implicit; const ctx_r39 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r39.onClick(row_r32)); });\n    i0.ɵɵpipe(1, \"rowTreePipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesLazyTreetableComponent_tr_8_Conditional_3_Template, 1, 1, null, 28)(4, KlesLazyTreetableComponent_tr_8_Conditional_4_Template, 1, 0, null, 29);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r32 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"cdk-visually-hidden\", !row_r32.value._status.isVisible);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, row_r32))(\"@rowsAnimation\", undefined)(\"cdkDragData\", row_r32)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 10, row_r32));\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPreview == null ? null : ctx_r4.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesLazyTreetableComponent_Conditional_9_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 8);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesLazyTreetableComponent_Conditional_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_Conditional_9_tr_0_Template, 1, 1, \"tr\", 31);\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r5.getTemplateColumns(ctx_r5.templateUnfold))(\"matRowDefWhen\", ctx_r5.tableService.unfoldPredicate);\n} }\nfunction KlesLazyTreetableComponent_Conditional_10_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 33);\n} }\nfunction KlesLazyTreetableComponent_Conditional_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_Conditional_10_tr_1_Template, 1, 0, \"tr\", 32);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r6.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesLazyTreetableComponent extends KlesTreetableComponent {\n    constructor(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService, tableService) {\n        super(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService, tableService);\n        this.translate = translate;\n        this.adapter = adapter;\n        this.formBuilder = formBuilder;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.treeService = treeService;\n        this.converterService = converterService;\n        this.tableService = tableService;\n        this.filteredValues$ = new BehaviorSubject({});\n    }\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n        merge(this.sort.sortChange, this.paginator.page, this.filteredValues$.pipe(debounceTime(500)))\n            .pipe(takeUntil(this._onDestroy), switchMap(() => {\n            return concat(of({ loading: true, value: { lines: [], totalCount: 0, footer: {}, header: {} } }), this.tableService.load(this.sort.active, this.sort.direction, this.paginator.pageIndex, this.paginator.pageSize, this.filteredValues$.getValue()).pipe(map(value => ({ loading: false, value })), catchError((err) => {\n                console.error(err);\n                return of({ loading: false, value: { lines: [], totalCount: 0, footer: {}, header: {} } });\n            })));\n        }))\n            .subscribe((response) => {\n            if (response.loading) {\n                this.loading = true;\n            }\n            else {\n                this.loading = false;\n                if (this.showFooter && response.value.footer) {\n                    this.formFooter.patchValue(response.value.footer);\n                }\n                if (response.value.header) {\n                    this.formHeader.patchValue(response.value.header, { emitEvent: false });\n                }\n                this.updateData(response.value.lines);\n                this.paginator.length = response.value.totalCount;\n            }\n            // this.ref.markForCheck();\n        });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    getLineFields(index, key) {\n        return this.lineFields[index].find(f => f.name === key);\n    }\n    createFormNode(node) {\n        let children = [];\n        const parent = this.addFormLine(node);\n        if (node.children) {\n            children = node.children.flatMap(child => {\n                const childControls = this.createFormNode(child);\n                childControls.filter(control => control.value._status.depth === parent.value._status.depth + 1)\n                    .forEach((control) => {\n                    control.valueChanges\n                        .pipe(takeUntil(this._onDestroy))\n                        .subscribe((value) => {\n                        const v = { ...value };\n                        delete v._id;\n                        delete v._status;\n                        const data = {\n                            value: v,\n                            ...(value._status.children && { children: value._status.children }),\n                            childrenCounter: value._status.childrenCounter || ~~value._status?.children?.length,\n                            depth: value._status.depth,\n                            isExpanded: value._status.isExpanded,\n                            isVisible: value._status.isVisible,\n                            isBusy: value._status.isBusy || false,\n                            _id: value._id,\n                        };\n                        parent.controls._status\n                            .patchValue({\n                            children: parent.controls._status.value.children\n                                .filter(c => c._id !== value._id)\n                                .concat(data)\n                        });\n                    });\n                });\n                return childControls;\n            });\n        }\n        return [parent, ...children];\n    }\n    addFormLine(row) {\n        const group = this.formBuilder.group({});\n        const idControl = this.formBuilder.control(row._id);\n        const unfoldControl = this.fb.control(row._unfold || false);\n        group.addControl('_id', idControl);\n        group.addControl('_unfold', unfoldControl);\n        const paginator = this.columns().find(c => c.paginator && c.canExpand);\n        const statusControl = this.formBuilder.group({\n            isVisible: row.isVisible,\n            isExpanded: row.isExpanded,\n            depth: row.depth,\n            childrenCounter: row.childrenCounter || ~~row.children?.length,\n            children: [row.children],\n            isBusy: false,\n            ...(paginator && {\n                paginator: this.formBuilder.group({\n                    pageIndex: 0,\n                    pageSize: paginator.paginatorOption?.pageSize || this.paginator?.pageSize || 5,\n                    length: 0\n                })\n            })\n        });\n        group.addControl('_status', statusControl);\n        merge(statusControl.controls.paginator?.valueChanges || of(), statusControl.controls.isExpanded.valueChanges)\n            .pipe(takeUntil(this._onDestroy), switchMap(() => {\n            if (statusControl.controls.isExpanded.value) {\n                return concat(of({ loading: true, value: { lines: [], totalCount: 0 } }), this.tableService.loadChild(group, this.sort.active, this.sort.direction, statusControl.controls.paginator?.value.pageIndex, statusControl.controls.paginator?.value.pageSize, this.filteredValues$.getValue()).pipe(map(value => ({ loading: false, value })), catchError((err) => {\n                    console.error(err);\n                    return of({ loading: false, value: { lines: [], totalCount: 0 } });\n                })));\n            }\n            return of({ loading: false, value: { lines: [], totalCount: 0 } });\n        })).subscribe(({ loading, value }) => {\n            if (!loading) {\n                this.tableService.deleteChildren(row._id);\n                if (value.lines.length) {\n                    value.lines.forEach(child => this.tableService.addChild(row._id, child));\n                }\n                statusControl.controls.paginator?.patchValue({ length: value.totalCount }, { emitEvent: false });\n            }\n            statusControl.patchValue({ isBusy: loading }, { emitEvent: false });\n            this.ref.markForCheck();\n        });\n        const rowValue = row.value;\n        const listField = [];\n        this.columns().forEach(column => {\n            column.cell.name = column.columnDef;\n            const colCell = _.cloneDeep(column.cell);\n            const control = this.buildControlField(colCell, rowValue[colCell.name]);\n            listField.push(colCell);\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            })).subscribe(e => {\n                const group = control.parent;\n                this.tableService.onCellChange({ column, row, group, response: e.response });\n                this._onChangeCell.emit({ column, row, group, response: e.response });\n            });\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\n                const group = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group, status });\n                this._onStatusCellChange.emit({ cell: control, group, status });\n            });\n            group.addControl(column.cell.name, control);\n        });\n        this.lineFields.push(listField);\n        group.setValidators(this.lineValidations);\n        group.setAsyncValidators(this.lineAsyncValidations);\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(value => {\n            this.tableService.onLineChange({ group, row, value });\n        });\n        group.statusChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(status => {\n            this.tableService.onStatusLineChange({ group, row, status });\n            this._onStatusLineChange.emit({ group, row, status });\n        });\n        return group;\n    }\n    setDataSourceAttributes() {\n        if (this.sort) {\n            if (this.paginator && !this.hidePaginator) {\n                this.sort.sortChange.subscribe(() => {\n                    this.paginator.pageIndex = 0;\n                });\n            }\n            if (\n            // !this.sortDefault && \n            this.sortConfig) {\n                this.sort.active = this.sortConfig.active;\n                this.sort.direction = this.sortConfig.direction;\n                this.sort.sortChange.emit(this.sortConfig);\n                // this.sortDefault = !this.sortDefault;\n            }\n        }\n        this.tableService.setTable(this);\n        this.dataSource.table = this;\n        this.dataSource.deptDataAccessor = this.tableService.getDepthDataAccessor;\n        this.dataSource.parentDataAccessor = this.tableService.getParentDataAccessor;\n    }\n    static { this.ɵfac = function KlesLazyTreetableComponent_Factory(t) { return new (t || KlesLazyTreetableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(TreeService), i0.ɵɵdirectiveInject(ConverterService), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesLazyTreetableComponent, selectors: [[\"app-kles-lazytreetable\"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 14, vars: 23, consts: [[2, \"position\", \"relative\"], [\"class\", \"loading\"], [\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"dataSource\", \"ngClass\", \"trackBy\", \"multiTemplateDataRows\", \"cdkDropListData\", \"cdkDropListDisabled\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListDropped\"], [3, \"cdkColumnDef\", \"sticky\", 4, \"ngFor\", \"ngForOf\"], [3, \"matColumnDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdk-visually-hidden\", \"cdkDragData\", \"cdkDragDisabled\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-row\", \"\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"], [\"paginator\", \"\"], [1, \"loading\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicTreeCell\", \"\", 3, \"field\", \"group\", \"row\", \"column\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesLazyTreetableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, KlesLazyTreetableComponent_Conditional_1_Template, 2, 0, \"div\", 1);\n            i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesLazyTreetableComponent_Template_table_cdkDropListDropped_3_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(4, \"elevationPipe\");\n            i0.ɵɵtemplate(5, KlesLazyTreetableComponent_ng_container_5_Template, 3, 3, \"ng-container\", 4)(6, KlesLazyTreetableComponent_Conditional_6_Template, 1, 1, \"ng-container\", 5)(7, KlesLazyTreetableComponent_tr_7_Template, 1, 0, \"tr\", 6)(8, KlesLazyTreetableComponent_tr_8_Template, 5, 12, \"tr\", 7)(9, KlesLazyTreetableComponent_Conditional_9_Template, 1, 2, \"tr\", 8)(10, KlesLazyTreetableComponent_Conditional_10_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(11, \"div\", 9)(12, \"mat-paginator\", 10, 11);\n            i0.ɵɵlistener(\"page\", function KlesLazyTreetableComponent_Template_mat_paginator_page_12_listener($event) { return ctx.pageChanged($event); });\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(1, ctx.loading ? 1 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(4, 21, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.columns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(6, ctx.templateUnfold && ctx.multiTemplate ? 6 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(9, ctx.multiTemplate && ctx.templateUnfold ? 9 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(10, ctx.showFooter ? 10 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i8.NgForOf, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i3.MatProgressSpinner, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicTreeCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}.mat-mdc-cell[_ngcontent-%COMP%]{text-align:left}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:last-of-type{padding-right:0!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.size-16[_ngcontent-%COMP%]{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}  .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}.loading[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}.row-odd[_ngcontent-%COMP%]{background:var(--accent-lighter-color)}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesLazyTreetableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-lazytreetable', animations: [rowsAnimation], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div style=\\\"position: relative;\\\">\\r\\n    @if (loading) {\\r\\n        <div class=\\\"loading\\\">\\r\\n            <mat-spinner></mat-spinner>\\r\\n        </div>\\r\\n    }\\r\\n\\r\\n    <form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n            formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n            [multiTemplateDataRows]=\\\"multiTemplate\\\" (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\"\\r\\n            [cdkDropListDisabled]=\\\"!dragDropRows\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n            [cdkDropListSortPredicate]=\\\"sortPredicate()\\\">\\r\\n            <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n                    [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                    <div style=\\\"display: inline-flex;\\\">\\r\\n                        <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                        </ng-container>\\r\\n                    </div>\\r\\n                </th>\\r\\n                @if (column.visible) {\\r\\n                    <div>\\r\\n                        @if (multiTemplate) {\\r\\n                            <ng-container *cdkCellDef=\\\"let row;let index = dataIndex;\\\">\\r\\n                                <td mat-cell [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                    [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                    <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                        [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                    </ng-container>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                        }\\r\\n                        @else {\\r\\n                            <ng-container *cdkCellDef=\\\"let row;let index = index;\\\">\\r\\n                                <td mat-cell [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                    [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                    <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                        [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                    </ng-container>\\r\\n                                </td>\\r\\n    \\r\\n                            </ng-container>\\r\\n                        }\\r\\n    \\r\\n                        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                            @if (column.footerCell) {\\r\\n                                <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                                </ng-container>\\r\\n                            }\\r\\n                        </td>\\r\\n                    </div>\\r\\n                }\\r\\n\\r\\n            </ng-container>\\r\\n\\r\\n            @if (templateUnfold && multiTemplate) {\\r\\n                <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n                    <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                        [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\"\\r\\n                        [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                        <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n                            [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n                        </ng-container>\\r\\n                    </td>\\r\\n                </ng-container>\\r\\n            }\\r\\n\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n            <tr mat-row [ngClass]=\\\"row | rowTreePipe\\\" [@rowsAnimation]=\\\"\\\"\\r\\n                *matRowDef=\\\"let row; columns: displayedColumns();\\\"\\r\\n                [class.cdk-visually-hidden]=\\\"!row.value._status.isVisible\\\" (click)=\\\"onClick(row)\\\" cdkDrag\\r\\n                [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\">\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                    <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                    <ng-template cdkDragPlaceholder>\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\"\\r\\n                            [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n            </tr>\\r\\n\\r\\n            @if (multiTemplate && templateUnfold) {\\r\\n                <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n                </tr>\\r\\n            }\\r\\n\\r\\n            @if (showFooter) {\\r\\n                <div>\\r\\n                    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                    </tr>\\r\\n                </div>\\r\\n            }\\r\\n        </table>\\r\\n\\r\\n    </form>\\r\\n</div>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n        (page)=\\\"pageChanged($event)\\\">\\r\\n    </mat-paginator>\\r\\n</div>\", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-footer-cell{text-align:center}.mat-mdc-cell{text-align:left}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell:last-of-type,td.mat-mdc-cell:last-of-type,td.mat-mdc-footer-cell:last-of-type{padding-right:0!important}.value-cell{display:flex;align-items:left}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}::ng-deep .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row{font-weight:700}.loading{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}.row-odd{background:var(--accent-lighter-color)}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: TreeService }, { type: ConverterService }, { type: AbstractKlesLazyTreetableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesLazyTreetableComponent, { className: \"KlesLazyTreetableComponent\", filePath: \"lib\\\\component\\\\lazytreetable\\\\lazytreetable.component.ts\", lineNumber: 26 }); })();","originalLength":90054,"removedExports":[],"renderedExports":["KlesLazyTreetableComponent"],"renderedLength":43695},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\defaulttable.service.mjs":{"code":"class DefaultKlesTableService extends AbstractKlesTableService {\n    constructor() {\n        super(...arguments);\n        //Sorting\n        this.getSortingDataAccessor = (item, property) => {\n            if (!item.value) {\n                return item.value;\n            }\n            let value = item.value[property];\n            if (value) {\n                if (typeof value === 'string') {\n                    value = value.toLowerCase();\n                }\n                else if (typeof value === 'object') {\n                    if (value.key) {\n                        value = value.key;\n                    }\n                }\n            }\n            return value;\n        };\n        this.unfoldPredicate = (index, data) => {\n            return data.controls._unfold.value;\n        };\n    }\n    //Header\n    onHeaderChange(e) { }\n    onHeaderCellChange(e) { }\n    onStatusHeaderChange(e) { }\n    //Line\n    onCellChange(e) { }\n    onStatusCellChange(e) { }\n    onLineChange(e) {\n        if (this.table.multiTemplate) {\n            this.table.matTable.renderRows();\n        }\n    }\n    onStatusLineChange(e) { }\n    onClick(e) { }\n    //drag and drop\n    drop(e) { }\n    getSortPredicate(index, item) {\n        return true;\n    }\n    //Footer\n    onFooterChange(e) { }\n    onFooterCellChange(e) { }\n    //Paginator\n    onPageChange(e) { }\n    //Data\n    onDataLoaded() { }\n    //Cell Style\n    getCellStyle(row, column) { return ''; }\n    getFooterStyle(column) { return ''; }\n    /**Util Table */\n    //Manage Record\n    addRecord(record, index) {\n        const _id = record._id || uuid.v4();\n        delete record._id;\n        const newRecord = {\n            _id,\n            _index: typeof index === 'undefined' ? this.table._lines.length : index,\n            value: record\n        };\n        const group = this.table.addFormLine(newRecord);\n        if (typeof index !== 'undefined') {\n            this.table.getFormArray().controls.forEach((row) => {\n                if (row.value._index >= index) {\n                    row.patchValue({ _index: row.value._index + 1 }, { emitEvent: false });\n                }\n            });\n            this.table._lines.forEach((line) => {\n                if (line._index >= index) {\n                    line._index = line._index + 1;\n                }\n            });\n            this.table._lines.splice(index, 0, newRecord);\n            this.table.getFormArray().insert(index, group);\n        }\n        else {\n            this.table._lines.push(newRecord);\n            this.table.getFormArray().push(group);\n        }\n        this.updateDataSource();\n        return group;\n    }\n    deleteRecord(event) {\n        // console.log('Delete Record=', event);\n        event.forEach((e) => {\n            const id = e.controls['_id'].value;\n            const index = this.table.getFormArray().controls.findIndex(f => f.value._id === id);\n            this.table.getFormArray().removeAt(index);\n            this.table._lines = this.table._lines.filter(f => f._id !== id);\n        });\n        // console.log('List _lines=', this.table._lines);\n        this.updateDataSource();\n        this.table.selection.clear();\n    }\n    updateRecord(record, options) {\n        const updateForm = this.table.getFormArray().controls\n            .find((f) => f.controls._id.value === '' + record._id);\n        if (updateForm) {\n            updateForm.patchValue(record, options);\n            this.updateDataSource();\n            this.table.ref.detectChanges();\n        }\n    }\n    updateDataSource() {\n        this.table.dataSource.data = this.table.getFormArray().controls;\n        this.table.dataSource.filteredData = this.table.getFormArray().controls;\n    }\n    /**Setters */\n    setTable(table) {\n        this.table = table;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵDefaultKlesTableService_BaseFactory; return function DefaultKlesTableService_Factory(t) { return (ɵDefaultKlesTableService_BaseFactory || (ɵDefaultKlesTableService_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultKlesTableService)))(t || DefaultKlesTableService); }; })(); }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultKlesTableService, factory: DefaultKlesTableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultKlesTableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":17180,"removedExports":[],"renderedExports":["DefaultKlesTableService"],"renderedLength":4475},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selection\\selectiontable.service.mjs":{"code":"class KlesSelectionTableService {\n    constructor(column) {\n        this.columnSelect = column;\n    }\n    changeSelectionHeader(e) {\n        if (e.column.columnDef === this.columnSelect) {\n            const val = e.group.controls[this.columnSelect].value;\n            this.table.getFormArray().controls\n                .filter((e) => e.controls[this.columnSelect]?.enabled)\n                .forEach((e) => {\n                e.controls[this.columnSelect]?.patchValue(val);\n            });\n        }\n    }\n    changeSelectionLine(e) {\n        if (this.table) {\n            if (e.column.columnDef === this.columnSelect && e.row) {\n                if (this.table.dataSource.filteredData.includes(e.group)) {\n                    if (e.group.controls[e.column.columnDef].value) {\n                        if (!this.table.selection.isMultipleSelection()) {\n                            this.table.getFormArray().controls\n                                .filter((row) => row.value._id !== e.group.value._id)\n                                .forEach((row) => {\n                                row.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n                            });\n                        }\n                        this.table.selection.select(e.group);\n                    }\n                    else {\n                        this.table.selection.deselect(e.group);\n                    }\n                    this.table._onSelected.emit(this.table.selection.selected);\n                }\n                else {\n                    e.group.controls[e.column.columnDef]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                    this.table.selection.deselect(e.row);\n                }\n            }\n            if (this.isAllSelected()) {\n                this.table.columns.update((columns) => {\n                    columns.filter(f => f.columnDef === this.columnSelect).forEach(m => m.headerCell.indeterminate = false);\n                    return columns;\n                });\n                this.table.formHeader.controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\n                this.table.tableService.onSelectIndeterminate.next(false);\n            }\n            else {\n                this.table.columns().filter(f => f.columnDef === this.columnSelect)\n                    .map(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\n                this.table.columns.update((columns) => {\n                    columns.filter(f => f.columnDef === this.columnSelect)\n                        .forEach(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\n                    return columns;\n                });\n                this.table.tableService.onSelectIndeterminate.next(!this.table.selection.isEmpty());\n                if (this.table.selection.isEmpty()) {\n                    this.table.formHeader.controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                }\n            }\n        }\n    }\n    isAllSelected() {\n        if (this.table) {\n            const numSelected = this.table.selection.selected\n                .filter(s => this.table.dataSource.filteredData.includes(s)).length;\n            const numRows = this.table.dataSource.filteredData.length;\n            return numSelected === numRows;\n        }\n        return false;\n    }\n}","originalLength":13266,"removedExports":[],"renderedExports":["KlesSelectionTableService"],"renderedLength":3392},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\filter\\headerfilter-table.service.mjs":{"code":"class KlesHeaderFilterTableService {\n    constructor() {\n        this.filteredValues = {};\n    }\n    filterData() {\n        if (this.table) {\n            this.filteredValues = this.table.formHeader.value;\n            Object.keys(this.filteredValues).map(key => {\n                if (moment.isMoment(this.filteredValues[key])) {\n                    this.filteredValues[key] = this.filteredValues[key].toDate().toDateString();\n                }\n            });\n            this.table.dataSource.filterPredicate = this.createFilter();\n            this.table.dataSource.filter = JSON.stringify(this.filteredValues);\n        }\n    }\n    /**Filter */\n    createFilter() {\n        const myFilterPredicate = (data, filter) => {\n            let searchString = JSON.parse(filter);\n            const filterableColumn = this.table.columns().filter(f => f.filterable).map(m => m.columnDef);\n            searchString = _.pick(searchString, filterableColumn);\n            return Object.keys(searchString).filter(f => searchString[f] && filterableColumn.includes(f)).every(key => {\n                let keyValue = data?.controls[key]?.value;\n                const column = this.table.columns().find(col => col.columnDef === key);\n                if (column.headerCell.filterPredicate) {\n                    return column.headerCell.filterPredicate(keyValue, searchString[key]) || false;\n                }\n                if (keyValue && typeof (keyValue) === 'object' && column.cell.property) {\n                    keyValue = keyValue[column.cell.property];\n                }\n                if (searchString[key] && typeof (searchString[key]) === 'object' && (column.headerCell.property || column.cell.property)) {\n                    if (Array.isArray(searchString[key])) {\n                        if (!searchString[key].length)\n                            return true;\n                        const list = searchString[key].map(m => m[column.headerCell.property || column.cell.property].toLowerCase());\n                        return keyValue && list.includes(keyValue.toString().trim().toLowerCase());\n                    }\n                    else {\n                        searchString[key] = searchString[key][column.headerCell.property || column.cell.property];\n                    }\n                }\n                if (!keyValue && searchString[key].length === 0) {\n                    return true;\n                }\n                else if (!keyValue) {\n                    return false;\n                }\n                else if (!searchString[key]) {\n                    return true;\n                }\n                return keyValue && keyValue.toString().trim().toLowerCase().indexOf(searchString[key].toLowerCase()) !== -1;\n            });\n        };\n        return myFilterPredicate;\n    }\n}","originalLength":11545,"removedExports":[],"renderedExports":["KlesHeaderFilterTableService"],"renderedLength":2792},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\dragdrop\\dragdroprow.service.mjs":{"code":"class KlesDragDropRowTableService {\n    beforeDrop(event) {\n        return of(true);\n    }\n    onDrop(event) {\n        this.beforeDrop(event).pipe(take(1)).subscribe((isValid) => {\n            if (isValid) {\n                if (event.previousContainer === event.container) {\n                    const previousIndex = this.table.getFormArray().controls.findIndex((d) => d.value._id === event.item.data.value._id);\n                    moveItemInArray(this.table.getFormArray().controls, previousIndex, event.currentIndex);\n                    this.table._onDragDropRow.emit({\n                        currentIndex: event.currentIndex, previousIndex: previousIndex,\n                        group: this.table.getFormArray().controls[event.currentIndex]\n                    });\n                    this.table.dataSource.data = this.table.getFormArray().controls;\n                }\n                else {\n                    event.previousContainer.data.tableService.deleteRecord([event.item.data]);\n                    this.table.tableService.addRecord(event.item.data.value, event.currentIndex);\n                    this.table._onDragDropRow.emit({\n                        currentIndex: event.currentIndex, previousIndex: event.previousIndex,\n                        container: event.container,\n                        group: this.table.getFormArray().controls[event.currentIndex]\n                    });\n                }\n                this.afterDrop(event);\n            }\n        });\n    }\n    afterDrop(event) {\n    }\n    sortPredicate(index, item) {\n        return true;\n    }\n}","originalLength":7501,"removedExports":[],"renderedExports":["KlesDragDropRowTableService"],"renderedLength":1579},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\unfoldrow\\unfoldrow.service.mjs":{"code":"class KlesUnfoldRowTableService {\n    unfoldRow({ group, row, value }) {\n        if (this.table && this.table.templateUnfold) {\n            const isUnfold = group.controls._unfold?.value;\n            if (!this.table.templateUnfold?.multiUnfold && isUnfold) {\n                this.table.getFormArray().controls\n                    .filter((row) => row.controls._id.value !== group.controls._id.value)\n                    .forEach((row) => row.controls._unfold.patchValue(false, { emitEvent: false }));\n            }\n        }\n    }\n}","originalLength":2946,"removedExports":[],"renderedExports":["KlesUnfoldRowTableService"],"renderedLength":532},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\table.service.mjs":{"code":"// @Injectable({\n//     providedIn: 'root'\n// })\nclass KlesTableService extends classes(DefaultKlesTableService, KlesSelectionTableService, KlesHeaderFilterTableService, KlesDragDropRowTableService, KlesUnfoldRowTableService) {\n    constructor() {\n        super({ super: KlesSelectionTableService, arguments: ['#select'] }, { super: KlesHeaderFilterTableService }, { super: KlesUnfoldRowTableService });\n    }\n    //Header \n    onHeaderChange(e) {\n        this.filterData();\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    //Line\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return this.sortPredicate(index, item);\n    }\n    onLineChange(e) {\n        this.unfoldRow(e);\n        this.table.matTable.renderRows();\n    }\n    //Footer\n    onFooterChange(e) { }\n    onPageChange(event) { }\n    static { this.ɵfac = function KlesTableService_Factory(t) { return new (t || KlesTableService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: KlesTableService, factory: KlesTableService.ɵfac }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTableService, [{\n        type: Injectable\n    }], () => [], null); })();","originalLength":6354,"removedExports":[],"renderedExports":["KlesTableService"],"renderedLength":1320},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selection\\selectiontablelazy.service.mjs":{"code":"class KlesSelectionTableLazyService {\n    constructor(column, selection) {\n        this.selection = selection;\n        this.columnSelect = column;\n    }\n    changeSelectionHeader(e) {\n        if (this.selection?.selectAll) {\n            if (e.column.columnDef === this.columnSelect) {\n                const val = e.group.controls[this.columnSelect].value;\n                const filterHeader = this.table.columns()\n                    .filter(column => column.filterable)\n                    .map(column => {\n                    return { [column.columnDef]: this.table.formHeader.controls[column.columnDef].value };\n                })\n                    .reduce((a, b) => ({ ...a, ...b }), {});\n                this.selection.selectAll(val, filterHeader)\n                    .pipe(take(1), map((response) => {\n                    return { success: true, ...response };\n                }), catchError(err => {\n                    console.error(err);\n                    return of({ success: false, indeterminate: false, selected: false });\n                }))\n                    .subscribe((response) => {\n                    this.table.getFormArray().controls.forEach((row) => {\n                        row.controls[this.columnSelect]?.patchValue(response.selected, { emitEvent: false, onlySelf: true });\n                    });\n                    this.table.tableService.onSelectIndeterminate.next(response.indeterminate);\n                    this.table.ref.markForCheck();\n                });\n            }\n        }\n    }\n    changeSelectionLine(e) {\n        if (this.selection?.select) {\n            if (e.column.columnDef === this.columnSelect && e.row) {\n                const val = e.group.controls[e.column.columnDef].value;\n                this.selection.select(val, e.group)\n                    .pipe(take(1), map((response) => {\n                    return { success: true, ...response };\n                }), catchError(err => {\n                    console.error(err);\n                    return of({ success: false, indeterminate: false, selected: false });\n                }))\n                    .subscribe((response) => {\n                    if (!response.success) {\n                        e.group.controls[e.column.columnDef].patchValue(!val, { emitEvent: false });\n                    }\n                    else if (response.success) {\n                        if (response.indeterminate) {\n                            this.table.formHeader\n                                .controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                        }\n                        else if (response.selected && !response.indeterminate) {\n                            this.table.formHeader\n                                .controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\n                        }\n                        else {\n                            this.table.formHeader\n                                .controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                        }\n                        this.table.columns.update((columns) => {\n                            columns.find(f => f.columnDef === this.columnSelect).headerCell.indeterminate = response.indeterminate;\n                            return columns;\n                        });\n                        this.table.tableService.onSelectIndeterminate.next(response.indeterminate);\n                    }\n                });\n            }\n        }\n    }\n}","originalLength":13896,"removedExports":[],"renderedExports":["KlesSelectionTableLazyService"],"renderedLength":3547},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\lazytable.service.mjs":{"code":"class KlesLazyTableService extends classes(DefaultKlesTableService, KlesSelectionTableLazyService, KlesDragDropRowTableService, KlesUnfoldRowTableService) {\n    constructor(pagination, selection) {\n        super({ super: KlesSelectionTableLazyService, arguments: ['#select', selection] }, { super: KlesUnfoldRowTableService });\n        this.pagination = pagination;\n    }\n    //Header \n    onHeaderChange(e) {\n        const value = { ...this.table.formHeader.value };\n        this.table.columns().forEach(column => {\n            if (!column.filterable) {\n                delete value[column.columnDef];\n            }\n        });\n        if (!_.isEqual(this.table.filteredValues$.getValue(), value)) {\n            this.table.filteredValues$.next(value);\n        }\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    //Line\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    onLineChange(e) {\n        this.unfoldRow(e);\n        super.onLineChange(e);\n    }\n    //Footer\n    onFooterChange(e) { }\n    onPageChange(event) {\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return true;\n    }\n    load(sort, order, page, perPage, filter) {\n        return this.pagination.list(sort, order, page, perPage, filter);\n    }\n    reload() {\n        this.table.reload$.next();\n    }\n}","originalLength":7742,"removedExports":[],"renderedExports":["KlesLazyTableService"],"renderedLength":1365},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\defaulttreetable.service.mjs":{"code":"class DefaultKlesTreetableService extends DefaultKlesTableService {\n    constructor() {\n        super(...arguments);\n        this.getDepthDataAccessor = (item, property) => {\n            return item.value._status.depth;\n        };\n        this.getSortingDataAccessor = (item, property) => {\n            let value = item.value[property];\n            if (value) {\n                if (typeof value === 'string') {\n                    value = value.toLowerCase();\n                }\n                else if (typeof value === 'object') {\n                    if (value.key) {\n                        value = value.key;\n                    }\n                }\n            }\n            return value;\n        };\n        this.unfoldPredicate = (index, data) => {\n            return data.controls._status.value.isVisible && data.controls._unfold.value;\n        };\n    }\n    getParentDataAccessor(item, property) {\n        const [parent] = this.table.searchableTree.map(st => this.table.treeService.searchById(st, item.value._id))\n            .filter(node => {\n            return isSome(node);\n        })\n            .flatMap(node => {\n            return pipe(node, fold(() => -1, (n) => n.pathToRoot.length));\n        })\n            .map(node => this.table.dataSource.data.find(row => row.value._id === node._id));\n        return parent || null;\n    }\n    getTable() {\n        return this;\n    }\n    onLineOpen(e) {\n    }\n    onLineClose(e) {\n    }\n    onLineChange(e) {\n        this.changeChildrenVisibility(e.group, e.group.controls._status.value.isExpanded);\n        super.onLineChange(e);\n    }\n    changeChildrenVisibility(node, visibility) {\n        const paginator = node.value._status.paginator;\n        const start = (paginator?.pageIndex * paginator?.pageSize) || 0;\n        const end = (start + paginator?.pageSize) || node.value._status.children?.length;\n        node.value._status.children?.forEach((child, index) => {\n            const childGroup = this.table.getFormArray().controls.find(control => control.value._id === child._id);\n            if (childGroup) {\n                childGroup.controls._status.patchValue({\n                    isVisible: (index >= start && index < end) ? visibility : false,\n                }, { emitEvent: false });\n                this.changeChildrenVisibility(childGroup, childGroup.controls._status.value.isExpanded\n                    && ((index >= start && index < end) ? visibility : false));\n            }\n        });\n    }\n    addRecord(record, index) {\n        const searchableNode = this.table.converterService.toSearchableTree(record);\n        const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\n        const groups = this.table.createFormNode(treeNode);\n        if (typeof index !== 'undefined') {\n            this.table._lines.splice(index, 0, record);\n            groups.forEach((group, i) => {\n                this.table.getFormArray().insert(index + i, group);\n            });\n        }\n        else {\n            this.table._lines.push(record);\n            groups.forEach((group) => {\n                this.table.getFormArray().push(group);\n            });\n        }\n        this.table.searchableTree = this.table._lines.map(t => this.table.converterService.toSearchableTree(t));\n        this.updateDataSource();\n        return groups[0];\n    }\n    updateRow(row, options) {\n        const data = {\n            ...row.value,\n            _id: row._id,\n            // _status: { depth: row.depth, isExpanded: row.isExpanded, isVisible: row.isVisible }\n        };\n        return this.updateRecord(data, options);\n    }\n    addChild(parentId, record) {\n        const treeTableTree = this.table.searchableTree.map(st => this.table.converterService.toTreeTableTree(st));\n        const parent = treeTableTree.find(s => s._id === parentId);\n        const parentDepth = ~~parent?.depth;\n        if (parent) {\n            const searchableNode = this.table.converterService.toSearchableTree(record);\n            const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\n            treeNode.depth = ~~parentDepth + 1;\n            const groups = this.table.createFormNode(treeNode);\n            const indexParent = this.table.getFormArray().controls.findIndex((group) => group.value._id === parentId);\n            const index = indexParent;\n            +(parent.children?.length || 0);\n            if (parent.children) {\n                parent.children.push({ value: groups[0].getRawValue() });\n            }\n            else {\n                parent.children = [{ value: groups[0].getRawValue() }];\n            }\n            this.table._lines[indexParent].children = parent.children;\n            this.table._lines.splice(index + 1, 0, record);\n            groups.forEach((group, i) => {\n                this.table.getFormArray().insert(index + (i + 1), group);\n            });\n            this.table.searchableTree = this.table.getFormArray().controls.map(line => {\n                return {\n                    value: (line.value?._id === parentId) ? { ...line.value, children: parent.children, childrenCounter: ~~parent.children?.length } : line.value,\n                    _id: line.value?._id,\n                    children: (line.value?._id === parentId) ? parent.children : line.value?._status?.children,\n                    childrenCounter: (line.value?._id === parentId) ? ~~parent.children?.length : ~~line.value?._status?.childrenCounter,\n                    isBusy: line.value?._status?.isBusy || false\n                };\n            });\n            this.updateDataSource();\n            return groups[0];\n        }\n        return null;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵDefaultKlesTreetableService_BaseFactory; return function DefaultKlesTreetableService_Factory(t) { return (ɵDefaultKlesTreetableService_BaseFactory || (ɵDefaultKlesTreetableService_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultKlesTreetableService)))(t || DefaultKlesTreetableService); }; })(); }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultKlesTreetableService, factory: DefaultKlesTreetableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultKlesTreetableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":24629,"removedExports":[],"renderedExports":["DefaultKlesTreetableService"],"renderedLength":6387},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\dragdrop\\dragdroprowtree.service.mjs":{"code":"class KlesDragDropRowTreeTableService extends KlesDragDropRowTableService {\n    beforeDrop(event) {\n        const rowDrop = event.item.data;\n        const row = this.table.getFormArray().controls[event.currentIndex];\n        return of(row.value._status.depth === rowDrop.value._status.depth && row.value._status.parentId === rowDrop.value._status.parentId);\n    }\n    onDrop(event) {\n        this.beforeDrop(event).pipe(take(1)).subscribe((isValid) => {\n            if (isValid) {\n                const previousIndex = this.table.getFormArray().controls.findIndex((d) => d.value._id === event.item.data.value._id);\n                const currentIndex = (event.previousIndex < event.currentIndex ?\n                    this.findIndexLastChild(this.table.getFormArray().controls[event.currentIndex]) || event.currentIndex\n                    : event.currentIndex);\n                moveItemInArray(this.table.getFormArray().controls, previousIndex, currentIndex);\n                this.moveChildren(this.table.getFormArray().controls[currentIndex], currentIndex);\n                this.table._onDragDropRow.emit({\n                    currentIndex, previousIndex: previousIndex,\n                    group: this.table.getFormArray().controls[currentIndex]\n                });\n                this.table.dataSource.data = this.table.getFormArray().controls;\n                this.afterDrop(event);\n            }\n        });\n    }\n    moveChildren(parent, index) {\n        parent?.controls._status.value.children?.forEach((child) => {\n            const previousIndex = this.table.getFormArray().controls.findIndex((group) => group.controls._id.value === child._id);\n            if (previousIndex !== -1) {\n                if (previousIndex > index) {\n                    index++;\n                }\n                moveItemInArray(this.table.getFormArray().controls, previousIndex, index);\n                index = this.moveChildren(this.table.getFormArray().controls[index], index);\n            }\n        });\n        return index;\n    }\n    findIndexLastChild(parent) {\n        if (!parent.controls._status.value.children || !parent.controls._status.value.children.length) {\n            return null;\n        }\n        return Math.max(...parent.controls._status.value.children?.map((child) => {\n            return this.table.getFormArray().controls.findIndex((group) => group.controls._id.value === child._id);\n        }));\n    }\n    sortPredicate(index, item) {\n        return this.table.getFormArray().controls[index].controls._status.value.depth === item.data.controls._status.value.depth\n            && this.table.getFormArray().controls[index].controls._status.value.parentId === item.data.controls._status.value.parentId;\n    }\n}","originalLength":12244,"removedExports":[],"renderedExports":["KlesDragDropRowTreeTableService"],"renderedLength":2721},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\lazy\\lazytreetable.service.mjs":{"code":"class KlesLazyTreetableService extends classes(DefaultKlesTreetableService, KlesSelectionTableLazyService, KlesDragDropRowTreeTableService) {\n    constructor(data, child, selection) {\n        super({ super: KlesSelectionTableLazyService, arguments: ['#select', selection] });\n        this.data = data;\n        this.child = child;\n    }\n    //Header \n    onHeaderChange(e) {\n        const value = { ...this.table.formHeader.value };\n        this.table.columns().forEach(column => {\n            if (!column.filterable) {\n                delete value[column.columnDef];\n            }\n        });\n        if (!_.isEqual(this.table.filteredValues$.getValue(), value)) {\n            this.table.filteredValues$.next(value);\n        }\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    //Line\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    onLineChange(e) {\n        super.onLineChange(e);\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return this.sortPredicate(index, item);\n    }\n    changeChildrenVisibility(node, visibility) {\n        node.value._status.children?.forEach(child => {\n            const childGroup = this.table.getFormArray().controls.find(control => control.value._id === child._id);\n            if (childGroup) {\n                childGroup.controls._status.patchValue({\n                    isVisible: visibility,\n                }, { emitEvent: false });\n                this.changeChildrenVisibility(childGroup, childGroup.controls._status.value.isExpanded && visibility);\n            }\n        });\n    }\n    //Footer\n    onFooterChange(e) { }\n    onPageChange(event) {\n        // super.onPageChange(event);\n    }\n    load(sort, order, page, perPage, filter) {\n        return this.data.list(sort, order, page, perPage, filter);\n    }\n    loadChild(parentId, sort, order, page, perPage, filter) {\n        return this.child.loadChildren(parentId, sort, order, page, perPage, filter);\n    }\n    addChild(parentId, record) {\n        const searchableParent = this.table.searchableTree.map(s => {\n            return this.table.treeService.getById(s, parentId);\n        }).filter(Boolean)?.[0];\n        if (searchableParent) {\n            const searchableNode = this.table.converterService.toSearchableTree(record);\n            searchableParent.children ? searchableParent.children.push(searchableNode) : searchableParent.children = [searchableNode];\n            const treeTableTree = this.table.searchableTree.map(st => this.table.converterService.toTreeTableTree(st));\n            const treeTableParent = this.table.treeService.flatten(treeTableTree.map(s => {\n                return this.table.treeService.searchById(s, parentId);\n            }).find(s => pipe(O.isSome(s))))[0].value;\n            const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\n            treeNode.depth = ~~treeTableParent.pathToRoot.length + 1;\n            const groups = this.table.createFormNode(treeNode);\n            const parentIndex = this.table.getFormArray().controls.findIndex((group) => group.value._id === parentId);\n            this.table.getFormArray().controls[parentIndex].controls._status.patchValue({\n                children: (this.table.getFormArray().controls[parentIndex].controls._status.value.children || []).concat([treeNode]),\n                childrenCounter: (this.table.getFormArray().controls[parentIndex].controls._status.value.children?.length || 0) + 1\n            }, { emitEvent: false });\n            groups.forEach((group, index) => {\n                this.table.getFormArray().insert(parentIndex + index + 1, group);\n            });\n            this.updateDataSource();\n            return groups[0];\n        }\n    }\n    addChildren(parentId, record) {\n        return record.map(m => this.addChild(parentId, record));\n    }\n    deleteRow(rowId) {\n        const row = this.table.getFormArray().controls.find((group) => group.value._id === rowId);\n        if (row) {\n            row.controls._status.value.children?.forEach((child) => {\n                this.deleteRow(child._id);\n            });\n            const parentId = row.controls._status.value.parentId;\n            if (parentId) {\n                const parent = this.table.getFormArray().controls.find((group) => group.value._id === parentId);\n                if (parent) {\n                    parent.controls._status.patchValue({ children: parent.controls._status.value.children.filter(c => c._id !== rowId) }, { emitEvent: false });\n                }\n            }\n            const index = this.table.getFormArray().controls.findIndex((group) => group.value._id === rowId);\n            if (index !== -1) {\n                this.table.getFormArray().removeAt(index);\n            }\n            this.table.searchableTree = this.table.searchableTree.filter(searchableNode => searchableNode._id !== rowId);\n        }\n    }\n    deleteChildren(parentId) {\n        const parent = this.table.getFormArray().controls.find((group) => group.value._id === parentId);\n        if (parent?.controls._status.controls.children?.value) {\n            parent?.controls._status.controls.children?.value?.forEach((child) => {\n                this.deleteRow(child._id);\n            });\n            parent?.controls._status.patchValue({ children: [] }, { emitEvent: false });\n            const searchableParent = this.table.searchableTree.map(s => {\n                return this.table.treeService.getById(s, parentId);\n            })?.[0];\n            if (searchableParent) {\n                searchableParent.children = [];\n            }\n            this.updateDataSource();\n        }\n    }\n}","originalLength":25537,"removedExports":[],"renderedExports":["KlesLazyTreetableService"],"renderedLength":5669},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selection\\selectiontreetable.service.mjs":{"code":"class KlesSelectionTreetableService extends KlesSelectionTableService {\n    constructor(column) {\n        super(column);\n    }\n    changeSelectionLine(e) {\n        if (this.table) {\n            if (e.column.columnDef === this.columnSelect && e.row) {\n                if (this.table.dataSource.filteredData.includes(e.group)) {\n                    const selected = e.group.controls[e.column.columnDef].value;\n                    this.updateChildrens(e.column, e.group, selected);\n                    this.updateParent(e.column, e.group);\n                    this.table.selection.clear();\n                    /* TODO not sure about this*/\n                    this.table.form.controls.rows.controls\n                        .filter((group) => group.controls[this.columnSelect].value === true)\n                        .forEach(control => {\n                        this.table.selection.select(control);\n                    });\n                    /* ***************** */\n                    this.table._onSelected.emit(this.table.selection.selected);\n                }\n            }\n            if (this.isAllSelected()) {\n                this.table.columns().filter(f => f.columnDef === this.columnSelect).map(m => m.headerCell.indeterminate = false);\n                this.table.formHeader.controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\n                this.table.tableService.onSelectIndeterminate.next(false);\n            }\n            else {\n                this.table.columns().filter(f => f.columnDef === this.columnSelect).map(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\n                this.table.tableService.onSelectIndeterminate.next(!this.table.selection.isEmpty());\n                if (this.table.selection.isEmpty()) {\n                    this.table.formHeader.controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                }\n            }\n            this.table.form.updateValueAndValidity();\n        }\n    }\n    childrenIsAllSelected(column, group) {\n        if (!group.value._status.children) {\n            return true;\n        }\n        return group.value._status.children.every(children => {\n            return this.table.dataSource.data.find(row => row.value._id === children._id).controls[column.columnDef].value === true;\n        });\n    }\n    childrenAtLeastOneSelected(column, group) {\n        if (!group.value._status.children) {\n            return true;\n        }\n        return group.value._status.children.some(children => {\n            const index = this.table.dataSource.data.findIndex(row => row.value._id === children._id);\n            return this.table.dataSource.data.find(row => row.value._id === children._id).controls[column.columnDef].value === true\n                || this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate === true;\n        });\n    }\n    isAllSelected() {\n        if (this.table) {\n            const numSelected = this.table.selection.selected\n                .filter(s => this.table.dataSource.filteredData.includes(s)).length;\n            const numRows = this.table.dataSource.filteredData.length;\n            return numSelected === numRows;\n        }\n        return false;\n    }\n    updateChildrens(column, group, selected) {\n        const childrens = group.controls._status.controls.children?.value || [];\n        childrens.forEach(children => {\n            const childGroup = this.table.dataSource.data.find(row => row.value._id === children._id);\n            if (childGroup.controls[column.columnDef].value !== selected) {\n                childGroup.controls[column.columnDef].patchValue(selected, { emitEvent: false });\n            }\n            this.updateChildrens(column, childGroup, selected);\n        });\n    }\n    updateParent(column, group) {\n        // const node = this.table.searchableTree.map(st => this.table.treeService.searchById(st, group.value._id)).find(st => st.isSome()).getOrElse(null);\n        const node = this.table.searchableTree\n            .map(st => this.table.treeService.searchById(st, group.value._id))\n            .find(st => pipe(O.isSome(st)));\n        if (node) {\n            // node.pathToRoot.forEach(parent => {\n            //     const parentGroup = this.table.dataSource.data.find(row => row.value._id === parent._id) as FormGroup;\n            //     const index = this.table.dataSource.data.findIndex(row => row.value._id === parent._id);\n            //     this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = false;\n            //     if (this.childrenIsAllSelected(column, parentGroup)) {\n            //         parentGroup.controls[column.columnDef].patchValue(true, { emitEvent: false });\n            //     } else if (this.childrenAtLeastOneSelected(column, parentGroup)) {\n            //         this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = true;\n            //         parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n            //     } else {\n            //         parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n            //     }\n            // })\n            pipe(node, O.map(m => m.pathToRoot.forEach(parent => {\n                const parentGroup = this.table.dataSource.data.find(row => row.value._id === parent._id);\n                const index = this.table.dataSource.data.findIndex(row => row.value._id === parent._id);\n                this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = false;\n                if (this.childrenIsAllSelected(column, parentGroup)) {\n                    parentGroup.controls[column.columnDef].patchValue(true, { emitEvent: false });\n                }\n                else if (this.childrenAtLeastOneSelected(column, parentGroup)) {\n                    this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = true;\n                    parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n                }\n                else {\n                    parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n                }\n            })));\n        }\n    }\n}","originalLength":25034,"removedExports":[],"renderedExports":["KlesSelectionTreetableService"],"renderedLength":6320},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\treetable\\treetable.service.mjs":{"code":"class KlesTreetableService extends classes(DefaultKlesTreetableService, KlesSelectionTreetableService, KlesDragDropRowTreeTableService) {\n    constructor() {\n        super({ super: KlesSelectionTreetableService, arguments: ['#select'] });\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return this.sortPredicate(index, item);\n    }\n    static { this.ɵfac = function KlesTreetableService_Factory(t) { return new (t || KlesTreetableService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: KlesTreetableService, factory: KlesTreetableService.ɵfac }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTreetableService, [{\n        type: Injectable\n    }], () => [], null); })();","originalLength":4144,"removedExports":[],"renderedExports":["KlesTreetableService"],"renderedLength":929},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\treetableservice.interface.mjs":{"code":"","originalLength":621,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\selectionclick\\selectionclick.service.mjs":{"code":"class KlesSelectionClickTableService {\n    constructor(column) {\n        this.columnSelect = column;\n    }\n    changeClickLine(group) {\n        if (this.table) {\n            if (this.table.dataSource.filteredData.includes(group)) {\n                if (!this.table.selection.isMultipleSelection()) {\n                    this.table.getFormArray().controls\n                        .filter((row) => row.value._id !== group.value._id)\n                        .forEach((row) => {\n                        row.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n                    });\n                }\n                if (!this.table.selection.isSelected(group)) {\n                    this.table.selection.select(group);\n                    group.controls[this.columnSelect]?.patchValue(true, { emitEvent: false });\n                }\n                else {\n                    this.table.selection.deselect(group);\n                    group.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n                }\n                this.table._onSelected.emit(this.table.selection.selected);\n            }\n            else {\n                this.table.selection.deselect(group);\n                group.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n            }\n            this.table.ref.markForCheck();\n        }\n    }\n}","originalLength":6016,"removedExports":[],"renderedExports":["KlesSelectionClickTableService"],"renderedLength":1370},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\tableservice.interface.mjs":{"code":"","originalLength":573,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\filter\\textfiltertable.service.mjs":{"code":"class KlesTextFilterTableService {\n    constructor() {\n        this.filteredValues = {};\n    }\n    filterData() {\n        if (this.table) {\n            this.filteredValues = this.table.formHeader.value;\n            this.table.dataSource.filterPredicate = this.createFilter();\n            this.table.dataSource.filter = JSON.stringify(this.filteredValues);\n        }\n    }\n    /**Filter */\n    createFilter() {\n        const myFilterPredicate = (data, filter) => {\n            let searchString = JSON.parse(filter);\n            const filterableColumn = this.table.columns().filter(f => f.filterable).map(m => m.columnDef);\n            searchString = _.pick(searchString, filterableColumn);\n            return Object.keys(searchString).filter(f => filterableColumn.includes(f)).every(key => {\n                let keyValue = data?.controls[key]?.value;\n                if (!keyValue && searchString[key].length === 0) {\n                    return true;\n                }\n                else if (!keyValue) {\n                    return false;\n                }\n                else if (!searchString[key]) {\n                    return true;\n                }\n                const column = this.table.columns().find(col => col.columnDef === key);\n                if (column.cell.property) {\n                    keyValue = data?.controls[key]?.value[column.cell.property];\n                }\n                return keyValue && keyValue.toString().trim().toLowerCase().indexOf(searchString[key].toLowerCase()) !== -1;\n            });\n        };\n        return myFilterPredicate;\n    }\n}","originalLength":6891,"removedExports":[],"renderedExports":["KlesTextFilterTableService"],"renderedLength":1580},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\services\\features\\dragdrop\\dragdrop.interface.mjs":{"code":"","originalLength":805,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\enums\\align.enum.mjs":{"code":"var AlignCell;\n(function (AlignCell) {\n    AlignCell[\"LEFT\"] = \"left\";\n    AlignCell[\"CENTER\"] = \"center\";\n    AlignCell[\"RIGHT\"] = \"right\";\n})(AlignCell || (AlignCell = {}));","originalLength":789,"removedExports":[],"renderedExports":["AlignCell"],"renderedLength":175},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\modules\\material.module.mjs":{"code":"class MaterialModule {\n    static { this.ɵfac = function MaterialModule_Factory(t) { return new (t || MaterialModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MaterialModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n            MatDatepickerModule,\n            MatDialogModule\n        ], imports: [CommonModule,\n            MatSliderModule,\n            MatButtonModule,\n            MatToolbarModule,\n            MatIconModule,\n            MatSidenavModule,\n            MatBadgeModule,\n            MatListModule,\n            MatGridListModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatSelectModule,\n            MatRadioModule,\n            MatDatepickerModule,\n            MatChipsModule,\n            MatTooltipModule,\n            MatTableModule,\n            MatPaginatorModule,\n            MatCardModule,\n            MatMenuModule,\n            MatTabsModule,\n            CdkTableModule,\n            MatProgressSpinnerModule,\n            MatCheckboxModule,\n            MatDialogModule,\n            MatAutocompleteModule,\n            MatProgressBarModule,\n            MatSortModule,\n            MatExpansionModule,\n            MatNativeDateModule,\n            MatSnackBarModule,\n            MatTreeModule,\n            MatSliderModule,\n            MatButtonModule,\n            MatSlideToggleModule,\n            ColorPickerModule,\n            DragDropModule, MatButtonModule,\n            MatToolbarModule,\n            MatIconModule,\n            MatSidenavModule,\n            MatBadgeModule,\n            MatListModule,\n            MatGridListModule,\n            MatInputModule,\n            MatFormFieldModule,\n            MatSelectModule,\n            MatRadioModule,\n            MatDatepickerModule,\n            MatChipsModule,\n            MatTooltipModule,\n            MatTableModule,\n            MatPaginatorModule,\n            MatCardModule,\n            MatMenuModule,\n            MatTabsModule,\n            CdkTableModule,\n            MatProgressSpinnerModule,\n            MatCheckboxModule,\n            MatDialogModule,\n            MatAutocompleteModule,\n            MatProgressBarModule,\n            MatSortModule,\n            MatExpansionModule,\n            MatNativeDateModule,\n            MatSnackBarModule,\n            MatTreeModule,\n            MatSliderModule,\n            MatButtonModule,\n            MatSlideToggleModule,\n            ColorPickerModule,\n            DragDropModule,\n            KlesMaterialDatepickerModule] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatSliderModule,\n                    MatButtonModule,\n                    MatToolbarModule,\n                    MatIconModule,\n                    MatSidenavModule,\n                    MatBadgeModule,\n                    MatListModule,\n                    MatGridListModule,\n                    MatFormFieldModule,\n                    MatInputModule,\n                    MatSelectModule,\n                    MatRadioModule,\n                    MatDatepickerModule,\n                    MatChipsModule,\n                    MatTooltipModule,\n                    MatTableModule,\n                    MatPaginatorModule,\n                    MatCardModule,\n                    MatMenuModule,\n                    MatTabsModule,\n                    CdkTableModule,\n                    MatProgressSpinnerModule,\n                    MatCheckboxModule,\n                    MatDialogModule,\n                    MatAutocompleteModule,\n                    MatProgressBarModule,\n                    MatSortModule,\n                    MatExpansionModule,\n                    MatNativeDateModule,\n                    MatSnackBarModule,\n                    MatTreeModule,\n                    MatSliderModule,\n                    MatButtonModule,\n                    MatSlideToggleModule,\n                    ColorPickerModule,\n                    DragDropModule\n                ],\n                exports: [\n                    MatButtonModule,\n                    MatToolbarModule,\n                    MatIconModule,\n                    MatSidenavModule,\n                    MatBadgeModule,\n                    MatListModule,\n                    MatGridListModule,\n                    MatInputModule,\n                    MatFormFieldModule,\n                    MatSelectModule,\n                    MatRadioModule,\n                    MatDatepickerModule,\n                    MatChipsModule,\n                    MatTooltipModule,\n                    MatTableModule,\n                    MatPaginatorModule,\n                    MatCardModule,\n                    MatMenuModule,\n                    MatTabsModule,\n                    CdkTableModule,\n                    MatProgressSpinnerModule,\n                    MatCheckboxModule,\n                    MatDialogModule,\n                    MatAutocompleteModule,\n                    MatProgressBarModule,\n                    MatSortModule,\n                    MatExpansionModule,\n                    MatNativeDateModule,\n                    MatSnackBarModule,\n                    MatTreeModule,\n                    MatSliderModule,\n                    MatButtonModule,\n                    MatSlideToggleModule,\n                    ColorPickerModule,\n                    DragDropModule,\n                    KlesMaterialDatepickerModule\n                ],\n                providers: [\n                    MatDatepickerModule,\n                    MatDialogModule\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MaterialModule, { imports: [CommonModule,\n        MatSliderModule,\n        MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatBadgeModule,\n        MatListModule,\n        MatGridListModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatRadioModule,\n        MatDatepickerModule,\n        MatChipsModule,\n        MatTooltipModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatCardModule,\n        MatMenuModule,\n        MatTabsModule,\n        CdkTableModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        MatSortModule,\n        MatExpansionModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n        MatTreeModule,\n        MatSliderModule,\n        MatButtonModule,\n        MatSlideToggleModule,\n        ColorPickerModule,\n        DragDropModule], exports: [MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatBadgeModule,\n        MatListModule,\n        MatGridListModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatSelectModule,\n        MatRadioModule,\n        MatDatepickerModule,\n        MatChipsModule,\n        MatTooltipModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatCardModule,\n        MatMenuModule,\n        MatTabsModule,\n        CdkTableModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        MatSortModule,\n        MatExpansionModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n        MatTreeModule,\n        MatSliderModule,\n        MatButtonModule,\n        MatSlideToggleModule,\n        ColorPickerModule,\n        DragDropModule,\n        KlesMaterialDatepickerModule] }); })();","originalLength":22489,"removedExports":[],"renderedExports":["MaterialModule"],"renderedLength":7736},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\lib\\table.module.mjs":{"code":"const components = [\n    KlesTableComponent,\n    KlesLazyTableComponent,\n    KlesFormTextHeaderComponent,\n    KlesFormTextHeaderFilterComponent,\n    KlesFormDynamicHeaderFilterComponent,\n    KlesLeafComponent,\n    KlesNodeComponent,\n    KlesTreetableComponent,\n    KlesLazyTreetableComponent,\n    KlesUnfoldCellComponent\n];\nconst directives = [\n    KlesTableDirective,\n    KlesResizeColumnDirective,\n    KlesCellStyleDirective,\n    KlesComponentHeaderDirective,\n    KlesDynamicTreeCellDirective,\n    KlesTreetableDirective,\n    KlesDynamicCellDirective\n];\nconst services = [\n    AbstractKlesTableService,\n    AbstractKlesLazyTableService,\n    KlesTableService,\n    // KlesLazyTableService,\n    AbstractKlesTreeTableService,\n    AbstractKlesLazyTreetableService,\n    // KlesTreetableService,\n    DefaultKlesTreetableService,\n    // KlesLazyTreetableService,\n    ConverterService,\n    TreeService\n];\nconst pipes = [FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe];\nclass KlesMaterialTableModule {\n    static { this.ɵfac = function KlesMaterialTableModule_Factory(t) { return new (t || KlesMaterialTableModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: KlesMaterialTableModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n            services\n        ], imports: [CommonModule,\n            MaterialModule,\n            TranslateModule,\n            ReactiveFormsModule,\n            FormsModule,\n            KlesMaterialDynamicformsModule] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesMaterialTableModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    components,\n                    directives,\n                    pipes\n                ],\n                imports: [\n                    CommonModule,\n                    MaterialModule,\n                    TranslateModule,\n                    ReactiveFormsModule,\n                    FormsModule,\n                    KlesMaterialDynamicformsModule\n                ],\n                exports: [\n                    components,\n                    directives,\n                    pipes\n                ],\n                providers: [\n                    services\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(KlesMaterialTableModule, { declarations: [KlesTableComponent,\n        KlesLazyTableComponent,\n        KlesFormTextHeaderComponent,\n        KlesFormTextHeaderFilterComponent,\n        KlesFormDynamicHeaderFilterComponent,\n        KlesLeafComponent,\n        KlesNodeComponent,\n        KlesTreetableComponent,\n        KlesLazyTreetableComponent,\n        KlesUnfoldCellComponent, KlesTableDirective,\n        KlesResizeColumnDirective,\n        KlesCellStyleDirective,\n        KlesComponentHeaderDirective,\n        KlesDynamicTreeCellDirective,\n        KlesTreetableDirective,\n        KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe], imports: [CommonModule,\n        MaterialModule,\n        TranslateModule,\n        ReactiveFormsModule,\n        FormsModule,\n        KlesMaterialDynamicformsModule], exports: [KlesTableComponent,\n        KlesLazyTableComponent,\n        KlesFormTextHeaderComponent,\n        KlesFormTextHeaderFilterComponent,\n        KlesFormDynamicHeaderFilterComponent,\n        KlesLeafComponent,\n        KlesNodeComponent,\n        KlesTreetableComponent,\n        KlesLazyTreetableComponent,\n        KlesUnfoldCellComponent, KlesTableDirective,\n        KlesResizeColumnDirective,\n        KlesCellStyleDirective,\n        KlesComponentHeaderDirective,\n        KlesDynamicTreeCellDirective,\n        KlesTreetableDirective,\n        KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe] }); })();","originalLength":17845,"removedExports":[],"renderedExports":["KlesMaterialTableModule"],"renderedLength":4022},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of kles-material-table\n */\n/**MODEL */","originalLength":11669,"removedExports":[],"renderedExports":[],"renderedLength":63},"D:\\workspace\\3kles\\klesmaterialtable\\dist\\kles-material-table\\esm2022\\3kles-kles-material-table.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":548,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i13 from '@3kles/kles-material-dynamicforms';\nimport { KlesFormInputClearableComponent, EnumType, KlesFormSelectSearchComponent, KlesFormColorComponent, KlesFormDateComponent, KlesDynamicFieldDirective, componentMapper, klesFieldControlFactory, KlesFieldAbstract, KlesMaterialDynamicformsModule } from '@3kles/kles-material-dynamicforms';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injector, signal, Directive, Input, Output, Component, ViewEncapsulation, Pipe, Injectable, computed, ChangeDetectionStrategy, Inject, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject, of, merge, concat, Observable } from 'rxjs';\nimport * as i9 from '@angular/material/paginator';\nimport { MatPaginatorIntl, MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport * as i1 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i11 from '@angular/material/sort';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport * as i1$1 from '@ngx-translate/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport * as i3 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2$1 from '@angular/material/core';\nimport { MAT_DATE_LOCALE, DateAdapter, MAT_DATE_FORMATS, MatNativeDateModule } from '@angular/material/core';\nimport { MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS } from '@angular/material-moment-adapter';\nimport * as i8$1 from '@angular/material/table';\nimport { MatTableDataSource, MatTable, MatTableModule } from '@angular/material/table';\nimport * as uuid from 'uuid';\nimport { v4 } from 'uuid';\nimport * as _ from 'lodash';\nimport { cloneDeep } from 'lodash';\nimport { takeUntil, debounceTime, take, catchError, map, tap, switchMap, distinctUntilChanged, startWith } from 'rxjs/operators';\nimport { style, animate, sequence, transition, trigger } from '@angular/animations';\nimport * as i3$1 from '@angular/forms';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport * as i4 from '@angular/material/dialog';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport * as i5 from '@angular/platform-browser';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i7 from '@angular/cdk/scrolling';\nimport * as i10 from '@angular/cdk/table';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport * as i12 from '@angular/cdk/drag-drop';\nimport { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';\nimport * as i4$1 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport * as i5$1 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i7$1 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i9$1 from '@angular/material/autocomplete';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport * as O from 'fp-ts/lib/Option';\nimport { fold, isSome } from 'fp-ts/lib/Option';\nimport { pipe } from 'fp-ts/lib/function';\nimport { classes } from 'polytype';\nimport * as moment from 'moment';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatListModule } from '@angular/material/list';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { ColorPickerModule } from 'ngx-color-picker';\nimport { KlesMaterialDatepickerModule } from '@3kles/kles-material-datepicker';\n\nclass KlesTableDirective {\n    constructor(resolver, container) {\n        this.resolver = resolver;\n        this.container = container;\n        this._onLoaded = new EventEmitter();\n        this._onSelected = new EventEmitter();\n        this._onChangeHeaderCell = new EventEmitter();\n        this._onChangeCell = new EventEmitter();\n        this._onChangeFooterCell = new EventEmitter();\n        this._onStatusHeaderChange = new EventEmitter();\n        this._onClick = new EventEmitter();\n    }\n    ngOnInit() {\n        // console.log('Directive KlesTable OnInit=', this.tableConfig);\n        // if (this.tableConfig) {\n        //     console.log('Directive KlesTable OnInit BuildComp=', this.tableConfig);\n        //     this.buildComponent();\n        // }\n    }\n    ngOnChanges(changes) {\n        if (changes.tableConfig) {\n            this.tableConfig = changes.tableConfig.currentValue;\n            if (this.tableConfig) {\n                this.buildComponent();\n                if (!changes.lines && !this.componentRef.instance.lines) {\n                    this.lines = [];\n                    this.componentRef.instance.lines = [];\n                }\n            }\n        }\n        if (changes.lines && this.componentRef) {\n            this.lines = changes.lines.currentValue;\n            this.componentRef.instance.lines = this.lines;\n        }\n        if (changes.footer && this.componentRef) {\n            this.footer = changes.footer.currentValue;\n            this.componentRef.instance.footer = this.footer;\n        }\n    }\n    buildComponent() {\n        const options = {\n            providers: [\n                {\n                    provide: 'tableService',\n                    useValue: this.tableConfig.tableService\n                },\n                ...this.tableConfig.customMatPaginatorIntl ? [{\n                        provide: MatPaginatorIntl,\n                        useClass: this.tableConfig.customMatPaginatorIntl\n                    }] : []\n            ]\n        };\n        const injector = Injector.create(options);\n        const factory = this.resolver.resolveComponentFactory(this.tableConfig.tableComponent);\n        if (this.componentRef) {\n            this.componentRef.destroy();\n        }\n        this.componentRef = this.container.createComponent(factory, 0, injector);\n        this.componentRef.instance.columns = signal(this.tableConfig.columns.map(m => {\n            const obj = { ...m };\n            obj.headerCell.filterable = obj.filterable;\n            obj.headerCell.sortable = obj.sortable;\n            if ((obj.filterable || obj.headerCell.filterable) && !obj.headerCell.component && obj.headerCell.type) {\n                obj.headerCell.component = KlesFormDynamicHeaderFilterComponent;\n                switch (obj.headerCell.type) {\n                    case EnumType.date:\n                        obj.headerCell.filterComponent = KlesFormDateComponent;\n                        break;\n                    case EnumType.color:\n                        obj.headerCell.filterComponent = KlesFormColorComponent;\n                        break;\n                    case EnumType.list:\n                        obj.headerCell.filterComponent = KlesFormInputClearableComponent;\n                        obj.headerCell.autocomplete = true;\n                        obj.headerCell.options = new BehaviorSubject([]);\n                        break;\n                    case EnumType.multi:\n                        obj.headerCell.filterComponent = KlesFormSelectSearchComponent;\n                        obj.headerCell.autocomplete = true;\n                        obj.headerCell.options = new BehaviorSubject([]);\n                        obj.headerCell.multiple = true;\n                        break;\n                    default:\n                        obj.headerCell.filterComponent = KlesFormInputClearableComponent;\n                        obj.headerCell.inputType = obj.headerCell.type;\n                        break;\n                }\n            }\n            return obj;\n        }));\n        if (this.tableConfig.options) {\n            this.componentRef.instance.options = this.tableConfig.options;\n        }\n        if (this.tableConfig.selectionMode !== undefined) {\n            this.componentRef.instance.selectionMode = this.tableConfig.selectionMode;\n        }\n        if (this.tableConfig.sortConfig) {\n            this.componentRef.instance.sortConfig = this.tableConfig.sortConfig;\n        }\n        //PAGINATION\n        if (this.tableConfig.hidePaginator) {\n            this.componentRef.instance.hidePaginator = this.tableConfig.hidePaginator;\n        }\n        if (this.tableConfig.pageSize) {\n            this.componentRef.instance.pageSize = this.tableConfig.pageSize;\n        }\n        if (this.tableConfig.pageSizeOptions) {\n            this.componentRef.instance.pageSizeOptions = this.tableConfig.pageSizeOptions;\n        }\n        //VALIDATION\n        if (this.tableConfig.lineValidations) {\n            this.componentRef.instance.lineValidations = this.tableConfig.lineValidations;\n        }\n        if (this.tableConfig.lineAsyncValidations) {\n            this.componentRef.instance.lineAsyncValidations = this.tableConfig.lineAsyncValidations;\n        }\n        //FOOTER\n        if (this.tableConfig.showFooter) {\n            this.componentRef.instance.showFooter = this.tableConfig.showFooter;\n        }\n        if (this.tableConfig.ngClassRow) {\n            this.componentRef.instance.ngClassRow = this.tableConfig.ngClassRow;\n        }\n        if (this.tableConfig.multiTemplate) {\n            this.componentRef.instance.multiTemplate = this.tableConfig.multiTemplate;\n            this.componentRef.instance.templates = this.tableConfig.templates || [];\n            this.componentRef.instance.templateUnfold = this.tableConfig.templateUnfold;\n        }\n        this.componentRef.instance.dragDropRows = this.tableConfig.dragDropRows;\n        this.componentRef.instance.dragDropRowsOptions = { autoScrollStep: 5, ...this.tableConfig.dragDropRowsOptions };\n        this.componentRef.instance.id = this.tableConfig.id;\n        // this.componentRef.instance.lines = [...this.lines];\n        this.componentRef.instance._onChangeHeaderCell = this._onChangeHeaderCell;\n        this.componentRef.instance._onChangeCell = this._onChangeCell;\n        this.componentRef.instance._onChangeFooterCell = this._onChangeFooterCell;\n        this.componentRef.instance._onSelected = this._onSelected;\n        this.componentRef.instance._onLoaded = this._onLoaded;\n        this.componentRef.instance._onStatusHeaderChange = this._onStatusHeaderChange;\n        this.componentRef.instance._onClick = this._onClick;\n    }\n    static { this.ɵfac = function KlesTableDirective_Factory(t) { return new (t || KlesTableDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesTableDirective, selectors: [[\"\", \"klesTable\", \"\"]], inputs: { tableConfig: \"tableConfig\", lines: \"lines\", footer: \"footer\" }, outputs: { _onLoaded: \"_onLoaded\", _onSelected: \"_onSelected\", _onChangeHeaderCell: \"_onChangeHeaderCell\", _onChangeCell: \"_onChangeCell\", _onChangeFooterCell: \"_onChangeFooterCell\", _onStatusHeaderChange: \"_onStatusHeaderChange\", _onClick: \"_onClick\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTableDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesTable]'\n            }]\n    }], () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }], { tableConfig: [{\n            type: Input\n        }], lines: [{\n            type: Input\n        }], footer: [{\n            type: Input\n        }], _onLoaded: [{\n            type: Output\n        }], _onSelected: [{\n            type: Output\n        }], _onChangeHeaderCell: [{\n            type: Output\n        }], _onChangeCell: [{\n            type: Output\n        }], _onChangeFooterCell: [{\n            type: Output\n        }], _onStatusHeaderChange: [{\n            type: Output\n        }], _onClick: [{\n            type: Output\n        }] }); })();\n\nclass KlesResizeColumnDirective {\n    constructor(renderer, el) {\n        this.renderer = renderer;\n        this.el = el;\n        this.onMouseDown = (event) => {\n            this.pressed = true;\n            this.startX = event.pageX;\n            this.startWidth = this.column.offsetWidth;\n        };\n        this.onMouseMove = (event) => {\n            const offset = 35;\n            if (this.pressed && event.buttons) {\n                this.renderer.addClass(this.table, \"resizing\");\n                // Calculate width of column\n                let width = this.startWidth + (event.pageX - this.startX - offset);\n                const tableCells = Array.from(this.table.querySelectorAll(\".mat-row\")).map((row) => row.querySelectorAll(\".mat-cell\").item(this.index));\n                // Set table header width\n                this.renderer.setStyle(this.column, \"width\", `${width}px`);\n                // Set table cells width\n                for (const cell of tableCells) {\n                    this.renderer.setStyle(cell, \"width\", `${width}px`);\n                }\n            }\n        };\n        this.onMouseUp = (event) => {\n            if (this.pressed) {\n                this.pressed = false;\n                this.renderer.removeClass(this.table, \"resizing\");\n            }\n        };\n        this.column = this.el.nativeElement;\n    }\n    ngOnInit() {\n        if (this.resizable) {\n            const row = this.renderer.parentNode(this.column);\n            const thead = this.renderer.parentNode(row);\n            this.table = this.renderer.parentNode(thead);\n            const resizer = this.renderer.createElement(\"span\");\n            this.renderer.addClass(resizer, \"resize-holder\");\n            this.renderer.appendChild(this.column, resizer);\n            this.renderer.listen(resizer, \"mousedown\", this.onMouseDown);\n            this.renderer.listen(this.table, \"mousemove\", this.onMouseMove);\n            this.renderer.listen(\"document\", \"mouseup\", this.onMouseUp);\n        }\n    }\n    static { this.ɵfac = function KlesResizeColumnDirective_Factory(t) { return new (t || KlesResizeColumnDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesResizeColumnDirective, selectors: [[\"\", \"klesResizeColumn\", \"\"]], inputs: { resizable: [\"klesResizeColumn\", \"resizable\"], index: \"index\" } }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesResizeColumnDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[klesResizeColumn]\"\n            }]\n    }], () => [{ type: i0.Renderer2 }, { type: i0.ElementRef }], { resizable: [{\n            type: Input,\n            args: [\"klesResizeColumn\"]\n        }], index: [{\n            type: Input\n        }] }); })();\n\nclass KlesCellStyleDirective {\n    constructor(elementRef, cdRef) {\n        this.elementRef = elementRef;\n        this.domElement = this.elementRef.nativeElement;\n        this.context = (cdRef.context);\n    }\n    ngOnChanges(changes) {\n        const style = this.context.getCellStyle(this.row, this.column);\n        if (style) {\n            this.domElement.style = style;\n        }\n    }\n    static { this.ɵfac = function KlesCellStyleDirective_Factory(t) { return new (t || KlesCellStyleDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesCellStyleDirective, selectors: [[\"\", \"klesCellStyle\", \"\"]], inputs: { row: \"row\", column: \"column\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesCellStyleDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[klesCellStyle]\"\n            }]\n    }], () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], { row: [{\n            type: Input\n        }], column: [{\n            type: Input\n        }] }); })();\n\nclass KlesComponentHeaderDirective {\n    constructor(resolver, container) {\n        this.resolver = resolver;\n        this.container = container;\n    }\n    ngOnInit() {\n        this.buildComponent();\n    }\n    ngOnChanges(changes) {\n        if (changes.component && !changes.component.isFirstChange()) {\n            this.component = changes.component.currentValue;\n            this.buildComponent();\n        }\n        if (changes.value && !changes.value.isFirstChange()) {\n            this.value = changes.value.currentValue;\n            this.componentRef.instance.value = this.value;\n        }\n    }\n    buildComponent() {\n        const factory = this.resolver.resolveComponentFactory(this.component);\n        if (this.componentRef)\n            this.componentRef.destroy();\n        this.componentRef = this.container.createComponent(factory);\n        this.componentRef.instance.component = this.component;\n        this.componentRef.instance.value = this.value;\n        this.componentRef.instance.field = this.field;\n        this.componentRef.instance.group = this.group;\n    }\n    static { this.ɵfac = function KlesComponentHeaderDirective_Factory(t) { return new (t || KlesComponentHeaderDirective)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesComponentHeaderDirective, selectors: [[\"\", \"klesComponentHeader\", \"\"]], inputs: { component: \"component\", value: \"value\", group: \"group\", field: \"field\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesComponentHeaderDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesComponentHeader]'\n            }]\n    }], () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }], { component: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], field: [{\n            type: Input\n        }] }); })();\n\nclass AbstractCell {\n}\n\nclass AbstractTreeCell extends AbstractCell {\n    formatIndentation(node, step = 5) {\n        return '&nbsp;'.repeat(node.value._status.depth * step);\n    }\n    onNodeClick(row) {\n        row.controls._status.patchValue({\n            isExpanded: !row.value._status.isExpanded\n        });\n    }\n}\n\nfunction KlesUnfoldCellComponent_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function KlesUnfoldCellComponent_Conditional_1_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); ctx_r1.onFoldClick(ctx_r1.group); return i0.ɵɵresetView($event.stopPropagation()); });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.group.value._unfold ? \"keyboard_arrow_up\" : \"keyboard_arrow_down\", \" \");\n} }\nclass KlesUnfoldCellComponent extends AbstractCell {\n    onFoldClick(row) {\n        row.controls._unfold.patchValue(!row.value._unfold);\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesUnfoldCellComponent_BaseFactory; return function KlesUnfoldCellComponent_Factory(t) { return (ɵKlesUnfoldCellComponent_BaseFactory || (ɵKlesUnfoldCellComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesUnfoldCellComponent)))(t || KlesUnfoldCellComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesUnfoldCellComponent, selectors: [[\"app-kles-fold\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 3, vars: 4, consts: [[\"mat-icon-button\", \"\", \"aria-label\", \"expand row\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-icon-button\", \"\", \"aria-label\", \"expand row\", 3, \"click\"]], template: function KlesUnfoldCellComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\");\n            i0.ɵɵtemplate(1, KlesUnfoldCellComponent_Conditional_1_Template, 3, 1, \"button\", 0);\n            i0.ɵɵelementContainer(2, 1);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(1, !(ctx.templateUnfold == null ? null : ctx.templateUnfold.disabled) || !(ctx.templateUnfold == null ? null : ctx.templateUnfold.disabled(ctx.group)) ? 1 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"field\", ctx.field)(\"group\", ctx.group)(\"siblingFields\", ctx.siblingFields);\n        } }, dependencies: [i1.MatIconButton, i2.MatIcon, i13.KlesDynamicFieldDirective], encapsulation: 2 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesUnfoldCellComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-fold', encapsulation: ViewEncapsulation.None, template: `\r\n            <div>\r\n                @if ((!templateUnfold?.disabled || !templateUnfold?.disabled(group))) {\r\n                    <button mat-icon-button aria-label=\"expand row\" (click)=\"onFoldClick(group); $event.stopPropagation()\">\r\n                        <mat-icon> {{group.value._unfold ? 'keyboard_arrow_up' : 'keyboard_arrow_down'}} </mat-icon>\r\n                    </button>\r\n                }\r\n\r\n                <ng-container klesDynamicField [field]=\"field\"\r\n                    [group]=\"group\" [siblingFields]=\"siblingFields\">\r\n                </ng-container>\r\n            </div>\r\n    ` }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesUnfoldCellComponent, { className: \"KlesUnfoldCellComponent\", filePath: \"lib\\\\component\\\\cell\\\\unfoldcell.component.ts\", lineNumber: 28 }); })();\n\nclass KlesDynamicCellDirective extends KlesDynamicFieldDirective {\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    buildComponent() {\n        if (this.column.canUnfold) {\n            if (this.componentRef) {\n                this.componentRef.destroy();\n            }\n            this.componentRef = this.container.createComponent(KlesUnfoldCellComponent);\n            this.componentRef.instance.field = this.field;\n            this.componentRef.instance.group = this.group;\n            this.componentRef.instance.siblingFields = this.siblingFields;\n            this.componentRef.instance.templateUnfold = this.config?.templateUnfold;\n        }\n        else {\n            super.buildComponent();\n        }\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesDynamicCellDirective_BaseFactory; return function KlesDynamicCellDirective_Factory(t) { return (ɵKlesDynamicCellDirective_BaseFactory || (ɵKlesDynamicCellDirective_BaseFactory = i0.ɵɵgetInheritedFactory(KlesDynamicCellDirective)))(t || KlesDynamicCellDirective); }; })(); }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesDynamicCellDirective, selectors: [[\"\", \"klesDynamicCell\", \"\"]], inputs: { column: \"column\", config: \"config\" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesDynamicCellDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesDynamicCell]'\n            }]\n    }], null, { column: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }] }); })();\n\nclass KlesLeafComponent extends AbstractTreeCell {\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesLeafComponent_BaseFactory; return function KlesLeafComponent_Factory(t) { return (ɵKlesLeafComponent_BaseFactory || (ɵKlesLeafComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesLeafComponent)))(t || KlesLeafComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesLeafComponent, selectors: [[\"app-kles-leaf\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 4, consts: [[3, \"innerHTML\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"column\"]], template: function KlesLeafComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", 0);\n            i0.ɵɵelementContainer(1, 1);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"innerHTML\", ctx.formatIndentation(ctx.row), i0.ɵɵsanitizeHtml);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"field\", ctx.field)(\"group\", ctx.group)(\"column\", ctx.column);\n        } }, dependencies: [KlesDynamicCellDirective], styles: [\"[_nghost-%COMP%]{display:inline-flex}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesLeafComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-leaf', template: `\r\n        <div [innerHTML]=\"formatIndentation(row)\"></div>\r\n        <ng-container klesDynamicCell [field]=\"field\" [group]=\"group\" [column]=\"column\">\r\n        </ng-container>\r\n    `, styles: [\":host{display:inline-flex}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesLeafComponent, { className: \"KlesLeafComponent\", filePath: \"lib\\\\component\\\\treetable\\\\cell\\\\leaf.component.ts\", lineNumber: 16 }); })();\n\nfunction KlesNodeComponent_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 2);\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.formatIndentation(ctx_r0.row), i0.ɵɵsanitizeHtml);\n} }\nfunction KlesNodeComponent_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-icon\", 8);\n    i0.ɵɵlistener(\"click\", function KlesNodeComponent_Conditional_3_Template_mat_icon_click_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.onNodeClick(ctx_r4.row)); });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.row.value._status.isExpanded ? \"remove\" : \"add\", \" \");\n} }\nfunction KlesNodeComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 4);\n} }\nconst _c0$3 = () => [5, 10, 25, 100];\nfunction KlesNodeComponent_Conditional_7_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-paginator\", 9, 10);\n    i0.ɵɵlistener(\"page\", function KlesNodeComponent_Conditional_7_Template_mat_paginator_page_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.handlePageEvent($event)); });\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"length\", ctx_r3.row.value._status.paginator == null ? null : ctx_r3.row.value._status.paginator.length)(\"pageSize\", ctx_r3.row.value._status.paginator == null ? null : ctx_r3.row.value._status.paginator.pageSize)(\"showFirstLastButtons\", ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.showFirstLastButtons)(\"hidePageSize\", (ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.hidePageSize) === undefined ? true : ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.hidePageSize)(\"pageSizeOptions\", (ctx_r3.column.paginatorOption == null ? null : ctx_r3.column.paginatorOption.pageSizeOptions) || i0.ɵɵpureFunction0(6, _c0$3))(\"pageIndex\", ctx_r3.row.value._status.paginator == null ? null : ctx_r3.row.value._status.paginator.pageIndex);\n} }\nconst _c1$2 = a0 => ({ templateUnfold: a0 });\nclass KlesNodeComponent extends AbstractTreeCell {\n    onNodeClick(row) {\n        this.group.controls._status.controls.paginator?.patchValue({\n            pageIndex: 0\n        }, { emitEvent: false });\n        super.onNodeClick(row);\n    }\n    handlePageEvent(e) {\n        this.group.controls._status.patchValue({\n            paginator: {\n                pageIndex: e.pageIndex,\n                pageSize: e.pageSize,\n                length: e.length\n            }\n        });\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesNodeComponent_BaseFactory; return function KlesNodeComponent_Factory(t) { return (ɵKlesNodeComponent_BaseFactory || (ɵKlesNodeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesNodeComponent)))(t || KlesNodeComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesNodeComponent, selectors: [[\"app-kles-node\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 8, vars: 10, consts: [[2, \"display\", \"flex\", \"flex-direction\", \"column\", \"flex\", \"auto\"], [2, \"display\", \"flex\", \"align-items\", \"center\", \"gap\", \"3px\"], [3, \"innerHTML\"], [\"class\", \"size-16\"], [\"diameter\", \"25\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"column\", \"config\"], [1, \"paginator\"], [3, \"length\", \"pageSize\", \"showFirstLastButtons\", \"hidePageSize\", \"pageSizeOptions\", \"pageIndex\"], [1, \"size-16\", 3, \"click\"], [3, \"length\", \"pageSize\", \"showFirstLastButtons\", \"hidePageSize\", \"pageSizeOptions\", \"pageIndex\", \"page\"], [\"treePaginator\", \"\"]], template: function KlesNodeComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵtemplate(2, KlesNodeComponent_Conditional_2_Template, 1, 1, \"div\", 2)(3, KlesNodeComponent_Conditional_3_Template, 2, 1, \"mat-icon\", 3)(4, KlesNodeComponent_Conditional_4_Template, 1, 0, \"mat-spinner\", 4);\n            i0.ɵɵelementContainer(5, 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 6);\n            i0.ɵɵtemplate(7, KlesNodeComponent_Conditional_7_Template, 2, 7, \"mat-paginator\", 7);\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            let tmp_1_0;\n            let tmp_2_0;\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(2, ctx.column.canExpand ? 2 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(3, !((tmp_1_0 = ctx.row.getRawValue()) == null ? null : tmp_1_0._status == null ? null : tmp_1_0._status.isBusy) && ctx.row.value._status.childrenCounter > 0 ? 3 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(4, ((tmp_2_0 = ctx.row.getRawValue()) == null ? null : tmp_2_0._status == null ? null : tmp_2_0._status.isBusy) && ctx.column.canExpand ? 4 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"field\", ctx.field)(\"group\", ctx.group)(\"column\", ctx.column)(\"config\", i0.ɵɵpureFunction1(8, _c1$2, ctx.templateUnfold));\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(7, ctx.column.paginator && ctx.row.value._status.childrenCounter > 0 && ctx.row.value._status.isExpanded ? 7 : -1);\n        } }, dependencies: [i2.MatIcon, i9.MatPaginator, i3.MatProgressSpinner, KlesDynamicCellDirective], styles: [\"app-kles-node mat-icon{cursor:pointer}\\n\", \"app-kles-node .size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}\\n\", \"app-kles-node{display:inline-flex;align-items:center;flex-direction:row;width:100%}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{margin:0}\\n\", \"app-kles-node .mat-mdc-paginator{background:transparent}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{min-width:max-content}\\n\", \"app-kles-node .mat-mdc-paginator-container{padding:0 2px 0 8px;min-height:auto}\\n\", \"app-kles-node .paginator{display:flex;width:100%;justify-content:end}\\n\"], encapsulation: 2 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesNodeComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-node', encapsulation: ViewEncapsulation.None, template: `\r\n        <div style=\"display: flex; flex-direction: column; flex: auto;\">\r\n        <div style=\"display:flex; align-items: center; gap:3px\">\r\n            @if (column.canExpand) {\r\n                <div [innerHTML]=\"formatIndentation(row)\"></div>\r\n            }\r\n        \r\n            @if (!row.getRawValue()?._status?.isBusy && row.value._status.childrenCounter > 0) {\r\n                <mat-icon class=\"size-16\" (click)=\"onNodeClick(row)\">\r\n                    {{row.value._status.isExpanded ? 'remove' : 'add'}}\r\n                </mat-icon>\r\n            }\r\n\r\n            @if (row.getRawValue()?._status?.isBusy && column.canExpand) {\r\n                <mat-spinner diameter=\"25\"></mat-spinner>\r\n            }\r\n\r\n            <ng-container klesDynamicCell [field]=\"field\"\r\n                [group]=\"group\" [column]=\"column\" [config]=\"{templateUnfold}\">\r\n            </ng-container>\r\n        </div>\r\n\r\n        <div class=\"paginator\">\r\n            @if (column.paginator && row.value._status.childrenCounter>0 && row.value._status.isExpanded) {\r\n                <mat-paginator #treePaginator\r\n                    [length]=\"row.value._status.paginator?.length\"\r\n                    [pageSize]=\"row.value._status.paginator?.pageSize\"\r\n                    [showFirstLastButtons]=\"column.paginatorOption?.showFirstLastButtons\"\r\n                    [hidePageSize]=\"column.paginatorOption?.hidePageSize === undefined ? true : column.paginatorOption?.hidePageSize\"\r\n                    [pageSizeOptions]=\"column.paginatorOption?.pageSizeOptions || [5, 10, 25, 100]\"\r\n                    [pageIndex]=\"row.value._status.paginator?.pageIndex\"\r\n                    (page)=\"handlePageEvent($event)\">\r\n                </mat-paginator>\r\n            }\r\n        </div>\r\n\r\n        </div>\r\n    \r\n    \r\n    `, styles: [\"app-kles-node mat-icon{cursor:pointer}\\n\", \"app-kles-node .size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}\\n\", \"app-kles-node{display:inline-flex;align-items:center;flex-direction:row;width:100%}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{margin:0}\\n\", \"app-kles-node .mat-mdc-paginator{background:transparent}\\n\", \"app-kles-node .mat-mdc-paginator-range-label{min-width:max-content}\\n\", \"app-kles-node .mat-mdc-paginator-container{padding:0 2px 0 8px;min-height:auto}\\n\", \"app-kles-node .paginator{display:flex;width:100%;justify-content:end}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesNodeComponent, { className: \"KlesNodeComponent\", filePath: \"lib\\\\component\\\\treetable\\\\cell\\\\node.component.ts\", lineNumber: 69 }); })();\n\nclass KlesDynamicTreeCellDirective extends KlesDynamicFieldDirective {\n    ngOnInit() {\n        this.buildComponent();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    buildComponent() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n        }\n        this.componentRef = this.container.createComponent(this.column.canExpand ? KlesNodeComponent : KlesLeafComponent);\n        this.componentRef.instance.field = this.field;\n        this.componentRef.instance.group = this.group;\n        this.componentRef.instance.row = this.row;\n        this.componentRef.instance.column = this.column;\n        this.componentRef.instance.templateUnfold = this.config?.templateUnfold;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesDynamicTreeCellDirective_BaseFactory; return function KlesDynamicTreeCellDirective_Factory(t) { return (ɵKlesDynamicTreeCellDirective_BaseFactory || (ɵKlesDynamicTreeCellDirective_BaseFactory = i0.ɵɵgetInheritedFactory(KlesDynamicTreeCellDirective)))(t || KlesDynamicTreeCellDirective); }; })(); }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesDynamicTreeCellDirective, selectors: [[\"\", \"klesDynamicTreeCell\", \"\"]], inputs: { column: \"column\", row: \"row\", config: \"config\" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesDynamicTreeCellDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesDynamicTreeCell]'\n            }]\n    }], null, { column: [{\n            type: Input\n        }], row: [{\n            type: Input\n        }], config: [{\n            type: Input\n        }] }); })();\n\nclass KlesTreetableDirective extends KlesTableDirective {\n    constructor() {\n        super(...arguments);\n        this._onLineOpen = new EventEmitter();\n        this._onLineClose = new EventEmitter();\n    }\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    buildComponent() {\n        super.buildComponent();\n        this.componentRef.instance._onLineOpen = this._onLineOpen;\n        this.componentRef.instance._onLineClose = this._onLineClose;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesTreetableDirective_BaseFactory; return function KlesTreetableDirective_Factory(t) { return (ɵKlesTreetableDirective_BaseFactory || (ɵKlesTreetableDirective_BaseFactory = i0.ɵɵgetInheritedFactory(KlesTreetableDirective)))(t || KlesTreetableDirective); }; })(); }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: KlesTreetableDirective, selectors: [[\"\", \"klesTreetable\", \"\"]], outputs: { _onLineOpen: \"_onLineOpen\", _onLineClose: \"_onLineClose\" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTreetableDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[klesTreetable]'\n            }]\n    }], null, { _onLineOpen: [{\n            type: Output\n        }], _onLineClose: [{\n            type: Output\n        }] }); })();\n\nconst rowsAnimation = trigger('rowsAnimation', [\n    transition('void => *', [\n        style({ height: '*', opacity: '0', 'box-shadow': 'none' }),\n        sequence([\n            animate(\".35s ease\", style({ height: '*', opacity: '.9', 'box-shadow': 'none' })),\n            animate(\".35s ease\", style({ height: '*', opacity: 1, }))\n        ])\n    ])\n]);\n\nclass FieldPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(column, index) {\n        if (this.context) {\n            return this.context.getLineFields(index, column.cell.name);\n        }\n        return null;\n    }\n    static { this.ɵfac = function FieldPipe_Factory(t) { return new (t || FieldPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"fieldPipe\", type: FieldPipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'fieldPipe',\n                pure: false\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();\n\nclass GroupPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(index) {\n        if (this.context) {\n            return this.context.getControls(index);\n        }\n        return null;\n    }\n    static { this.ɵfac = function GroupPipe_Factory(t) { return new (t || GroupPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"groupPipe\", type: GroupPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GroupPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'groupPipe',\n                pure: true\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();\n\nclass ElevationPipe {\n    constructor() {\n    }\n    transform(elevation) {\n        return `mat-elevation-z${elevation}`;\n    }\n    static { this.ɵfac = function ElevationPipe_Factory(t) { return new (t || ElevationPipe)(); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"elevationPipe\", type: ElevationPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ElevationPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'elevationPipe',\n                pure: true\n            }]\n    }], () => [], null); })();\n\nclass RowPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(row) {\n        if (this.context) {\n            return this.context.ngClassRow(row);\n        }\n        return null;\n    }\n    static { this.ɵfac = function RowPipe_Factory(t) { return new (t || RowPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"rowPipe\", type: RowPipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'rowPipe',\n                pure: false\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();\n\nclass RowDragDisabledPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(row) {\n        if (this.context && this.context.dragDropRowsOptions.dragDisabled) {\n            return this.context.dragDropRowsOptions.dragDisabled(row);\n        }\n        return false;\n    }\n    static { this.ɵfac = function RowDragDisabledPipe_Factory(t) { return new (t || RowDragDisabledPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"rowDragDisabledPipe\", type: RowDragDisabledPipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowDragDisabledPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'rowDragDisabledPipe',\n                pure: false\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();\n\nvar Span;\n(function (Span) {\n    Span[\"MAX\"] = \"max\";\n})(Span || (Span = {}));\n\nclass SpanPipe {\n    transform(span, maxSize) {\n        if (span === Span.MAX) {\n            return maxSize;\n        }\n        return span;\n    }\n    static { this.ɵfac = function SpanPipe_Factory(t) { return new (t || SpanPipe)(); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"spanPipe\", type: SpanPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SpanPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'spanPipe',\n            }]\n    }], null, null); })();\n\nclass CellPipe {\n    constructor(cdRef) {\n        this.context = (cdRef.context);\n    }\n    transform(column) {\n        return {\n            'vertical-separator': this.context?.options?.verticalSeparator,\n            ...(column.align && { ['align-' + column.align]: true })\n        };\n    }\n    static { this.ɵfac = function CellPipe_Factory(t) { return new (t || CellPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16)); }; }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"cellPipe\", type: CellPipe, pure: true }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CellPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'cellPipe',\n            }]\n    }], () => [{ type: i0.ChangeDetectorRef }], null); })();\n\nclass AbstractKlesTableService {\n    constructor() {\n        this.onSelectIndeterminate = new Subject();\n    }\n    /**Setters */\n    setTable(table) {\n        this.table = table;\n    }\n    static { this.ɵfac = function AbstractKlesTableService_Factory(t) { return new (t || AbstractKlesTableService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AbstractKlesTableService, factory: AbstractKlesTableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractKlesTableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nconst _c0$2 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesTableComponent_ng_container_3_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14)(1, \"div\", 15);\n    i0.ɵɵelementContainer(2, 16);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r8.class);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r8.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c0$2, ctx_r9.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r8.headerCell)(\"group\", ctx_r9.formHeader);\n} }\nconst _c1$1 = a0 => ({ templateUnfold: a0 });\nfunction KlesTableComponent_ng_container_3_Conditional_3_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 19);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    const index_r16 = ctx.dataIndex;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r14.getCellStyle(row_r15, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r15.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r16))(\"siblingFields\", ctx_r14.lineFields[index_r16])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c1$1, ctx_r14.templateUnfold));\n} }\nfunction KlesTableComponent_ng_container_3_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_ng_container_3_Conditional_3_td_0_Template, 5, 17, \"td\", 17);\n} }\nfunction KlesTableComponent_ng_container_3_Conditional_4_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 19);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    const index_r20 = ctx.index;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r18.getCellStyle(row_r19, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r19.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r20))(\"siblingFields\", ctx_r18.lineFields[row_r19.value._index])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c1$1, ctx_r18.templateUnfold));\n} }\nfunction KlesTableComponent_ng_container_3_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_ng_container_3_Conditional_4_td_0_Template, 5, 17, \"td\", 17);\n} }\nfunction KlesTableComponent_ng_container_3_td_5_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 16);\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r22 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r8.footerCell)(\"group\", ctx_r22.formFooter);\n} }\nfunction KlesTableComponent_ng_container_3_td_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 20);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_3_td_5_Conditional_1_Template, 1, 2, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r12.getFooterStyle(column_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r8.footerCell ? 1 : -1);\n} }\nfunction KlesTableComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 10);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_3_th_1_Template, 3, 9, \"th\", 11);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtemplate(3, KlesTableComponent_ng_container_3_Conditional_3_Template, 1, 0, \"td\", 12)(4, KlesTableComponent_ng_container_3_Conditional_4_Template, 1, 0)(5, KlesTableComponent_ng_container_3_td_5_Template, 2, 3, \"td\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r8 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r8.columnDef)(\"sticky\", column_r8.sticky || false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, ctx_r0.multiTemplate ? 3 : 4);\n} }\nfunction KlesTableComponent_Conditional_4_ng_container_0_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 23);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r28 = ctx.$implicit;\n    const index_r29 = ctx.dataIndex;\n    const cell_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0$2, ctx_r27.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 6, cell_r26.colspan, ctx_r27.displayedColumns().length))(\"rowspan\", cell_r26.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r26)(\"group\", i0.ɵɵpipeBind1(3, 9, index_r29))(\"siblingFields\", ctx_r27.lineFields[row_r28.value._index]);\n} }\nfunction KlesTableComponent_Conditional_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, KlesTableComponent_Conditional_4_ng_container_0_td_1_Template, 4, 13, \"td\", 22);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r26.name);\n} }\nfunction KlesTableComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_Conditional_4_ng_container_0_Template, 2, 1, \"ng-container\", 21);\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.templateUnfold.cells);\n} }\nfunction KlesTableComponent_ng_container_5_ng_container_1_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 16);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const index_r36 = ctx.dataIndex;\n    const cell_r33 = i0.ɵɵnextContext().$implicit;\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0$2, ctx_r34.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 5, cell_r33.colspan, ctx_r34.displayedColumns().length))(\"rowspan\", cell_r33.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r33)(\"group\", i0.ɵɵpipeBind1(3, 8, index_r36));\n} }\nfunction KlesTableComponent_ng_container_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_5_ng_container_1_td_1_Template, 4, 12, \"td\", 22);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r33 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r33.name);\n} }\nfunction KlesTableComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, KlesTableComponent_ng_container_5_ng_container_1_Template, 2, 1, \"ng-container\", 21);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const template_r31 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", template_r31.cells);\n} }\nfunction KlesTableComponent_tr_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 24);\n} }\nfunction KlesTableComponent_tr_7_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 28);\n} if (rf & 2) {\n    const row_r38 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r41 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r41.dragDropRowsOptions == null ? null : ctx_r41.dragDropRowsOptions.dragPreview == null ? null : ctx_r41.dragDropRowsOptions.dragPreview.component)(\"value\", row_r38);\n} }\nfunction KlesTableComponent_tr_7_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_tr_7_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 26);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesTableComponent_tr_7_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 28);\n} if (rf & 2) {\n    const row_r38 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r43 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r43.dragDropRowsOptions == null ? null : ctx_r43.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r43.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r38);\n} }\nfunction KlesTableComponent_tr_7_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_tr_7_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 27);\n} }\nfunction KlesTableComponent_tr_7_Template(rf, ctx) { if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 25);\n    i0.ɵɵlistener(\"click\", function KlesTableComponent_tr_7_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r46); const row_r38 = restoredCtx.$implicit; const ctx_r45 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r45.onClick(row_r38)); });\n    i0.ɵɵpipe(1, \"rowPipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesTableComponent_tr_7_Conditional_3_Template, 1, 1, null, 26)(4, KlesTableComponent_tr_7_Conditional_4_Template, 1, 0, null, 27);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r38 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 6, row_r38))(\"cdkDragData\", row_r38)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 8, row_r38))(\"@rowsAnimation\", undefined);\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPreview == null ? null : ctx_r4.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesTableComponent_Conditional_8_Conditional_0_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 29);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesTableComponent_Conditional_8_Conditional_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_Conditional_8_Conditional_0_tr_0_Template, 1, 1, \"tr\", 30);\n} if (rf & 2) {\n    const ctx_r47 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r47.getTemplateColumns(ctx_r47.templateUnfold))(\"matRowDefWhen\", ctx_r47.tableService.unfoldPredicate);\n} }\nfunction KlesTableComponent_Conditional_8_ng_container_1_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 32);\n    i0.ɵɵpipe(1, \"rowPipe\");\n} if (rf & 2) {\n    const row_r53 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 2, row_r53))(\"@rowsAnimation\", undefined);\n} }\nfunction KlesTableComponent_Conditional_8_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, KlesTableComponent_Conditional_8_ng_container_1_tr_1_Template, 2, 4, \"tr\", 31);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const template_r51 = ctx.$implicit;\n    const ctx_r48 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r48.getTemplateColumns(template_r51))(\"matRowDefWhen\", template_r51.when);\n} }\nfunction KlesTableComponent_Conditional_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTableComponent_Conditional_8_Conditional_0_Template, 1, 2, \"tr\", 29)(1, KlesTableComponent_Conditional_8_ng_container_1_Template, 2, 2, \"ng-container\", 4);\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵconditional(0, ctx_r5.templateUnfold ? 0 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.templates);\n} }\nfunction KlesTableComponent_Conditional_9_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 34);\n} }\nfunction KlesTableComponent_Conditional_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesTableComponent_Conditional_9_tr_1_Template, 1, 0, \"tr\", 33);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r6.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesTableComponent {\n    set matSort(ms) {\n        if (!this.sort) {\n            this.sort = ms;\n            this.setDataSourceAttributes();\n        }\n    }\n    set matPaginator(mp) {\n        if (!this.paginator) {\n            this.paginator = mp;\n            this.setDataSourceAttributes();\n        }\n    }\n    set lines(lines) {\n        this.updateData(lines);\n    }\n    set footer(footer) {\n        if (footer) {\n            this.updateFooter(footer);\n        }\n    }\n    set selectionMode(selectionMode) {\n        this.selection = new SelectionModel(selectionMode);\n    }\n    constructor(translate, adapter, fb, ref, dialog, sanitizer, _adapter, \n    //@Inject('tableService') public tableService: DefaultKlesTableService\n    tableService) {\n        this.translate = translate;\n        this.adapter = adapter;\n        this.fb = fb;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.tableService = tableService;\n        this.sortDefault = false;\n        this._onDestroy = new Subject();\n        this._onLinesChanges = new Subject();\n        this._lines = [];\n        this._footer = {};\n        this.columns = signal([]);\n        this.options = {\n            verticalSeparator: true,\n            capitalisedHeader: true,\n            highlightRowOnHover: true,\n            elevation: 5\n        };\n        this.hidePaginator = false;\n        this.pageSize = 10;\n        this.pageSizeOptions = [5, 10, 20, 25, 50];\n        this.showFooter = false;\n        this.dragDropRows = false;\n        this.dragDropRowsOptions = { autoScrollStep: 5 };\n        this.ngClassRow = ((row) => ({ 'highlight-on-hover': this.options.highlightRowOnHover }));\n        this.multiTemplate = false;\n        this.templates = [];\n        /** Output Component */\n        this._onLoaded = new EventEmitter();\n        this._onSelected = new EventEmitter();\n        this._onChangeHeaderCell = new EventEmitter();\n        this._onChangeCell = new EventEmitter();\n        this._onChangeFooterCell = new EventEmitter();\n        this._onStatusHeaderChange = new EventEmitter();\n        this._onStatusLineChange = new EventEmitter();\n        this._onStatusCellChange = new EventEmitter();\n        this._onClick = new EventEmitter();\n        this._onDragDropRow = new EventEmitter();\n        this.dataSource = new MatTableDataSource([]);\n        this.selection = new SelectionModel(true);\n        this.displayedColumns = computed(() => this.columns().filter(e => e.visible).map(c => c.columnDef));\n        this.tableService.setTable(this);\n    }\n    ngOnDestroy() {\n        this._onLinesChanges.next();\n        this._onDestroy.next();\n        this._onLinesChanges.complete();\n        this._onDestroy.complete();\n    }\n    ngOnInit() {\n        this.dataSource.connect().subscribe(d => {\n            this.renderedData = d;\n        });\n        this.formHeader = this.initFormHeader();\n        this.formFooter = this.initFormFooter();\n    }\n    ngOnChanges(changes) {\n        // console.log('changes', changes);\n        // if (changes.columns) {\n        //     this.columns = changes.columns.currentValue;\n        //     this.formHeader = this.initFormHeader();\n        // }\n        // if (changes.lines) {\n        //     this.updateData(changes.lines.currentValue);\n        // }\n        // if (changes.selectionMode) {\n        //     this.selectionMode = changes.selectionMode.currentValue;\n        //     this.selection = new SelectionModel<any>(this.selectionMode);\n        // }\n        // if (changes.footer) {\n        // }\n    }\n    ngAfterViewInit() {\n        this.matTable?.updateStickyColumnStyles();\n    }\n    trackById(index, item) {\n        return item;\n    }\n    /** Form Header */\n    initFormHeader() {\n        const group = this.fb.group({});\n        this.columns().forEach(column => {\n            const colCellHeader = _.cloneDeep(column.headerCell);\n            colCellHeader.name = column.columnDef;\n            const control = this.buildControlField(colCellHeader, colCellHeader.value || '');\n            control.valueChanges.pipe(takeUntil(this._onDestroy), debounceTime(colCellHeader.debounceTime || 0)).subscribe(e => {\n                const group = control.parent;\n                this._onChangeHeaderCell.emit({ column, group });\n                this.tableService.onHeaderCellChange({ column, group });\n            });\n            group.addControl(colCellHeader.name, control);\n        });\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\n            this.tableService.onHeaderChange(e);\n        });\n        group.statusChanges.subscribe(e => {\n            this.tableService.onStatusHeaderChange(e);\n            this._onStatusHeaderChange.emit(e);\n        });\n        return group;\n    }\n    /** Form Array Line Table */\n    initFormArray() {\n        this.lineFields = [];\n        this._onLinesChanges.next();\n        const array = this.fb.array(this._lines.map((row) => {\n            return this.addFormLine(row);\n        }));\n        return array;\n    }\n    addFormLine(row) {\n        const group = this.fb.group({});\n        const idControl = this.fb.control(row._id);\n        const indexControl = this.fb.control(row._index);\n        const unfoldControl = this.fb.control(row._unfold || false);\n        group.addControl('_id', idControl);\n        group.addControl('_index', indexControl);\n        group.addControl('_unfold', unfoldControl);\n        const listField = [];\n        this.columns().forEach(column => {\n            column.cell.name = column.columnDef;\n            const colCell = _.cloneDeep(column.cell);\n            const control = this.buildControlField(colCell, row.value[colCell.name]);\n            listField.push(colCell);\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            })).subscribe(e => {\n                const group = control.parent;\n                this.tableService.onCellChange({ column, row: { ...group.value, [colCell.name]: e.value }, group, response: e.response });\n                this._onChangeCell.emit({ column, row: { ...group.value, [colCell.name]: e.value }, group, response: e.response });\n            });\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\n                const group = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group, status });\n                this._onStatusCellChange.emit({ cell: control, group, status });\n            });\n            group.addControl(column.cell.name, control);\n        });\n        this.lineFields.push(listField);\n        if (this.multiTemplate) {\n            if (this.templateUnfold) {\n                this.templateUnfold.cells.forEach((cell) => {\n                    const field = _.cloneDeep(cell);\n                    const control = this.buildControlField(field, row.value[cell.name]);\n                    group.addControl(cell.name, control);\n                });\n            }\n            if (this.templates?.length) {\n                this.templates.forEach(template => {\n                    template.cells.forEach((cell) => {\n                        const field = _.cloneDeep(cell);\n                        const control = this.buildControlField(field, row.value[cell.name]);\n                        group.addControl(cell.name, control);\n                    });\n                });\n            }\n        }\n        group.setValidators(this.lineValidations);\n        group.setAsyncValidators(this.lineAsyncValidations);\n        group.valueChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(value => {\n            this.tableService.onLineChange({ group, row, value });\n        });\n        group.statusChanges.subscribe(status => {\n            this.tableService.onStatusLineChange({ group, row, status });\n            this._onStatusLineChange.emit({ group, row, status });\n        });\n        return group;\n    }\n    updateFormCell(index, cell) {\n        const cellIndex = this.lineFields[index].findIndex(field => field.name === cell.name);\n        const column = this.columns().find(col => col.columnDef === cell.name);\n        const group = (this.form.controls.rows.controls\n            .find((c) => c.controls._index.value === index));\n        if (cellIndex >= 0 && column && group) {\n            this.lineFields[index][cellIndex] = _.cloneDeep(cell);\n            const colCell = _.cloneDeep(cell);\n            const control = this.buildControlField(colCell, group.value[cell.name] || cell.value);\n            group.setControl(cell.name, control);\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            }))\n                // distinctUntilChanged((prev, curr) => {\n                //     if (column.cell?.property && prev && curr) {\n                //         return prev[column.cell.property] === curr[column.cell.property];\n                //     }\n                //     return prev === curr;\n                // }))\n                .subscribe(e => {\n                const parent = control.parent;\n                this.tableService.onCellChange({ column, row: { ...parent.value, [cell.name]: e.value }, group: parent, response: e.response });\n                this._onChangeCell.emit({ column, row: { ...parent.value, [cell.name]: e.value }, group: parent, response: e.response });\n            });\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\n                const parent = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group: parent, status });\n                this._onStatusCellChange.emit({ cell: control, group: parent, status });\n            });\n            this.ref.markForCheck();\n        }\n    }\n    /** Form Footer */\n    initFormFooter() {\n        const group = this.fb.group({});\n        this.columns()\n            .filter((column) => column.footerCell)\n            .forEach(column => {\n            const colCellFooter = column.footerCell;\n            colCellFooter.name = column.columnDef;\n            const control = this.buildControlField(colCellFooter, this._footer[colCellFooter.name]);\n            control.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\n                const parent = control.parent;\n                const change = { column, group: parent };\n                this._onChangeFooterCell.emit(change);\n                this.tableService.onFooterCellChange(change);\n            });\n            group.addControl(colCellFooter.name, control);\n        });\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\n            this.tableService.onFooterChange(e);\n        });\n        return group;\n    }\n    /**Field and control */\n    buildControlField(field, value) {\n        const asyncValidations = field.asyncValidations?.map(asyncValisation => {\n            const klesValidator = { ...asyncValisation };\n            const validatorFn = ((c) => {\n                const validator$ = klesValidator.validator(c);\n                if (validator$ instanceof Promise) {\n                    return validator$.finally(() => this.ref.markForCheck());\n                }\n                else {\n                    return validator$.pipe(tap(() => this.ref.markForCheck()));\n                }\n            });\n            asyncValisation.validator = validatorFn;\n            return asyncValisation;\n        }) || [];\n        if (field.type) {\n            return componentMapper.find(c => c.type === field.type)?.factory({ ...field, value, asyncValidations }) || klesFieldControlFactory({ ...field, value, asyncValidations });\n        }\n        else {\n            return componentMapper.find(c => c.component === field.component)?.factory({ ...field, value, asyncValidations }) || klesFieldControlFactory({ ...field, value, asyncValidations });\n        }\n    }\n    getFormArray() {\n        return this.form.get('rows');\n    }\n    getFilterFormArray() {\n        // return this.fb.array(this.renderedData);\n        return this.renderedData;\n    }\n    getActualIndex(index) {\n        if (this.paginator && !this.hidePaginator) {\n            return index + this.paginator.pageSize * this.paginator.pageIndex;\n        }\n        return index;\n    }\n    getControls(index) {\n        //console.log('GetControls index=', index, \"=\", (this.form.get('rows') as FormArray).controls);\n        //(this.form.get('rows') as FormArray).push\n        //(this.form.get('rows') as FormArray).removeAt(index)\n        //return (this.form.get('rows') as FormArray).controls[index];\n        // return this.getFilterFormArray().controls[this.getActualIndex(index)];\n        // return this.getFilterFormArray().controls[index];\n        return this.getFilterFormArray()[index];\n    }\n    getLineFields(index, key) {\n        // return this.lineFields[this.getActualIndex(index)].find(f => f.name === key);\n        return this.lineFields[index].find(f => f.name === key);\n    }\n    /**Manage Data */\n    /**\n* Method to set the data lines to datasource table\n*/\n    setItems() {\n        this.form = this.fb.group({\n            rows: this.initFormArray()\n        });\n        this.dataSource.data = this.getFormArray().controls;\n        this.dataSource.filteredData = this.getFormArray().controls;\n        this._onLoaded.emit();\n        this.tableService.onDataLoaded();\n    }\n    updateFooter(footer) {\n        this._footer = { ...footer };\n        this.formFooter = this.initFormFooter();\n    }\n    updateData(lines) {\n        this._lines = lines.map((l, index) => {\n            const data = { ...l };\n            const options = data.options;\n            const _id = l._id || uuid.v4();\n            const _unfold = l._unfold || false;\n            const _index = index;\n            delete data._id;\n            delete data.options;\n            return {\n                _id,\n                _unfold,\n                _index,\n                ...options && { options },\n                value: data,\n            };\n        });\n        this.setItems();\n    }\n    setDataSourceAttributes() {\n        if (!this.hidePaginator) {\n            this.dataSource.paginator = this.paginator;\n        }\n        else {\n            this.dataSource.paginator = null;\n        }\n        if (this.sort) {\n            this.dataSource.sort = this.sort;\n            this.tableService.setTable(this);\n            this.dataSource.sortingDataAccessor = this.tableService.getSortingDataAccessor;\n            if (this.paginator && !this.hidePaginator) {\n                this.sort.sortChange.subscribe(() => {\n                    this.paginator.pageIndex = 0;\n                });\n            }\n            if (!this.sortDefault && this.sortConfig) {\n                // console.log('Active default sort');\n                this.sort.active = this.sortConfig.active;\n                this.sort.direction = this.sortConfig.direction;\n                this.sort.sortChange.emit(this.sortConfig);\n                this.sortDefault = !this.sortDefault;\n            }\n        }\n    }\n    getSelectedLines() {\n        return this.getFormArray().controls.filter(f => this.selection.isSelected(f));\n    }\n    /** Table rendering */\n    /**\n     * Method to rendering cell color\n     * @param row\n     * @param column\n     */\n    getCellStyle(row, column) {\n        return this.tableService.getCellStyle(row, column);\n    }\n    getFooterStyle(column) {\n        return this.tableService.getFooterStyle(column);\n    }\n    /**\n     * Method to check if column is sticky\n     * @param column\n     */\n    // isSticky(column: KlesColumnConfig): boolean {\n    //     console.log('isSticky')\n    //     return column.sticky || false;\n    // }\n    formatElevation() {\n        return `mat-elevation-z${this.options.elevation}`;\n    }\n    isSortingDisabled(column) {\n        return column.sortable || false;\n    }\n    setVisible(name, visible) {\n        this.columns.update((columns) => {\n            const column = columns.find(col => col.columnDef === name);\n            if (column) {\n                column.visible = visible;\n            }\n            return columns;\n        });\n    }\n    pageChanged(event) {\n        this.tableService.onPageChange(event);\n    }\n    getTemplateColumns(template) {\n        return template.cells.map(c => c.name);\n    }\n    onClick(row) {\n        this._onClick.emit(row);\n        this.tableService.onClick(row);\n    }\n    drop(event) {\n        this.tableService.drop(event);\n    }\n    sortPredicate() {\n        return ((index, item) => {\n            return this.tableService?.getSortPredicate(index, item);\n        });\n    }\n    static { this.ɵfac = function KlesTableComponent_Factory(t) { return new (t || KlesTableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesTableComponent, selectors: [[\"app-kles-dynamictable\"]], viewQuery: function KlesTableComponent_Query(rf, ctx) { if (rf & 1) {\n            i0.ɵɵviewQuery(MatSort, 5);\n            i0.ɵɵviewQuery(MatPaginator, 7);\n            i0.ɵɵviewQuery(MatTable, 5);\n        } if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matSort = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matPaginator = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matTable = _t.first);\n        } }, inputs: { id: \"id\", _lines: \"_lines\", lines: \"lines\", _footer: \"_footer\", footer: \"footer\", columns: \"columns\", selectionMode: \"selectionMode\", options: \"options\", sortConfig: \"sortConfig\", hidePaginator: \"hidePaginator\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", showFooter: \"showFooter\", dragDropRows: \"dragDropRows\", dragDropRowsOptions: \"dragDropRowsOptions\", lineValidations: \"lineValidations\", lineAsyncValidations: \"lineAsyncValidations\", ngClassRow: \"ngClassRow\", multiTemplate: \"multiTemplate\", templates: \"templates\", templateUnfold: \"templateUnfold\" }, outputs: { _onLoaded: \"_onLoaded\", _onSelected: \"_onSelected\", _onChangeHeaderCell: \"_onChangeHeaderCell\", _onChangeCell: \"_onChangeCell\", _onChangeFooterCell: \"_onChangeFooterCell\", _onStatusHeaderChange: \"_onStatusHeaderChange\", _onStatusLineChange: \"_onStatusLineChange\", _onStatusCellChange: \"_onStatusCellChange\", _onClick: \"_onClick\", _onDragDropRow: \"_onDragDropRow\" }, features: [i0.ɵɵProvidersFeature([\n                { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                {\n                    provide: DateAdapter,\n                    useClass: MomentDateAdapter,\n                    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                },\n                { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n            ]), i0.ɵɵNgOnChangesFeature], decls: 13, vars: 25, consts: [[\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"id\", \"dataSource\", \"ngClass\", \"trackBy\", \"multiTemplateDataRows\", \"cdkDropListData\", \"cdkDropListDisabled\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [3, \"cdkColumnDef\", \"sticky\", 4, \"ngFor\", \"ngForOf\"], [3, \"matColumnDef\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"], [\"paginator\", \"\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\", 4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"siblingFields\", \"column\", \"config\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-row\", \"\", 3, \"ngClass\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-row\", \"\", 3, \"ngClass\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesTableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesTableComponent_Template_table_cdkDropListDropped_1_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(2, \"elevationPipe\");\n            i0.ɵɵtemplate(3, KlesTableComponent_ng_container_3_Template, 6, 3, \"ng-container\", 2)(4, KlesTableComponent_Conditional_4_Template, 1, 1, \"ng-container\", 3)(5, KlesTableComponent_ng_container_5_Template, 2, 1, \"ng-container\", 4)(6, KlesTableComponent_tr_6_Template, 1, 0, \"tr\", 5)(7, KlesTableComponent_tr_7_Template, 5, 10, \"tr\", 6)(8, KlesTableComponent_Conditional_8_Template, 2, 2, \"ng-container\")(9, KlesTableComponent_Conditional_9_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(10, \"div\", 7)(11, \"mat-paginator\", 8, 9);\n            i0.ɵɵlistener(\"page\", function KlesTableComponent_Template_mat_paginator_page_11_listener($event) { return ctx.pageChanged($event); });\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"id\", ctx.id)(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(2, 23, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate())(\"cdkDropListConnectedTo\", ctx.dragDropRowsOptions.connectedTo);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.columns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(4, ctx.templateUnfold && ctx.multiTemplate ? 4 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.templates);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(8, ctx.multiTemplate ? 8 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(9, ctx.showFooter ? 9 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i8.NgForOf, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.size-16[_ngcontent-%COMP%]{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}  .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-dynamictable', animations: [rowsAnimation], providers: [\n                    { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                    {\n                        provide: DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    },\n                    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n                ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n  <table [id]=\\\"id\\\" mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n    formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" [multiTemplateDataRows]=\\\"multiTemplate\\\"\\r\\n    cdkDropList (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n    [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\" [cdkDropListSortPredicate]=\\\"sortPredicate()\\\"\\r\\n    [cdkDropListConnectedTo]=\\\"dragDropRowsOptions.connectedTo\\\">\\r\\n    <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n\\r\\n      <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n        <div style=\\\"display: inline-flex;\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n          </ng-container>\\r\\n        </div>\\r\\n      </th>\\r\\n      <div>\\r\\n        @if (multiTemplate) {\\r\\n          <td mat-cell *cdkCellDef=\\\"let row;let index = dataIndex;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n            [ngClass]=\\\"column | cellPipe\\\">\\r\\n            <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\" [group]=\\\"index | groupPipe\\\"\\r\\n              [siblingFields]=\\\"lineFields[index]\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n          </td>\\r\\n        }\\r\\n        @else {\\r\\n          <td mat-cell *cdkCellDef=\\\"let row;let index = index;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n            [ngClass]=\\\"column | cellPipe\\\">\\r\\n            <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\" [group]=\\\"index | groupPipe\\\"\\r\\n              [siblingFields]=\\\"lineFields[row.value._index]\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n          </td>\\r\\n        }\\r\\n\\r\\n        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n          @if (column.footerCell) {\\r\\n            <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n            </ng-container>\\r\\n          }\\r\\n        </td>\\r\\n      </div>\\r\\n\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    @if (templateUnfold && multiTemplate) {\\r\\n      <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n          [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n          [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n            [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n          </ng-container>\\r\\n        </td>\\r\\n      </ng-container>\\r\\n    }\\r\\n\\r\\n    <ng-container *ngFor=\\\"let template of templates\\\">\\r\\n      <ng-container *ngFor=\\\"let cell of template.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n          [attr.colspan]=\\\"cell.colspan | spanPipe: displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n          [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\">\\r\\n          </ng-container>\\r\\n        </td>\\r\\n      </ng-container>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n    <tr mat-row [ngClass]=\\\"(row | rowPipe)\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\" (click)=\\\"onClick(row)\\\"\\r\\n      cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\" [@rowsAnimation]=\\\"\\\">\\r\\n\\r\\n      @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n        <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n          <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n          </ng-container>\\r\\n        </ng-template>\\r\\n      }\\r\\n\\r\\n      @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n        <ng-template cdkDragPlaceholder>\\r\\n          <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\" [value]=\\\"row\\\">\\r\\n          </ng-container>\\r\\n        </ng-template>\\r\\n      }\\r\\n    </tr>\\r\\n\\r\\n    @if (multiTemplate) {\\r\\n      @if (templateUnfold) {\\r\\n        <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\"></tr>\\r\\n      }\\r\\n\\r\\n      <ng-container *ngFor=\\\"let template of templates\\\">\\r\\n        <tr mat-row [ngClass]=\\\"row | rowPipe\\\" [@rowsAnimation]=\\\"\\\"\\r\\n          *matRowDef=\\\"let row; columns: getTemplateColumns(template); when: template.when\\\"></tr>\\r\\n      </ng-container>\\r\\n    }\\r\\n\\r\\n    @if (showFooter) {\\r\\n      <div>\\r\\n        <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n        </tr>\\r\\n      </div>\\r\\n    }\\r\\n  </table>\\r\\n\\r\\n</form>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n  <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n    (page)=\\\"pageChanged($event)\\\">\\r\\n  </mat-paginator>\\r\\n</div> \", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-cell,.mat-mdc-footer-cell{text-align:center}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}.value-cell{display:flex;align-items:left}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}::ng-deep .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row{font-weight:700}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: AbstractKlesTableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], { matSort: [{\n            type: ViewChild,\n            args: [MatSort, { static: false }]\n        }], matPaginator: [{\n            type: ViewChild,\n            args: [MatPaginator, { static: true }]\n        }], matTable: [{\n            type: ViewChild,\n            args: [MatTable]\n        }], id: [{\n            type: Input\n        }], _lines: [{\n            type: Input\n        }], lines: [{\n            type: Input\n        }], _footer: [{\n            type: Input\n        }], footer: [{\n            type: Input\n        }], columns: [{\n            type: Input\n        }], selectionMode: [{\n            type: Input\n        }], options: [{\n            type: Input\n        }], sortConfig: [{\n            type: Input\n        }], hidePaginator: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], pageSizeOptions: [{\n            type: Input\n        }], showFooter: [{\n            type: Input\n        }], dragDropRows: [{\n            type: Input\n        }], dragDropRowsOptions: [{\n            type: Input\n        }], lineValidations: [{\n            type: Input\n        }], lineAsyncValidations: [{\n            type: Input\n        }], ngClassRow: [{\n            type: Input\n        }], multiTemplate: [{\n            type: Input\n        }], templates: [{\n            type: Input\n        }], templateUnfold: [{\n            type: Input\n        }], _onLoaded: [{\n            type: Output\n        }], _onSelected: [{\n            type: Output\n        }], _onChangeHeaderCell: [{\n            type: Output\n        }], _onChangeCell: [{\n            type: Output\n        }], _onChangeFooterCell: [{\n            type: Output\n        }], _onStatusHeaderChange: [{\n            type: Output\n        }], _onStatusLineChange: [{\n            type: Output\n        }], _onStatusCellChange: [{\n            type: Output\n        }], _onClick: [{\n            type: Output\n        }], _onDragDropRow: [{\n            type: Output\n        }] }); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesTableComponent, { className: \"KlesTableComponent\", filePath: \"lib\\\\component\\\\table\\\\table.component.ts\", lineNumber: 48 }); })();\n\nclass AbstractKlesLazyTableService extends AbstractKlesTableService {\n}\n\nconst _forTrack0$1 = ($index, $item) => $item.columnDef;\nfunction KlesLazyTableComponent_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"mat-spinner\");\n    i0.ɵɵelementEnd();\n} }\nconst _c1 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesLazyTableComponent_For_6_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15)(1, \"div\", 16);\n    i0.ɵɵelementContainer(2, 17);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r8.ngClass);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r8.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c1, ctx_r11.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r8.headerCell)(\"group\", ctx_r11.formHeader);\n} }\nconst _c2 = a0 => ({ templateUnfold: a0 });\nfunction KlesLazyTableComponent_For_6_Conditional_3_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 20);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r17 = ctx.$implicit;\n    const index_r18 = ctx.dataIndex;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r16.getCellStyle(row_r17, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r17.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r18))(\"siblingFields\", ctx_r16.lineFields[row_r17.value._index])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c2, ctx_r16.templateUnfold));\n} }\nfunction KlesLazyTableComponent_For_6_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_For_6_Conditional_3_td_0_Template, 5, 17, \"td\", 18);\n} }\nfunction KlesLazyTableComponent_For_6_Conditional_4_td_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵpipe(1, \"cellPipe\");\n    i0.ɵɵelementContainer(2, 20);\n    i0.ɵɵpipe(3, \"fieldPipe\");\n    i0.ɵɵpipe(4, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r21 = ctx.$implicit;\n    const index_r22 = ctx.index;\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r20.getCellStyle(row_r21, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(3, 10, column_r8, row_r21.value._index))(\"group\", i0.ɵɵpipeBind1(4, 13, index_r22))(\"siblingFields\", ctx_r20.lineFields[row_r21.value._index])(\"column\", column_r8)(\"config\", i0.ɵɵpureFunction1(15, _c2, ctx_r20.templateUnfold));\n} }\nfunction KlesLazyTableComponent_For_6_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_For_6_Conditional_4_td_0_Template, 5, 17, \"td\", 18);\n} }\nfunction KlesLazyTableComponent_For_6_td_5_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 17);\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r24 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r8.footerCell)(\"group\", ctx_r24.formFooter);\n} }\nfunction KlesLazyTableComponent_For_6_td_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_For_6_td_5_Conditional_1_Template, 1, 2, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r14.getFooterStyle(column_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r8.footerCell ? 1 : -1);\n} }\nfunction KlesLazyTableComponent_For_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 11);\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_For_6_th_1_Template, 3, 9, \"th\", 12);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtemplate(3, KlesLazyTableComponent_For_6_Conditional_3_Template, 1, 0, \"td\", 13)(4, KlesLazyTableComponent_For_6_Conditional_4_Template, 1, 0)(5, KlesLazyTableComponent_For_6_td_5_Template, 2, 3, \"td\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r8 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r8.columnDef)(\"sticky\", column_r8.sticky || false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, ctx_r1.multiTemplate ? 3 : 4);\n} }\nconst _forTrack3 = ($index, $item) => $item.name;\nfunction KlesLazyTableComponent_Conditional_7_For_1_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 24);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r32 = ctx.$implicit;\n    const index_r33 = ctx.dataIndex;\n    const cell_r28 = i0.ɵɵnextContext().$implicit;\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c1, ctx_r31.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 6, cell_r28.colspan, ctx_r31.displayedColumns().length))(\"rowspan\", cell_r28.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r28)(\"group\", i0.ɵɵpipeBind1(3, 9, index_r33))(\"siblingFields\", ctx_r31.lineFields[row_r32.value._index]);\n} }\nfunction KlesLazyTableComponent_Conditional_7_For_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 22);\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_Conditional_7_For_1_td_1_Template, 4, 13, \"td\", 23);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r28 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r28.name);\n} }\nfunction KlesLazyTableComponent_Conditional_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, KlesLazyTableComponent_Conditional_7_For_1_Template, 2, 1, \"ng-container\", 22, _forTrack3);\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵrepeater(0, ctx_r2.templateUnfold.cells);\n} }\nfunction KlesLazyTableComponent_tr_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 25);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 29);\n} if (rf & 2) {\n    const row_r35 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r38 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r38.dragDropRowsOptions == null ? null : ctx_r38.dragDropRowsOptions.dragPreview == null ? null : ctx_r38.dragDropRowsOptions.dragPreview.component)(\"value\", row_r35);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_tr_9_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 27);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 29);\n} if (rf & 2) {\n    const row_r35 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r40 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r40.dragDropRowsOptions == null ? null : ctx_r40.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r40.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r35);\n} }\nfunction KlesLazyTableComponent_tr_9_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_tr_9_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 28);\n} }\nfunction KlesLazyTableComponent_tr_9_Template(rf, ctx) { if (rf & 1) {\n    const _r43 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 26);\n    i0.ɵɵlistener(\"click\", function KlesLazyTableComponent_tr_9_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r43); const row_r35 = restoredCtx.$implicit; const ctx_r42 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r42.onClick(row_r35)); });\n    i0.ɵɵpipe(1, \"rowPipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesLazyTableComponent_tr_9_Conditional_3_Template, 1, 1, null, 27)(4, KlesLazyTableComponent_tr_9_Conditional_4_Template, 1, 0, null, 28);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r35 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 6, row_r35))(\"@rowsAnimation\", undefined)(\"cdkDragData\", row_r35)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 8, row_r35));\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPreview == null ? null : ctx_r4.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesLazyTableComponent_Conditional_10_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 6);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesLazyTableComponent_Conditional_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTableComponent_Conditional_10_tr_0_Template, 1, 1, \"tr\", 30);\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r5.getTemplateColumns(ctx_r5.templateUnfold))(\"matRowDefWhen\", ctx_r5.tableService.unfoldPredicate);\n} }\nfunction KlesLazyTableComponent_Conditional_11_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 32);\n} }\nfunction KlesLazyTableComponent_Conditional_11_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesLazyTableComponent_Conditional_11_tr_1_Template, 1, 0, \"tr\", 31);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r6.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesLazyTableComponent extends KlesTableComponent {\n    constructor(translate, adapter, fb1, ref, dialog, sanitizer, _adapter, tableService) {\n        super(translate, adapter, fb1, ref, dialog, sanitizer, _adapter, tableService);\n        this.translate = translate;\n        this.adapter = adapter;\n        this.fb1 = fb1;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.tableService = tableService;\n        this.loading = signal(false);\n        this.filteredValues$ = new BehaviorSubject({});\n        this.reload$ = new Subject();\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.filteredValues$.next(this.columns()\n            .filter(column => column.filterable)\n            .map(column => {\n            return { [column.columnDef]: this.formHeader.controls[column.columnDef].value };\n        })\n            .reduce((a, b) => ({ ...a, ...b }), {}));\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        merge(this.sort.sortChange, this.filteredValues$.pipe(debounceTime(500)), this.reload$)\n            .subscribe(() => this.paginator.pageIndex = 0);\n        merge(this.reload$, this.sort.sortChange.pipe(distinctUntilChanged()), this.paginator.page.pipe(distinctUntilChanged()), this.filteredValues$.pipe(debounceTime(500)))\n            .pipe(takeUntil(this._onDestroy), switchMap(() => {\n            return concat(of({ loading: true, value: { lines: [], totalCount: 0, footer: {}, header: {} } }), this.tableService.load(this.sort.active, this.sort.direction, this.paginator.pageIndex, this.paginator.pageSize, this.filteredValues$.getValue()).pipe(map(value => ({ loading: false, value })), catchError((err) => {\n                console.error(err);\n                return of({ loading: false, value: { lines: [], totalCount: 0, footer: {}, header: {} } });\n            })));\n        }))\n            .subscribe((response) => {\n            if (response.loading) {\n                this.loading.set(true);\n            }\n            else {\n                this.loading.set(false);\n                if (this.showFooter && response.value.footer) {\n                    this.formFooter.patchValue(response.value.footer);\n                }\n                if (response.value.header) {\n                    this.formHeader.patchValue(response.value.header, { emitEvent: false });\n                }\n                this.updateData(response.value.lines);\n                this.paginator.length = response.value.totalCount;\n            }\n        });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    getLineFields(index, key) {\n        return this.lineFields[index].find(f => f.name === key);\n    }\n    setDataSourceAttributes() {\n        if (this.sort) {\n            if (this.paginator && !this.hidePaginator) {\n                this.sort.sortChange.subscribe(() => {\n                    this.paginator.pageIndex = 0;\n                });\n            }\n            if (this.sortConfig) {\n                this.sort.active = this.sortConfig.active;\n                this.sort.direction = this.sortConfig.direction;\n                this.sort.sortChange.emit(this.sortConfig);\n                // this.sortDefault = !this.sortDefault;\n            }\n        }\n        this.tableService.setTable(this);\n    }\n    static { this.ɵfac = function KlesLazyTableComponent_Factory(t) { return new (t || KlesLazyTableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesLazyTableComponent, selectors: [[\"app-kles-lazytable\"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 15, vars: 24, consts: [[2, \"position\", \"relative\"], [\"class\", \"loading\"], [\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"id\", \"dataSource\", \"ngClass\", \"trackBy\", \"cdkDropListData\", \"cdkDropListDisabled\", \"multiTemplateDataRows\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-row\", \"\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"], [\"paginator\", \"\"], [1, \"loading\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-cell\", \"\", 3, \"style\", \"ngClass\", 4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicCell\", \"\", 3, \"field\", \"group\", \"siblingFields\", \"column\", \"config\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesLazyTableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, KlesLazyTableComponent_Conditional_1_Template, 2, 0, \"div\", 1);\n            i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesLazyTableComponent_Template_table_cdkDropListDropped_3_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(4, \"elevationPipe\");\n            i0.ɵɵrepeaterCreate(5, KlesLazyTableComponent_For_6_Template, 6, 3, \"ng-container\", 11, _forTrack0$1);\n            i0.ɵɵtemplate(7, KlesLazyTableComponent_Conditional_7_Template, 2, 0)(8, KlesLazyTableComponent_tr_8_Template, 1, 0, \"tr\", 4)(9, KlesLazyTableComponent_tr_9_Template, 5, 10, \"tr\", 5)(10, KlesLazyTableComponent_Conditional_10_Template, 1, 2, \"tr\", 6)(11, KlesLazyTableComponent_Conditional_11_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(12, \"div\", 7)(13, \"mat-paginator\", 8, 9);\n            i0.ɵɵlistener(\"page\", function KlesLazyTableComponent_Template_mat_paginator_page_13_listener($event) { return ctx.pageChanged($event); });\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(1, ctx.loading() ? 1 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"id\", ctx.id)(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(4, 22, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate())(\"cdkDropListConnectedTo\", ctx.dragDropRowsOptions.connectedTo);\n            i0.ɵɵrepeater(5, ctx.columns());\n            i0.ɵɵadvance(4);\n            i0.ɵɵconditional(7, ctx.templateUnfold && ctx.multiTemplate ? 7 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(10, ctx.multiTemplate && ctx.templateUnfold ? 10 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(11, ctx.showFooter ? 11 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i3.MatProgressSpinner, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:last-of-type{padding-right:0!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.size-16[_ngcontent-%COMP%]{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}  .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}.loading[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesLazyTableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-lazytable', animations: [rowsAnimation], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div style=\\\"position: relative;\\\">\\r\\n    @if (loading()) {\\r\\n        <div class=\\\"loading\\\">\\r\\n            <mat-spinner></mat-spinner>\\r\\n        </div>\\r\\n    }\\r\\n    <form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n        <table [id]=\\\"id\\\" mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n            formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n            (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n            [multiTemplateDataRows]=\\\"multiTemplate\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n            [cdkDropListSortPredicate]=\\\"sortPredicate()\\\" [cdkDropListConnectedTo]=\\\"dragDropRowsOptions.connectedTo\\\">\\r\\n            @for (column of columns(); track column.columnDef) {\\r\\n                <ng-container [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.ngClass}}\\\"\\r\\n                        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                        <div style=\\\"display: inline-flex;\\\">\\r\\n                            <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </th>\\r\\n                    <div>\\r\\n                        @if (multiTemplate) {\\r\\n                            <td mat-cell *cdkCellDef=\\\"let row;let index = dataIndex;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [siblingFields]=\\\"lineFields[row.value._index]\\\"\\r\\n                                    [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        }\\r\\n                        @else {\\r\\n                            <td mat-cell *cdkCellDef=\\\"let row;let index = index;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [siblingFields]=\\\"lineFields[row.value._index]\\\"\\r\\n                                    [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        }\\r\\n\\r\\n                        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                            @if (column.footerCell) {\\r\\n                                <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                                </ng-container>\\r\\n                            }\\r\\n                        </td>\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            }\\r\\n\\r\\n            @if (templateUnfold && multiTemplate) {\\r\\n                @for (cell of templateUnfold.cells; track cell.name) {\\r\\n                    <ng-container [matColumnDef]=\\\"cell.name\\\">\\r\\n                        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                            [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                            [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                            <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n                                [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n                            </ng-container>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                }\\r\\n            }\\r\\n\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n            <tr mat-row [ngClass]=\\\"row | rowPipe\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\" [@rowsAnimation]=\\\"\\\"\\r\\n                (click)=\\\"onClick(row)\\\" cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\">\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                    <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                    <ng-template cdkDragPlaceholder>\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\"\\r\\n                            [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n            </tr>\\r\\n\\r\\n            @if (multiTemplate && templateUnfold) {\\r\\n                <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n                </tr>\\r\\n            }\\r\\n\\r\\n            @if (showFooter) {\\r\\n                <div>\\r\\n                    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                    </tr>\\r\\n                </div>\\r\\n            }\\r\\n        </table>\\r\\n\\r\\n    </form>\\r\\n</div>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n        (page)=\\\"pageChanged($event)\\\">\\r\\n    </mat-paginator>\\r\\n</div>\", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-cell,.mat-mdc-footer-cell{text-align:center}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell:last-of-type,td.mat-mdc-cell:last-of-type,td.mat-mdc-footer-cell:last-of-type{padding-right:0!important}.value-cell{display:flex;align-items:left}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}::ng-deep .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row{font-weight:700}.loading{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: AbstractKlesLazyTableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesLazyTableComponent, { className: \"KlesLazyTableComponent\", filePath: \"lib\\\\component\\\\lazytable\\\\lazytable.component.ts\", lineNumber: 20 }); })();\n\nclass KlesFormTextHeaderComponent extends KlesFieldAbstract {\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesFormTextHeaderComponent_BaseFactory; return function KlesFormTextHeaderComponent_Factory(t) { return (ɵKlesFormTextHeaderComponent_BaseFactory || (ɵKlesFormTextHeaderComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesFormTextHeaderComponent)))(t || KlesFormTextHeaderComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesFormTextHeaderComponent, selectors: [[\"kles-form-textheader\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [[\"mat-sort-header\", \"\", 3, \"disabled\"]], template: function KlesFormTextHeaderComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n            i0.ɵɵtext(2);\n            i0.ɵɵpipe(3, \"translate\");\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"disabled\", !ctx.field.sortable);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, ctx.field.label));\n        } }, dependencies: [i11.MatSortHeader, i1$1.TranslatePipe], styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesFormTextHeaderComponent, [{\n        type: Component,\n        args: [{ selector: 'kles-form-textheader', template: `\r\n    <div mat-sort-header [disabled]=\"!field.sortable\"><span>{{ field.label | translate}}</span></div>\r\n    `, styles: [\"mat-form-field{width:100%}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesFormTextHeaderComponent, { className: \"KlesFormTextHeaderComponent\", filePath: \"lib\\\\component\\\\header\\\\textheader.component.ts\", lineNumber: 12 }); })();\n\nconst _forTrack0 = ($index, $item) => $item.name;\nfunction KlesFormTextHeaderFilterComponent_Conditional_5_For_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r7);\n} }\nfunction KlesFormTextHeaderFilterComponent_Conditional_5_Template(rf, ctx) { if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 4);\n    i0.ɵɵlistener(\"click\", function KlesFormTextHeaderFilterComponent_Conditional_5_Template_input_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.stopPropagation($event)); });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"mat-autocomplete\", null, 5);\n    i0.ɵɵrepeaterCreate(4, KlesFormTextHeaderFilterComponent_Conditional_5_For_5_Template, 2, 2, \"mat-option\", 6, i0.ɵɵrepeaterTrackByIdentity);\n    i0.ɵɵpipe(6, \"async\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r5 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx_r0.field.tooltip);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.field.ngClass)(\"formControlName\", ctx_r0.field.name)(\"placeholder\", i0.ɵɵpipeBind1(1, 7, ctx_r0.field.placeholder))(\"type\", ctx_r0.field.inputType)(\"matAutocomplete\", _r5);\n    i0.ɵɵattribute(\"id\", ctx_r0.field.id);\n    i0.ɵɵrepeater(4, i0.ɵɵpipeBind1(6, 9, ctx_r0.filteredOption));\n} }\nfunction KlesFormTextHeaderFilterComponent_Conditional_6_Template(rf, ctx) { if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 7);\n    i0.ɵɵlistener(\"click\", function KlesFormTextHeaderFilterComponent_Conditional_6_Template_input_click_0_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r12.stopPropagation($event)); });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"matTooltip\", ctx_r1.field.tooltip);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.field.ngClass)(\"formControlName\", ctx_r1.field.name)(\"placeholder\", i0.ɵɵpipeBind1(1, 6, ctx_r1.field.placeholder))(\"type\", ctx_r1.field.inputType);\n    i0.ɵɵattribute(\"id\", ctx_r1.field.id);\n} }\nfunction KlesFormTextHeaderFilterComponent_Conditional_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 3);\n} }\nfunction KlesFormTextHeaderFilterComponent_For_12_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const validation_r14 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, validation_r14.message));\n} }\nfunction KlesFormTextHeaderFilterComponent_For_12_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 8);\n    i0.ɵɵtemplate(1, KlesFormTextHeaderFilterComponent_For_12_Conditional_1_Template, 3, 3, \"mat-error\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const validation_r14 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r3.group.get(ctx_r3.field.name).hasError(validation_r14.name) ? 1 : -1);\n} }\nfunction KlesFormTextHeaderFilterComponent_For_14_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const validation_r19 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, validation_r19.message));\n} }\nfunction KlesFormTextHeaderFilterComponent_For_14_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 8);\n    i0.ɵɵtemplate(1, KlesFormTextHeaderFilterComponent_For_14_Conditional_1_Template, 3, 3, \"mat-error\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const validation_r19 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r4.group.get(ctx_r4.field.name).hasError(validation_r19.name) ? 1 : -1);\n} }\nclass KlesFormTextHeaderFilterComponent extends KlesFieldAbstract {\n    ngOnInit() {\n        if (this.field.options instanceof Observable) {\n            this.options$ = this.field.options;\n        }\n        else {\n            this.options$ = of(this.field.options);\n        }\n        this.filteredOption = this.group.get(this.field.name).valueChanges\n            .pipe(startWith(''), switchMap(data => data ? this.filterData(data) : this.options$));\n    }\n    isPending() {\n        return this.group.controls[this.field.name].pending;\n    }\n    filterData(value) {\n        let filterValue;\n        if (typeof value === 'string' && Object.prototype.toString.call(value) === '[object String]') {\n            filterValue = value.toLowerCase();\n        }\n        else {\n            filterValue = value[this.field.property].toLowerCase();\n        }\n        if (this.field.property) {\n            return this.options$\n                .pipe(map(options => options.filter(option => option[this.field.property].toLowerCase().indexOf(filterValue) === 0)));\n        }\n        return this.options$.pipe(map(options => options.filter(option => option.toLowerCase().indexOf(filterValue) === 0)));\n    }\n    stopPropagation(event) {\n        event.stopPropagation();\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesFormTextHeaderFilterComponent_BaseFactory; return function KlesFormTextHeaderFilterComponent_Factory(t) { return (ɵKlesFormTextHeaderFilterComponent_BaseFactory || (ɵKlesFormTextHeaderFilterComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesFormTextHeaderFilterComponent)))(t || KlesFormTextHeaderFilterComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesFormTextHeaderFilterComponent, selectors: [[\"kles-form-textheaderfilter\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 7, consts: [[\"mat-sort-header\", \"\", 3, \"disabled\"], [1, \"form-element\", 3, \"formGroup\"], [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [\"matSuffix\", \"\", \"mode\", \"indeterminate\", \"diameter\", \"17\"], [\"matInput\", \"\", 3, \"matTooltip\", \"ngClass\", \"formControlName\", \"placeholder\", \"type\", \"matAutocomplete\", \"click\"], [\"auto\", \"matAutocomplete\"], [3, \"value\"], [\"matInput\", \"\", 3, \"matTooltip\", \"ngClass\", \"formControlName\", \"placeholder\", \"type\", \"click\"], [\"ngProjectAs\", \"mat-error\", 5, [\"mat-error\"]]], template: function KlesFormTextHeaderFilterComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n            i0.ɵɵtext(2);\n            i0.ɵɵpipe(3, \"translate\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(4, \"mat-form-field\", 1);\n            i0.ɵɵtemplate(5, KlesFormTextHeaderFilterComponent_Conditional_5_Template, 7, 11)(6, KlesFormTextHeaderFilterComponent_Conditional_6_Template, 2, 8);\n            i0.ɵɵelementStart(7, \"button\", 2);\n            i0.ɵɵlistener(\"click\", function KlesFormTextHeaderFilterComponent_Template_button_click_7_listener($event) { ctx.group.controls[ctx.field.name].reset(\"\"); return ctx.stopPropagation($event); });\n            i0.ɵɵelementStart(8, \"mat-icon\");\n            i0.ɵɵtext(9, \"close\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(10, KlesFormTextHeaderFilterComponent_Conditional_10_Template, 1, 0, \"mat-spinner\", 3);\n            i0.ɵɵrepeaterCreate(11, KlesFormTextHeaderFilterComponent_For_12_Template, 2, 1, \"ng-container\", 8, _forTrack0);\n            i0.ɵɵrepeaterCreate(13, KlesFormTextHeaderFilterComponent_For_14_Template, 2, 1, \"ng-container\", 8, _forTrack0);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"disabled\", !ctx.field.sortable);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, ctx.field.label));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.group);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(5, ctx.field.autocomplete ? 5 : 6);\n            i0.ɵɵadvance(5);\n            i0.ɵɵconditional(10, ctx.isPending() ? 10 : -1);\n            i0.ɵɵrepeater(11, ctx.field.validations);\n            i0.ɵɵrepeater(13, ctx.field.asyncValidations);\n        } }, dependencies: [i8.NgClass, i1.MatButton, i1.MatIconButton, i2.MatIcon, i4$1.MatInput, i5$1.MatFormField, i5$1.MatError, i5$1.MatSuffix, i2$1.MatOption, i7$1.MatTooltip, i3.MatProgressSpinner, i9$1.MatAutocomplete, i9$1.MatAutocompleteTrigger, i11.MatSortHeader, i3$1.DefaultValueAccessor, i3$1.NgControlStatus, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormControlName, i8.AsyncPipe, i1$1.TranslatePipe], styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesFormTextHeaderFilterComponent, [{\n        type: Component,\n        args: [{ selector: 'kles-form-textheaderfilter', template: `\r\n    <div mat-sort-header [disabled]=\"!field.sortable\"><span>{{ field.label | translate}}</span></div>\r\n    <mat-form-field [formGroup]=\"group\" class=\"form-element\">\r\n        @if (field.autocomplete) {\r\n            <input matInput matTooltip=\"{{field.tooltip}}\" [attr.id]=\"field.id\" (click)=\"stopPropagation($event)\" [ngClass]=\"field.ngClass\" [formControlName]=\"field.name\" [placeholder]=\"field.placeholder | translate\" [type]=\"field.inputType\"\r\n            [matAutocomplete]=\"auto\">\r\n\r\n            <mat-autocomplete #auto=\"matAutocomplete\">\r\n                @for (option of filteredOption | async; track option) {\r\n                    <mat-option [value]=\"option\">{{option}}</mat-option>\r\n                }\r\n            </mat-autocomplete>\r\n        }\r\n        @else {\r\n            <input matInput matTooltip=\"{{field.tooltip}}\" [attr.id]=\"field.id\" (click)=\"stopPropagation($event)\" [ngClass]=\"field.ngClass\" [formControlName]=\"field.name\" [placeholder]=\"field.placeholder | translate\" [type]=\"field.inputType\">\r\n        }\r\n\r\n        <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"group.controls[field.name].reset(''); stopPropagation($event)\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n\r\n        @if (isPending()) {\r\n            <mat-spinner matSuffix mode=\"indeterminate\" diameter=\"17\"></mat-spinner>\r\n        }\r\n\r\n        @for (validation of field.validations; track validation.name) {\r\n            <ng-container ngProjectAs=\"mat-error\">\r\n                @if (group.get(field.name).hasError(validation.name)) {\r\n                    <mat-error>{{validation.message | translate}}</mat-error>\r\n                }\r\n            </ng-container>\r\n        }\r\n        @for (validation of field.asyncValidations; track validation.name) {\r\n            <ng-container ngProjectAs=\"mat-error\">\r\n                @if (group.get(field.name).hasError(validation.name)) {\r\n                    <mat-error>{{validation.message | translate}}</mat-error>\r\n                }\r\n            </ng-container>\r\n        }\r\n    </mat-form-field>\r\n    `, styles: [\"mat-form-field{width:100%}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesFormTextHeaderFilterComponent, { className: \"KlesFormTextHeaderFilterComponent\", filePath: \"lib\\\\component\\\\header\\\\textheaderfilter.component.ts\", lineNumber: 52 }); })();\n\nfunction KlesFormDynamicHeaderFilterComponent_Conditional_4_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function KlesFormDynamicHeaderFilterComponent_Conditional_4_Conditional_3_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r2.group.controls[ctx_r2.field.name].reset()); });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n} }\nfunction KlesFormDynamicHeaderFilterComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function KlesFormDynamicHeaderFilterComponent_Conditional_4_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.stopPropagation($event)); });\n    i0.ɵɵelementContainer(1, 3);\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtemplate(3, KlesFormDynamicHeaderFilterComponent_Conditional_4_Conditional_3_Template, 3, 0, \"button\", 5);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"component\", ctx_r0.field.filterComponent)(\"group\", ctx_r0.group)(\"field\", ctx_r0.filterField);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(3, ctx_r0.field.filterClearable && ctx_r0.group.get(ctx_r0.field.name).value ? 3 : -1);\n} }\nclass KlesFormDynamicHeaderFilterComponent extends KlesFieldAbstract {\n    ngOnInit() {\n        super.ngOnInit();\n        this.filterField = Object.assign({}, this.field);\n        delete this.filterField['label'];\n    }\n    stopPropagation(event) {\n        event.stopPropagation();\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵKlesFormDynamicHeaderFilterComponent_BaseFactory; return function KlesFormDynamicHeaderFilterComponent_Factory(t) { return (ɵKlesFormDynamicHeaderFilterComponent_BaseFactory || (ɵKlesFormDynamicHeaderFilterComponent_BaseFactory = i0.ɵɵgetInheritedFactory(KlesFormDynamicHeaderFilterComponent)))(t || KlesFormDynamicHeaderFilterComponent); }; })(); }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesFormDynamicHeaderFilterComponent, selectors: [[\"kles-form-textheaderfilter\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [[\"mat-sort-header\", \"\", 3, \"disabled\"], [\"style\", \"display: inline-flex;\"], [2, \"display\", \"inline-flex\", 3, \"click\"], [\"klesComponentHeader\", \"\", 3, \"component\", \"group\", \"field\"], [2, \"padding-top\", \"10px\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"type\", \"button\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"type\", \"button\", 3, \"click\"]], template: function KlesFormDynamicHeaderFilterComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\");\n            i0.ɵɵtext(2);\n            i0.ɵɵpipe(3, \"translate\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(4, KlesFormDynamicHeaderFilterComponent_Conditional_4_Template, 4, 4, \"div\", 1);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"disabled\", !ctx.field.sortable);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 3, ctx.field.label));\n            i0.ɵɵadvance(2);\n            i0.ɵɵconditional(4, ctx.field.filterComponent ? 4 : -1);\n        } }, dependencies: [i1.MatButton, i1.MatIconButton, i2.MatIcon, i11.MatSortHeader, KlesComponentHeaderDirective, i1$1.TranslatePipe], styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}mat-icon[_ngcontent-%COMP%]{font-size:16px;height:16px;width:16px}.mat-mdc-icon-button[_ngcontent-%COMP%]{padding-bottom:4px;min-width:0;width:22px;height:22px;flex-shrink:0;line-height:1;border-radius:50%}.mat-sort-header-container[_ngcontent-%COMP%]{display:flex;justify-content:center}\"] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesFormDynamicHeaderFilterComponent, [{\n        type: Component,\n        args: [{ selector: 'kles-form-textheaderfilter', template: `\r\n    <div mat-sort-header [disabled]=\"!field.sortable\"><span>{{ field.label | translate}}</span></div>\r\n    @if (field.filterComponent) {\r\n        <div (click)=\"stopPropagation($event)\" style=\"display: inline-flex;\">\r\n            <ng-container klesComponentHeader [component]=\"field.filterComponent\" [group]=\"group\" [field]=\"filterField\" >\r\n            </ng-container>\r\n            <span style=\"padding-top: 10px;\">\r\n                @if (field.filterClearable && group.get(field.name).value) {\r\n                    <button mat-button mat-icon-button aria-label=\"Clear\" type=\"button\"\r\n                        (click)=\"group.controls[field.name].reset();\">\r\n                        <mat-icon>close</mat-icon>\r\n                    </button>\r\n                }\r\n            </span>\r\n    </div>\r\n    }\r\n    `, styles: [\"mat-form-field{width:100%}mat-icon{font-size:16px;height:16px;width:16px}.mat-mdc-icon-button{padding-bottom:4px;min-width:0;width:22px;height:22px;flex-shrink:0;line-height:1;border-radius:50%}.mat-sort-header-container{display:flex;justify-content:center}\\n\"] }]\n    }], null, null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesFormDynamicHeaderFilterComponent, { className: \"KlesFormDynamicHeaderFilterComponent\", filePath: \"lib\\\\component\\\\header\\\\dynamic-headerfilter.component.ts\", lineNumber: 30 }); })();\n\nclass MatTreetableData extends MatTableDataSource {\n    constructor() {\n        super(...arguments);\n        this._compareFn = new Intl.Collator('pl', { sensitivity: 'base', numeric: true }).compare;\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return (this.sortChildrends(null, sort, data)); /** parent = null because first element has no parent */\n        };\n        this.deptDataAccessor = (data, sortHeaderId) => {\n            return 0;\n        };\n    }\n    sortChildrends(parent, sort, data) {\n        return data.filter(line => parent === this.parentDataAccessor(line, sort.active))\n            .sort((a, b) => {\n            const valueA = this.sortingDataAccessor(a, sort.active);\n            const valueB = this.sortingDataAccessor(b, sort.active);\n            const comparatorResult = this._compareFn(valueA, valueB);\n            return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\n        })\n            .flatMap(children => {\n            return [children].concat(this.sortChildrends(children, sort, data));\n        });\n    }\n}\n\nclass TreeService {\n    /**\n     * Traverse a tree data structure and applies the provided @param f function\n     * to all nodes\n     * @param root the tree to be traversed\n     * @param f the function to be applied to all nodes\n     * N.B. this function modifies the existing tree\n     */\n    traverse(root, f) {\n        this._traverse(root, (node) => {\n            f(node);\n            return true;\n        });\n    }\n    /**\n     * Search a tree for a node with the provided @param id\n     * @param root the tree to be searched\n     * @param id the id of the node to be retrieved\n     */\n    searchById(root, id) {\n        let matchingNode;\n        const pathToRoot = {};\n        this._traverse(root, (node) => {\n            node.children?.forEach(child => {\n                pathToRoot[child._id] = node;\n            });\n            if (node._id === id) {\n                matchingNode = node;\n            }\n            return node._id !== id;\n        });\n        return matchingNode ? O.some({\n            _id: matchingNode._id,\n            value: matchingNode.value,\n            children: matchingNode.children,\n            pathToRoot: this.buildPath(id, pathToRoot)\n        }) : O.none;\n    }\n    getById(root, id) {\n        let matchingNode;\n        this._traverse(root, (node) => {\n            if (node._id === id) {\n                matchingNode = node;\n            }\n            return node._id !== id;\n        });\n        return matchingNode;\n    }\n    /**\n     * Internal function that can be used to traverse or search the tree\n     * @param root the tree to be scanned\n     * @param f an optional function to be applied to all nodes\n     */\n    _traverse(root, f) {\n        if (!f(root)) {\n            return;\n        }\n        root.children?.forEach(c => this._traverse(c, f));\n    }\n    /**\n     * Given a @param root tree and a @param node node, calculate the\n     * depth of the node in the tree\n     * @param root the tree\n     * @param node the node we want to calculate the depth of\n     */\n    getNodeDepth(root, node) {\n        return pipe(this.searchById(root, node._id), O.fold(() => -1, n => n.pathToRoot.length));\n    }\n    /**\n     * Flatten a @param root tree into a list of its nodes\n     * @param root the tree to be flattened\n     */\n    flatten(root) {\n        const result = [cloneDeep(root)];\n        for (const node of result) {\n            if (node.children) {\n                result.splice(result.indexOf(node) + 1, 0, ...node.children);\n            }\n        }\n        return result;\n    }\n    /**\n     * Internal function used to build the pathToRoot of a node in a tree\n     * @param id the id of the node\n     * @param pathMap the pathMap returned by searchById\n     */\n    buildPath(id, pathMap) {\n        const pathToRoot = [];\n        let key = id;\n        while (key) {\n            if (pathMap[key]) {\n                pathToRoot.push(pathMap[key]);\n                key = pathMap[key]._id;\n            }\n            else {\n                key = null;\n            }\n        }\n        return pathToRoot;\n    }\n    static { this.ɵfac = function TreeService_Factory(t) { return new (t || TreeService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TreeService, factory: TreeService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nclass ConverterService {\n    constructor(treeService) {\n        this.treeService = treeService;\n    }\n    /**\n     * Clone a Node<T> object and convert it to a SearchableNode<T>\n     * @param tree the node to be converted\n     */\n    toSearchableTree(tree) {\n        const treeClone = cloneDeep(tree);\n        this.treeService.traverse(treeClone, (node) => {\n            node._id = node._id ? node._id : v4();\n        });\n        return treeClone;\n    }\n    /**\n     * Clone a SearchableNode<T> object and convert it to a TreeTableNode<T>\n     * @param tree the node to be converted\n     */\n    toTreeTableTree(tree) {\n        const treeClone = cloneDeep(tree);\n        this.treeService.traverse(treeClone, (node) => {\n            const root = this.treeService.searchById(treeClone, node._id);\n            if (O.isSome(root) && root.value.pathToRoot.length > 0) {\n                node.parentId = root.value.pathToRoot[0]._id;\n            }\n            node.depth = this.treeService.getNodeDepth(treeClone, node);\n            node.isExpanded = false;\n            node.isVisible = node.depth === 0;\n            node.childrenCounter = node.childrenCounter || ~~node.children?.length;\n            node.isBusy = node.isBusy || false;\n        });\n        return treeClone;\n    }\n    static { this.ɵfac = function ConverterService_Factory(t) { return new (t || ConverterService)(i0.ɵɵinject(TreeService)); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConverterService, factory: ConverterService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConverterService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], () => [{ type: TreeService }], null); })();\n\nclass RowTreePipe extends RowPipe {\n    transform(row) {\n        return {\n            'row-odd': row.value._status.depth % 2 !== 0,\n            ...super.transform(row)\n        };\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵRowTreePipe_BaseFactory; return function RowTreePipe_Factory(t) { return (ɵRowTreePipe_BaseFactory || (ɵRowTreePipe_BaseFactory = i0.ɵɵgetInheritedFactory(RowTreePipe)))(t || RowTreePipe); }; })(); }\n    static { this.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: \"rowTreePipe\", type: RowTreePipe, pure: false }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowTreePipe, [{\n        type: Pipe,\n        args: [{\n                name: 'rowTreePipe',\n                pure: false\n            }]\n    }], null, null); })();\n\nclass AbstractKlesTreeTableService extends AbstractKlesTableService {\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵAbstractKlesTreeTableService_BaseFactory; return function AbstractKlesTreeTableService_Factory(t) { return (ɵAbstractKlesTreeTableService_BaseFactory || (ɵAbstractKlesTreeTableService_BaseFactory = i0.ɵɵgetInheritedFactory(AbstractKlesTreeTableService)))(t || AbstractKlesTreeTableService); }; })(); }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AbstractKlesTreeTableService, factory: AbstractKlesTreeTableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractKlesTreeTableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nconst _c0$1 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesTreetableComponent_ng_container_3_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 12)(1, \"div\", 13);\n    i0.ɵɵelementContainer(2, 14);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r7.class);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r7.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c0$1, ctx_r8.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r7.headerCell)(\"group\", ctx_r8.formHeader);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 17);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 18);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    const index_r16 = ctx.dataIndex;\n    const column_r7 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r14.getCellStyle(row_r15, column_r7));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r7));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r7, index_r16))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r16))(\"row\", row_r15)(\"column\", column_r7);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_ng_container_0_Template, 6, 14, \"ng-container\", 16);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 17);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 18);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    const index_r20 = ctx.index;\n    const column_r7 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r18.getCellStyle(row_r19, column_r7));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r7));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r7, index_r20))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r20))(\"row\", row_r19)(\"column\", column_r7);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_ng_container_0_Template, 6, 14, \"ng-container\", 16);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 14);\n} if (rf & 2) {\n    const column_r7 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r22 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r7.footerCell)(\"group\", ctx_r22.formFooter);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtemplate(1, KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Conditional_1_Template, 1, 2, \"ng-container\", 14);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r7 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r13.getFooterStyle(column_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r7.footerCell ? 1 : -1);\n} }\nfunction KlesTreetableComponent_ng_container_3_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_1_Template, 1, 0, \"ng-container\")(2, KlesTreetableComponent_ng_container_3_Conditional_2_Conditional_2_Template, 1, 0)(3, KlesTreetableComponent_ng_container_3_Conditional_2_td_3_Template, 2, 3, \"td\", 15);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r9.multiTemplate ? 1 : 2);\n} }\nfunction KlesTreetableComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 10);\n    i0.ɵɵtemplate(1, KlesTreetableComponent_ng_container_3_th_1_Template, 3, 9, \"th\", 11)(2, KlesTreetableComponent_ng_container_3_Conditional_2_Template, 4, 1, \"div\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r7.columnDef)(\"sticky\", column_r7.sticky || false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(2, column_r7.visible ? 2 : -1);\n} }\nfunction KlesTreetableComponent_Conditional_4_ng_container_0_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 17);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 14);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const index_r29 = ctx.dataIndex;\n    const cell_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0$1, ctx_r27.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 5, cell_r26.colspan, ctx_r27.displayedColumns().length))(\"rowspan\", cell_r26.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r26)(\"group\", i0.ɵɵpipeBind1(3, 8, index_r29));\n} }\nfunction KlesTreetableComponent_Conditional_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, KlesTreetableComponent_Conditional_4_ng_container_0_td_1_Template, 4, 12, \"td\", 21);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r26 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r26.name);\n} }\nfunction KlesTreetableComponent_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_Conditional_4_ng_container_0_Template, 2, 1, \"ng-container\", 20);\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.templateUnfold.cells);\n} }\nfunction KlesTreetableComponent_tr_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 22);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 26);\n} if (rf & 2) {\n    const row_r31 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r34 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r34.dragDropRowsOptions == null ? null : ctx_r34.dragDropRowsOptions.dragPreview == null ? null : ctx_r34.dragDropRowsOptions.dragPreview.component)(\"value\", row_r31);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_tr_6_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 24);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 26);\n} if (rf & 2) {\n    const row_r31 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r36 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r36.dragDropRowsOptions == null ? null : ctx_r36.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r36.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r31);\n} }\nfunction KlesTreetableComponent_tr_6_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_tr_6_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 25);\n} }\nfunction KlesTreetableComponent_tr_6_Template(rf, ctx) { if (rf & 1) {\n    const _r39 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 23);\n    i0.ɵɵlistener(\"click\", function KlesTreetableComponent_tr_6_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r39); const row_r31 = restoredCtx.$implicit; const ctx_r38 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r38.onClick(row_r31)); });\n    i0.ɵɵpipe(1, \"rowTreePipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesTreetableComponent_tr_6_Conditional_3_Template, 1, 1, null, 24)(4, KlesTreetableComponent_tr_6_Conditional_4_Template, 1, 0, null, 25);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r31 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"cdk-visually-hidden\", !row_r31.value._status.isVisible);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, row_r31))(\"@rowsAnimation\", undefined)(\"cdkDragData\", row_r31)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 10, row_r31));\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r3.dragDropRowsOptions == null ? null : ctx_r3.dragDropRowsOptions.dragPreview == null ? null : ctx_r3.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r3.dragDropRowsOptions == null ? null : ctx_r3.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r3.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesTreetableComponent_Conditional_7_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 6);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesTreetableComponent_Conditional_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesTreetableComponent_Conditional_7_tr_0_Template, 1, 1, \"tr\", 27);\n} if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r4.getTemplateColumns(ctx_r4.templateUnfold))(\"matRowDefWhen\", ctx_r4.tableService.unfoldPredicate);\n} }\nfunction KlesTreetableComponent_Conditional_8_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 29);\n} }\nfunction KlesTreetableComponent_Conditional_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesTreetableComponent_Conditional_8_tr_1_Template, 1, 0, \"tr\", 28);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r5.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesTreetableComponent extends KlesTableComponent {\n    constructor(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService, tableService) {\n        super(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, tableService);\n        this.translate = translate;\n        this.adapter = adapter;\n        this.formBuilder = formBuilder;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.treeService = treeService;\n        this.converterService = converterService;\n        this.tableService = tableService;\n        this._onLineOpen = new EventEmitter();\n        this._onLineClose = new EventEmitter();\n        this.dataSource = new MatTreetableData([]);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n    }\n    updateData(lines) {\n        this.updateTree(lines);\n        // this.displayedColumns = this.columns.filter(e => e.visible).map(c => c.columnDef);\n        this.setItems();\n    }\n    updateTree(data) {\n        this._lines = (Array.isArray(data) ? data : [data]).map((line => {\n            return { _id: uuid.v4(), ...line };\n        }));\n        this.searchableTree = this._lines.map(t => this.converterService.toSearchableTree(t));\n    }\n    initFormArray() {\n        const treeTableTree = this.searchableTree.map(st => this.converterService.toTreeTableTree(st));\n        this.lineFields = [];\n        const array = this.formBuilder.array(treeTableTree.flatMap(node => {\n            return this.createFormNode(node);\n        }));\n        return array;\n    }\n    createFormNode(node) {\n        let children = [];\n        const parent = this.addFormLine(node);\n        if (node.children) {\n            children = node.children.flatMap(child => {\n                const childControls = this.createFormNode(child);\n                childControls.filter(control => control.value._status.depth === parent.value._status.depth + 1)\n                    .forEach((control) => {\n                    control.valueChanges\n                        .pipe(takeUntil(this._onDestroy))\n                        .subscribe((value) => {\n                        // delete value._id;\n                        // delete value._status;\n                        const v = { ...value };\n                        delete v._id;\n                        delete v._status;\n                        const data = {\n                            value: v,\n                            ...(value._status.children && { children: value._status.children }),\n                            childrenCounter: ~~value._status?.children?.length,\n                            depth: value._status.depth,\n                            isExpanded: value._status.isExpanded,\n                            isVisible: value._status.isVisible,\n                            _id: value._id\n                        };\n                        parent.controls._status\n                            .patchValue({\n                            children: parent.controls._status.value.children.map((c => {\n                                if (c._id === data._id) {\n                                    return data;\n                                }\n                                return c;\n                            }))\n                        }, { emitEvent: false });\n                    });\n                });\n                return childControls;\n            });\n        }\n        return [parent, ...children];\n    }\n    addFormLine(row) {\n        const group = this.formBuilder.group({});\n        const idControl = this.formBuilder.control(row._id);\n        const unfoldControl = this.fb.control(row._unfold || false);\n        group.addControl('_id', idControl);\n        group.addControl('_unfold', unfoldControl);\n        const paginator = this.columns().find(c => c.paginator && c.canExpand);\n        const statusControl = this.formBuilder.group({\n            parentId: row.parentId,\n            isVisible: row.isVisible,\n            isExpanded: row.isExpanded,\n            depth: row.depth,\n            children: [row.children],\n            childrenCounter: row.childrenCounter || ~~row.children?.length,\n            ...(paginator && {\n                paginator: this.formBuilder.group({\n                    pageIndex: 0,\n                    pageSize: paginator.paginatorOption?.pageSize || 5,\n                    length: row.childrenCounter || ~~row.children?.length || 0\n                })\n            })\n        });\n        group.addControl('_status', statusControl);\n        const rowValue = row?.value;\n        const listField = [];\n        this.columns().forEach(column => {\n            column.cell.name = column.columnDef;\n            const colCell = _.cloneDeep(column.cell);\n            const control = this.buildControlField(colCell, rowValue[colCell.name]);\n            listField.push({ ...column.cell });\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            })\n            // distinctUntilChanged((prev, curr) => {\n            //     if (Array.isArray(prev) && Array.isArray(curr)) {\n            //         if (column.cell?.property) {\n            //             return prev.length === curr.length\n            //                 && prev.every((value, index) => value[column.cell.property] === curr[index][column.cell.property]);\n            //         } else {\n            //             return prev.length === curr.length && prev.every((value, index) => value === curr[index]);\n            //         }\n            //     } else {\n            //         if (column.cell?.property && prev && curr) {\n            //             return prev[column.cell.property] === curr[column.cell.property];\n            //         }\n            //     }\n            //     return prev === curr;\n            // })\n            ).subscribe(e => {\n                const group = control.parent;\n                this.tableService.onCellChange({ column, row, group, response: e.response });\n                this._onChangeCell.emit({ column, row, group, response: e.response });\n            });\n            control.statusChanges.subscribe(status => {\n                const group = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group, status });\n                this._onStatusCellChange.emit({ cell: control, group, status });\n            });\n            group.addControl(column.cell.name, control);\n        });\n        this.lineFields.push(listField);\n        group.setValidators(this.lineValidations);\n        group.setAsyncValidators(this.lineAsyncValidations);\n        group.valueChanges.subscribe(value => {\n            this.tableService.onLineChange({ group, row, value });\n        });\n        group.statusChanges.subscribe(status => {\n            this.tableService.onStatusLineChange({ group, row, status });\n            this._onStatusLineChange.emit({ group, row, status });\n        });\n        return group;\n    }\n    setDataSourceAttributes() {\n        super.setDataSourceAttributes();\n        this.dataSource.table = this;\n        this.dataSource.deptDataAccessor = this.tableService.getDepthDataAccessor;\n        this.dataSource.parentDataAccessor = this.tableService.getParentDataAccessor;\n    }\n    static { this.ɵfac = function KlesTreetableComponent_Factory(t) { return new (t || KlesTreetableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(TreeService), i0.ɵɵdirectiveInject(ConverterService), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesTreetableComponent, selectors: [[\"app-kles-dynamictreetable\"]], outputs: { _onLineOpen: \"_onLineOpen\", _onLineClose: \"_onLineClose\" }, features: [i0.ɵɵProvidersFeature([\n                { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                {\n                    provide: DateAdapter,\n                    useClass: MomentDateAdapter,\n                    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                },\n                { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n            ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 12, vars: 22, consts: [[\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"dataSource\", \"ngClass\", \"trackBy\", \"cdkDropListData\", \"cdkDropListDisabled\", \"multiTemplateDataRows\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListDropped\"], [3, \"cdkColumnDef\", \"sticky\", 4, \"ngFor\", \"ngForOf\"], [3, \"matColumnDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"cdk-visually-hidden\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-row\", \"\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\"], [\"paginator\", \"\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicTreeCell\", \"\", 3, \"field\", \"group\", \"row\", \"column\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesTreetableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0)(1, \"table\", 1);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesTreetableComponent_Template_table_cdkDropListDropped_1_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(2, \"elevationPipe\");\n            i0.ɵɵtemplate(3, KlesTreetableComponent_ng_container_3_Template, 3, 3, \"ng-container\", 2)(4, KlesTreetableComponent_Conditional_4_Template, 1, 1, \"ng-container\", 3)(5, KlesTreetableComponent_tr_5_Template, 1, 0, \"tr\", 4)(6, KlesTreetableComponent_tr_6_Template, 5, 12, \"tr\", 5)(7, KlesTreetableComponent_Conditional_7_Template, 1, 2, \"tr\", 6)(8, KlesTreetableComponent_Conditional_8_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"div\", 7);\n            i0.ɵɵelement(10, \"mat-paginator\", 8, 9);\n            i0.ɵɵelementEnd();\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(2, 20, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.columns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(4, ctx.templateUnfold && ctx.multiTemplate ? 4 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(7, ctx.multiTemplate && ctx.templateUnfold ? 7 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(8, ctx.showFooter ? 8 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i8.NgForOf, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicTreeCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}.mat-mdc-cell[_ngcontent-%COMP%]{text-align:left}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:last-of-type{padding-right:0!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}.row-odd[_ngcontent-%COMP%]{background:var(--accent-lighter-color)}  .mat-sort-header-container{display:flex}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTreetableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-dynamictreetable', animations: [rowsAnimation], providers: [\n                    { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\n                    {\n                        provide: DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    },\n                    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n                ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n    <table mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n        formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n        (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n        [multiTemplateDataRows]=\\\"multiTemplate\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n        [cdkDropListSortPredicate]=\\\"sortPredicate()\\\">\\r\\n        <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\"\\r\\n            [sticky]=\\\"column.sticky || false\\\">\\r\\n\\r\\n            <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n                [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                <div style=\\\"display: inline-flex;\\\">\\r\\n                    <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                    </ng-container>\\r\\n                </div>\\r\\n            </th>\\r\\n\\r\\n            @if (column.visible) {\\r\\n                <div>\\r\\n                    @if (multiTemplate) {\\r\\n                        <ng-container *cdkCellDef=\\\"let row;let index = dataIndex;\\\">\\r\\n                            <td mat-cell [style]=\\\"getCellStyle(row,column)\\\" [ngClass]=\\\"column | cellPipe\\\">\\r\\n    \\r\\n                                <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        </ng-container>\\r\\n                    }\\r\\n                    @else {\\r\\n                        <ng-container *cdkCellDef=\\\"let row;let index = index;\\\">\\r\\n                            <td mat-cell [style]=\\\"getCellStyle(row,column)\\\" [ngClass]=\\\"column | cellPipe\\\">\\r\\n    \\r\\n                                <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n    \\r\\n                        </ng-container>\\r\\n                    }\\r\\n    \\r\\n                    <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                        @if (column.footerCell) {\\r\\n                            <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                            </ng-container>\\r\\n                        }\\r\\n                    </td>\\r\\n                </div>\\r\\n            }\\r\\n        </ng-container>\\r\\n\\r\\n        @if (templateUnfold && multiTemplate) {\\r\\n            <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n                <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                    [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                    [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                    <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\">\\r\\n                    </ng-container>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n        }\\r\\n\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n\\r\\n        <tr mat-row [ngClass]=\\\"row | rowTreePipe\\\" [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\"\\r\\n            (click)=\\\"onClick(row)\\\" cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\"\\r\\n            [class.cdk-visually-hidden]=\\\"!row.value._status.isVisible\\\">\\r\\n\\r\\n\\r\\n            @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                    <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                    </ng-container>\\r\\n                </ng-template>\\r\\n            }\\r\\n\\r\\n            @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                <ng-template cdkDragPlaceholder>\\r\\n                    <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\" [value]=\\\"row\\\">\\r\\n                    </ng-container>\\r\\n                </ng-template>\\r\\n            }\\r\\n        </tr>\\r\\n\\r\\n        @if (multiTemplate && templateUnfold) {\\r\\n            <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n            </tr>\\r\\n        }\\r\\n\\r\\n        @if (showFooter) {\\r\\n            <div>\\r\\n                <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                </tr>\\r\\n            </div>\\r\\n        }\\r\\n    </table>\\r\\n\\r\\n</form>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\">\\r\\n    </mat-paginator>\\r\\n</div>\", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;max-height:calc(100vh - 155px)}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-footer-cell{text-align:center}.mat-mdc-cell{text-align:left}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell:last-of-type,td.mat-mdc-cell:last-of-type,td.mat-mdc-footer-cell:last-of-type{padding-right:0!important}.value-cell{display:flex;align-items:left}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}.row-odd{background:var(--accent-lighter-color)}::ng-deep .mat-sort-header-container{display:flex}tr.mat-mdc-footer-row{font-weight:700}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: TreeService }, { type: ConverterService }, { type: AbstractKlesTreeTableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], { _onLineOpen: [{\n            type: Output\n        }], _onLineClose: [{\n            type: Output\n        }] }); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesTreetableComponent, { className: \"KlesTreetableComponent\", filePath: \"lib\\\\component\\\\treetable\\\\treetable.component.ts\", lineNumber: 40 }); })();\n\nclass AbstractKlesLazyTreetableService extends AbstractKlesTreeTableService {\n}\n\nfunction KlesLazyTreetableComponent_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelement(1, \"mat-spinner\");\n    i0.ɵɵelementEnd();\n} }\nconst _c0 = a0 => ({ \"vertical-separator\": a0 });\nfunction KlesLazyTreetableComponent_ng_container_5_th_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15)(1, \"div\", 16);\n    i0.ɵɵelementContainer(2, 17);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(column_r8.class);\n    i0.ɵɵproperty(\"klesResizeColumn\", column_r8.resizable)(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r9.options.verticalSeparator));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", column_r8.headerCell)(\"group\", ctx_r9.formHeader);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 20);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 21);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r16 = ctx.$implicit;\n    const index_r17 = ctx.dataIndex;\n    const column_r8 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r15.getCellStyle(row_r16, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r8, index_r17))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r17))(\"row\", row_r16)(\"column\", column_r8);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_ng_container_0_Template, 6, 14, \"ng-container\", 19);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 20);\n    i0.ɵɵpipe(2, \"cellPipe\");\n    i0.ɵɵelementContainer(3, 21);\n    i0.ɵɵpipe(4, \"fieldPipe\");\n    i0.ɵɵpipe(5, \"groupPipe\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r20 = ctx.$implicit;\n    const index_r21 = ctx.index;\n    const column_r8 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r19.getCellStyle(row_r20, column_r8));\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(2, 7, column_r8));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", i0.ɵɵpipeBind2(4, 9, column_r8, index_r21))(\"group\", i0.ɵɵpipeBind1(5, 12, index_r21))(\"row\", row_r20)(\"column\", column_r8);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_ng_container_0_Template, 6, 14, \"ng-container\", 19);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Conditional_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 17);\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r23 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"field\", column_r8.footerCell)(\"group\", ctx_r23.formFooter);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Conditional_1_Template, 1, 2, \"ng-container\", 17);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r8 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r14.getFooterStyle(column_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, column_r8.footerCell ? 1 : -1);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Conditional_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_1_Template, 1, 0, \"ng-container\")(2, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Conditional_2_Template, 1, 0)(3, KlesLazyTreetableComponent_ng_container_5_Conditional_2_td_3_Template, 2, 3, \"td\", 18);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(1, ctx_r10.multiTemplate ? 1 : 2);\n} }\nfunction KlesLazyTreetableComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 13);\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_ng_container_5_th_1_Template, 3, 9, \"th\", 14)(2, KlesLazyTreetableComponent_ng_container_5_Conditional_2_Template, 4, 1, \"div\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkColumnDef\", column_r8.columnDef)(\"sticky\", column_r8.sticky || false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(2, column_r8.visible ? 2 : -1);\n} }\nfunction KlesLazyTreetableComponent_Conditional_6_ng_container_0_td_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 20);\n    i0.ɵɵpipe(1, \"spanPipe\");\n    i0.ɵɵelementContainer(2, 25);\n    i0.ɵɵpipe(3, \"groupPipe\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r29 = ctx.$implicit;\n    const index_r30 = ctx.dataIndex;\n    const cell_r27 = i0.ɵɵnextContext().$implicit;\n    const ctx_r28 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r28.options.verticalSeparator));\n    i0.ɵɵattribute(\"colspan\", i0.ɵɵpipeBind2(1, 6, cell_r27.colspan, ctx_r28.displayedColumns().length))(\"rowspan\", cell_r27.rowspan);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"field\", cell_r27)(\"group\", i0.ɵɵpipeBind1(3, 9, index_r30))(\"siblingFields\", ctx_r28.lineFields[row_r29.value._index]);\n} }\nfunction KlesLazyTreetableComponent_Conditional_6_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 5);\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_Conditional_6_ng_container_0_td_1_Template, 4, 13, \"td\", 24);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const cell_r27 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", cell_r27.name);\n} }\nfunction KlesLazyTreetableComponent_Conditional_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_Conditional_6_ng_container_0_Template, 2, 1, \"ng-container\", 23);\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.templateUnfold.cells);\n} }\nfunction KlesLazyTreetableComponent_tr_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 26);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_3_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 30);\n} if (rf & 2) {\n    const row_r32 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r35 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r35.dragDropRowsOptions == null ? null : ctx_r35.dragDropRowsOptions.dragPreview == null ? null : ctx_r35.dragDropRowsOptions.dragPreview.component)(\"value\", row_r32);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_tr_8_Conditional_3_ng_template_0_Template, 1, 2, \"ng-template\", 28);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"matchSize\", true);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_4_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0, 30);\n} if (rf & 2) {\n    const row_r32 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r37 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r37.dragDropRowsOptions == null ? null : ctx_r37.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r37.dragDropRowsOptions.dragPlaceholder.component)(\"value\", row_r32);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Conditional_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_tr_8_Conditional_4_ng_template_0_Template, 1, 2, \"ng-template\", 29);\n} }\nfunction KlesLazyTreetableComponent_tr_8_Template(rf, ctx) { if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 27);\n    i0.ɵɵlistener(\"click\", function KlesLazyTreetableComponent_tr_8_Template_tr_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r40); const row_r32 = restoredCtx.$implicit; const ctx_r39 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r39.onClick(row_r32)); });\n    i0.ɵɵpipe(1, \"rowTreePipe\");\n    i0.ɵɵpipe(2, \"rowDragDisabledPipe\");\n    i0.ɵɵtemplate(3, KlesLazyTreetableComponent_tr_8_Conditional_3_Template, 1, 1, null, 28)(4, KlesLazyTreetableComponent_tr_8_Conditional_4_Template, 1, 0, null, 29);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r32 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"cdk-visually-hidden\", !row_r32.value._status.isVisible);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(1, 8, row_r32))(\"@rowsAnimation\", undefined)(\"cdkDragData\", row_r32)(\"cdkDragDisabled\", i0.ɵɵpipeBind1(2, 10, row_r32));\n    i0.ɵɵadvance(3);\n    i0.ɵɵconditional(3, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPreview == null ? null : ctx_r4.dragDropRowsOptions.dragPreview.component) ? 3 : -1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵconditional(4, (ctx_r4.dragDropRowsOptions == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder == null ? null : ctx_r4.dragDropRowsOptions.dragPlaceholder.component) ? 4 : -1);\n} }\nfunction KlesLazyTreetableComponent_Conditional_9_tr_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 8);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@rowsAnimation\", undefined);\n} }\nfunction KlesLazyTreetableComponent_Conditional_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtemplate(0, KlesLazyTreetableComponent_Conditional_9_tr_0_Template, 1, 1, \"tr\", 31);\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matRowDefColumns\", ctx_r5.getTemplateColumns(ctx_r5.templateUnfold))(\"matRowDefWhen\", ctx_r5.tableService.unfoldPredicate);\n} }\nfunction KlesLazyTreetableComponent_Conditional_10_tr_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 33);\n} }\nfunction KlesLazyTreetableComponent_Conditional_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, KlesLazyTreetableComponent_Conditional_10_tr_1_Template, 1, 0, \"tr\", 32);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matFooterRowDef\", ctx_r6.displayedColumns())(\"matFooterRowDefSticky\", true);\n} }\nclass KlesLazyTreetableComponent extends KlesTreetableComponent {\n    constructor(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService, tableService) {\n        super(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService, tableService);\n        this.translate = translate;\n        this.adapter = adapter;\n        this.formBuilder = formBuilder;\n        this.ref = ref;\n        this.dialog = dialog;\n        this.sanitizer = sanitizer;\n        this._adapter = _adapter;\n        this.treeService = treeService;\n        this.converterService = converterService;\n        this.tableService = tableService;\n        this.filteredValues$ = new BehaviorSubject({});\n    }\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n        merge(this.sort.sortChange, this.paginator.page, this.filteredValues$.pipe(debounceTime(500)))\n            .pipe(takeUntil(this._onDestroy), switchMap(() => {\n            return concat(of({ loading: true, value: { lines: [], totalCount: 0, footer: {}, header: {} } }), this.tableService.load(this.sort.active, this.sort.direction, this.paginator.pageIndex, this.paginator.pageSize, this.filteredValues$.getValue()).pipe(map(value => ({ loading: false, value })), catchError((err) => {\n                console.error(err);\n                return of({ loading: false, value: { lines: [], totalCount: 0, footer: {}, header: {} } });\n            })));\n        }))\n            .subscribe((response) => {\n            if (response.loading) {\n                this.loading = true;\n            }\n            else {\n                this.loading = false;\n                if (this.showFooter && response.value.footer) {\n                    this.formFooter.patchValue(response.value.footer);\n                }\n                if (response.value.header) {\n                    this.formHeader.patchValue(response.value.header, { emitEvent: false });\n                }\n                this.updateData(response.value.lines);\n                this.paginator.length = response.value.totalCount;\n            }\n            // this.ref.markForCheck();\n        });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    getLineFields(index, key) {\n        return this.lineFields[index].find(f => f.name === key);\n    }\n    createFormNode(node) {\n        let children = [];\n        const parent = this.addFormLine(node);\n        if (node.children) {\n            children = node.children.flatMap(child => {\n                const childControls = this.createFormNode(child);\n                childControls.filter(control => control.value._status.depth === parent.value._status.depth + 1)\n                    .forEach((control) => {\n                    control.valueChanges\n                        .pipe(takeUntil(this._onDestroy))\n                        .subscribe((value) => {\n                        const v = { ...value };\n                        delete v._id;\n                        delete v._status;\n                        const data = {\n                            value: v,\n                            ...(value._status.children && { children: value._status.children }),\n                            childrenCounter: value._status.childrenCounter || ~~value._status?.children?.length,\n                            depth: value._status.depth,\n                            isExpanded: value._status.isExpanded,\n                            isVisible: value._status.isVisible,\n                            isBusy: value._status.isBusy || false,\n                            _id: value._id,\n                        };\n                        parent.controls._status\n                            .patchValue({\n                            children: parent.controls._status.value.children\n                                .filter(c => c._id !== value._id)\n                                .concat(data)\n                        });\n                    });\n                });\n                return childControls;\n            });\n        }\n        return [parent, ...children];\n    }\n    addFormLine(row) {\n        const group = this.formBuilder.group({});\n        const idControl = this.formBuilder.control(row._id);\n        const unfoldControl = this.fb.control(row._unfold || false);\n        group.addControl('_id', idControl);\n        group.addControl('_unfold', unfoldControl);\n        const paginator = this.columns().find(c => c.paginator && c.canExpand);\n        const statusControl = this.formBuilder.group({\n            isVisible: row.isVisible,\n            isExpanded: row.isExpanded,\n            depth: row.depth,\n            childrenCounter: row.childrenCounter || ~~row.children?.length,\n            children: [row.children],\n            isBusy: false,\n            ...(paginator && {\n                paginator: this.formBuilder.group({\n                    pageIndex: 0,\n                    pageSize: paginator.paginatorOption?.pageSize || this.paginator?.pageSize || 5,\n                    length: 0\n                })\n            })\n        });\n        group.addControl('_status', statusControl);\n        merge(statusControl.controls.paginator?.valueChanges || of(), statusControl.controls.isExpanded.valueChanges)\n            .pipe(takeUntil(this._onDestroy), switchMap(() => {\n            if (statusControl.controls.isExpanded.value) {\n                return concat(of({ loading: true, value: { lines: [], totalCount: 0 } }), this.tableService.loadChild(group, this.sort.active, this.sort.direction, statusControl.controls.paginator?.value.pageIndex, statusControl.controls.paginator?.value.pageSize, this.filteredValues$.getValue()).pipe(map(value => ({ loading: false, value })), catchError((err) => {\n                    console.error(err);\n                    return of({ loading: false, value: { lines: [], totalCount: 0 } });\n                })));\n            }\n            return of({ loading: false, value: { lines: [], totalCount: 0 } });\n        })).subscribe(({ loading, value }) => {\n            if (!loading) {\n                this.tableService.deleteChildren(row._id);\n                if (value.lines.length) {\n                    value.lines.forEach(child => this.tableService.addChild(row._id, child));\n                }\n                statusControl.controls.paginator?.patchValue({ length: value.totalCount }, { emitEvent: false });\n            }\n            statusControl.patchValue({ isBusy: loading }, { emitEvent: false });\n            this.ref.markForCheck();\n        });\n        const rowValue = row.value;\n        const listField = [];\n        this.columns().forEach(column => {\n            column.cell.name = column.columnDef;\n            const colCell = _.cloneDeep(column.cell);\n            const control = this.buildControlField(colCell, rowValue[colCell.name]);\n            listField.push(colCell);\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges), debounceTime(colCell.debounceTime || 0), switchMap((value) => {\n                if (colCell.executeAfterChange) {\n                    colCell.pending = true;\n                    this.ref.markForCheck();\n                    return colCell.executeAfterChange(colCell.name, { ...control?.parent.value, [colCell.name]: value }, control?.parent)\n                        .pipe(take(1), catchError((err) => {\n                        console.error(err);\n                        return of(null);\n                    }), map((response) => ({ value, response })), tap(() => {\n                        colCell.pending = false;\n                        this.ref.markForCheck();\n                    }));\n                }\n                return of({ value, response: null });\n            })).subscribe(e => {\n                const group = control.parent;\n                this.tableService.onCellChange({ column, row, group, response: e.response });\n                this._onChangeCell.emit({ column, row, group, response: e.response });\n            });\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\n                const group = control.parent;\n                this.tableService.onStatusCellChange({ cell: control, group, status });\n                this._onStatusCellChange.emit({ cell: control, group, status });\n            });\n            group.addControl(column.cell.name, control);\n        });\n        this.lineFields.push(listField);\n        group.setValidators(this.lineValidations);\n        group.setAsyncValidators(this.lineAsyncValidations);\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(value => {\n            this.tableService.onLineChange({ group, row, value });\n        });\n        group.statusChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(status => {\n            this.tableService.onStatusLineChange({ group, row, status });\n            this._onStatusLineChange.emit({ group, row, status });\n        });\n        return group;\n    }\n    setDataSourceAttributes() {\n        if (this.sort) {\n            if (this.paginator && !this.hidePaginator) {\n                this.sort.sortChange.subscribe(() => {\n                    this.paginator.pageIndex = 0;\n                });\n            }\n            if (\n            // !this.sortDefault && \n            this.sortConfig) {\n                this.sort.active = this.sortConfig.active;\n                this.sort.direction = this.sortConfig.direction;\n                this.sort.sortChange.emit(this.sortConfig);\n                // this.sortDefault = !this.sortDefault;\n            }\n        }\n        this.tableService.setTable(this);\n        this.dataSource.table = this;\n        this.dataSource.deptDataAccessor = this.tableService.getDepthDataAccessor;\n        this.dataSource.parentDataAccessor = this.tableService.getParentDataAccessor;\n    }\n    static { this.ɵfac = function KlesLazyTreetableComponent_Factory(t) { return new (t || KlesLazyTreetableComponent)(i0.ɵɵdirectiveInject(i1$1.TranslateService), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(i3$1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.DomSanitizer), i0.ɵɵdirectiveInject(i2$1.DateAdapter), i0.ɵɵdirectiveInject(TreeService), i0.ɵɵdirectiveInject(ConverterService), i0.ɵɵdirectiveInject('tableService')); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KlesLazyTreetableComponent, selectors: [[\"app-kles-lazytreetable\"]], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 14, vars: 23, consts: [[2, \"position\", \"relative\"], [\"class\", \"loading\"], [\"cdkScrollable\", \"\", 1, \"dynamic-form\", 3, \"formGroup\"], [\"mat-table\", \"\", \"matSort\", \"\", \"formArrayName\", \"rows\", \"cdkDropList\", \"\", 3, \"dataSource\", \"ngClass\", \"trackBy\", \"multiTemplateDataRows\", \"cdkDropListData\", \"cdkDropListDisabled\", \"cdkDropListAutoScrollStep\", \"cdkDropListSortPredicate\", \"cdkDropListDropped\"], [3, \"cdkColumnDef\", \"sticky\", 4, \"ngFor\", \"ngForOf\"], [3, \"matColumnDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdk-visually-hidden\", \"cdkDragData\", \"cdkDragDisabled\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-row\", \"\"], [3, \"hidden\"], [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"], [\"paginator\", \"\"], [1, \"loading\"], [3, \"cdkColumnDef\", \"sticky\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"class\", \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", 3, \"klesResizeColumn\", \"ngClass\"], [2, \"display\", \"inline-flex\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\"], [\"mat-footer-cell\", \"\", 3, \"style\", 4, \"matFooterCellDef\"], [4, \"cdkCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [\"klesDynamicTreeCell\", \"\", 3, \"field\", \"group\", \"row\", \"column\"], [\"mat-footer-cell\", \"\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"klesDynamicField\", \"\", 3, \"field\", \"group\", \"siblingFields\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", \"cdkDrag\", \"\", 3, \"ngClass\", \"cdkDragData\", \"cdkDragDisabled\", \"click\"], [\"cdkDragPreview\", \"\", 3, \"matchSize\"], [\"cdkDragPlaceholder\", \"\"], [\"klesComponent\", \"\", 3, \"component\", \"value\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\", \"matRowDefWhen\"], [\"mat-footer-row\", \"\", 4, \"matFooterRowDef\", \"matFooterRowDefSticky\"], [\"mat-footer-row\", \"\"]], template: function KlesLazyTreetableComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, KlesLazyTreetableComponent_Conditional_1_Template, 2, 0, \"div\", 1);\n            i0.ɵɵelementStart(2, \"form\", 2)(3, \"table\", 3);\n            i0.ɵɵlistener(\"cdkDropListDropped\", function KlesLazyTreetableComponent_Template_table_cdkDropListDropped_3_listener($event) { return ctx.drop($event); });\n            i0.ɵɵpipe(4, \"elevationPipe\");\n            i0.ɵɵtemplate(5, KlesLazyTreetableComponent_ng_container_5_Template, 3, 3, \"ng-container\", 4)(6, KlesLazyTreetableComponent_Conditional_6_Template, 1, 1, \"ng-container\", 5)(7, KlesLazyTreetableComponent_tr_7_Template, 1, 0, \"tr\", 6)(8, KlesLazyTreetableComponent_tr_8_Template, 5, 12, \"tr\", 7)(9, KlesLazyTreetableComponent_Conditional_9_Template, 1, 2, \"tr\", 8)(10, KlesLazyTreetableComponent_Conditional_10_Template, 2, 2, \"div\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(11, \"div\", 9)(12, \"mat-paginator\", 10, 11);\n            i0.ɵɵlistener(\"page\", function KlesLazyTreetableComponent_Template_mat_paginator_page_12_listener($event) { return ctx.pageChanged($event); });\n            i0.ɵɵelementEnd()();\n        } if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(1, ctx.loading ? 1 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"ngClass\", i0.ɵɵpipeBind1(4, 21, ctx.options.elevation))(\"trackBy\", ctx.multiTemplate ? null : ctx.trackById)(\"multiTemplateDataRows\", ctx.multiTemplate)(\"cdkDropListData\", ctx)(\"cdkDropListDisabled\", !ctx.dragDropRows)(\"cdkDropListAutoScrollStep\", ctx.dragDropRowsOptions.autoScrollStep)(\"cdkDropListSortPredicate\", ctx.sortPredicate());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.columns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(6, ctx.templateUnfold && ctx.multiTemplate ? 6 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns())(\"matHeaderRowDefSticky\", true);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns());\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(9, ctx.multiTemplate && ctx.templateUnfold ? 9 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵconditional(10, ctx.showFooter ? 10 : -1);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"hidden\", ctx.hidePaginator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", true);\n        } }, dependencies: [i8.NgClass, i8.NgForOf, i7.CdkScrollable, i8$1.MatTable, i8$1.MatHeaderCellDef, i8$1.MatHeaderRowDef, i8$1.MatColumnDef, i8$1.MatCellDef, i8$1.MatRowDef, i8$1.MatFooterCellDef, i8$1.MatFooterRowDef, i8$1.MatHeaderCell, i8$1.MatCell, i8$1.MatFooterCell, i8$1.MatHeaderRow, i8$1.MatRow, i8$1.MatFooterRow, i9.MatPaginator, i10.CdkCellDef, i10.CdkColumnDef, i3.MatProgressSpinner, i11.MatSort, i12.CdkDropList, i12.CdkDrag, i12.CdkDragPreview, i12.CdkDragPlaceholder, i3$1.ɵNgNoValidate, i3$1.NgControlStatusGroup, i3$1.FormGroupDirective, i3$1.FormArrayName, i13.KlesDynamicFieldDirective, i13.KlesComponentDirective, KlesResizeColumnDirective, KlesDynamicTreeCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe], styles: [\"[_nghost-%COMP%]{display:block;height:inherit}form[_ngcontent-%COMP%]{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator[_ngcontent-%COMP%]{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell[_ngcontent-%COMP%], .mat-mdc-footer-cell[_ngcontent-%COMP%]{text-align:center}.mat-mdc-cell[_ngcontent-%COMP%]{text-align:left}table[_ngcontent-%COMP%]{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:first-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-cell[_ngcontent-%COMP%]:last-of-type, td.mat-mdc-footer-cell[_ngcontent-%COMP%]:last-of-type{padding-right:0!important}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:left}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"][_ngcontent-%COMP%]{text-align:left}.mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-header-cell[_ngcontent-%COMP%]{padding:0 10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:normal}.size-16[_ngcontent-%COMP%]{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table[_ngcontent-%COMP%]{width:100%}.mat-mdc-table.resizing[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{position:relative}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:last-child)   .resize-holder[_ngcontent-%COMP%]{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%], .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-cell[_ngcontent-%COMP%]:not(:nth-child(1)), .mat-mdc-table[_ngcontent-%COMP%]   .mat-mdc-header-cell[_ngcontent-%COMP%]:not(:nth-child(1)){padding:0 10px}  .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row[_ngcontent-%COMP%]{font-weight:700}.loading[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}.row-odd[_ngcontent-%COMP%]{background:var(--accent-lighter-color)}\", \".cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging[_ngcontent-%COMP%]   .mat-mdc-row[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag[_ngcontent-%COMP%]{cursor:move}.cdk-drag-disabled[_ngcontent-%COMP%]{cursor:initial}\", \".align-left[_ngcontent-%COMP%]{text-align:left}.align-center[_ngcontent-%COMP%]{text-align:center}.align-right[_ngcontent-%COMP%]{text-align:right}\", \"app-kles-dynamictable .mat-mdc-form-field-focus-overlay,   app-kles-lazytable .mat-mdc-form-field-focus-overlay,   app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,   app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),   app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}  app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,   app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}  app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),   app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\"], data: { animation: [rowsAnimation] }, changeDetection: 0 }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesLazyTreetableComponent, [{\n        type: Component,\n        args: [{ selector: 'app-kles-lazytreetable', animations: [rowsAnimation], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div style=\\\"position: relative;\\\">\\r\\n    @if (loading) {\\r\\n        <div class=\\\"loading\\\">\\r\\n            <mat-spinner></mat-spinner>\\r\\n        </div>\\r\\n    }\\r\\n\\r\\n    <form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n            formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n            [multiTemplateDataRows]=\\\"multiTemplate\\\" (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\"\\r\\n            [cdkDropListDisabled]=\\\"!dragDropRows\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n            [cdkDropListSortPredicate]=\\\"sortPredicate()\\\">\\r\\n            <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n                    [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                    <div style=\\\"display: inline-flex;\\\">\\r\\n                        <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                        </ng-container>\\r\\n                    </div>\\r\\n                </th>\\r\\n                @if (column.visible) {\\r\\n                    <div>\\r\\n                        @if (multiTemplate) {\\r\\n                            <ng-container *cdkCellDef=\\\"let row;let index = dataIndex;\\\">\\r\\n                                <td mat-cell [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                    [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                    <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                        [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                    </ng-container>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                        }\\r\\n                        @else {\\r\\n                            <ng-container *cdkCellDef=\\\"let row;let index = index;\\\">\\r\\n                                <td mat-cell [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                    [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                    <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                        [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                    </ng-container>\\r\\n                                </td>\\r\\n    \\r\\n                            </ng-container>\\r\\n                        }\\r\\n    \\r\\n                        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                            @if (column.footerCell) {\\r\\n                                <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                                </ng-container>\\r\\n                            }\\r\\n                        </td>\\r\\n                    </div>\\r\\n                }\\r\\n\\r\\n            </ng-container>\\r\\n\\r\\n            @if (templateUnfold && multiTemplate) {\\r\\n                <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n                    <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                        [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\"\\r\\n                        [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                        <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n                            [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n                        </ng-container>\\r\\n                    </td>\\r\\n                </ng-container>\\r\\n            }\\r\\n\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n            <tr mat-row [ngClass]=\\\"row | rowTreePipe\\\" [@rowsAnimation]=\\\"\\\"\\r\\n                *matRowDef=\\\"let row; columns: displayedColumns();\\\"\\r\\n                [class.cdk-visually-hidden]=\\\"!row.value._status.isVisible\\\" (click)=\\\"onClick(row)\\\" cdkDrag\\r\\n                [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\">\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                    <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                    <ng-template cdkDragPlaceholder>\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\"\\r\\n                            [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n            </tr>\\r\\n\\r\\n            @if (multiTemplate && templateUnfold) {\\r\\n                <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n                </tr>\\r\\n            }\\r\\n\\r\\n            @if (showFooter) {\\r\\n                <div>\\r\\n                    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                    </tr>\\r\\n                </div>\\r\\n            }\\r\\n        </table>\\r\\n\\r\\n    </form>\\r\\n</div>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n        (page)=\\\"pageChanged($event)\\\">\\r\\n    </mat-paginator>\\r\\n</div>\", styles: [\":host{display:block;height:inherit}form{overflow:auto;height:inherit;min-height:200px;max-height:calc(100vh - 155px);position:relative}.mat-mdc-paginator{position:sticky;bottom:0;z-index:1000}.mat-mdc-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1000;min-height:50px!important;align-items:stretch;background-color:#e2e6eb}.mat-mdc-header-cell,.mat-mdc-footer-cell{text-align:center}.mat-mdc-cell{text-align:left}table{width:100%;height:inherit;overflow:auto}th.mat-mdc-header-cell:first-of-type,td.mat-mdc-cell:first-of-type,td.mat-mdc-footer-cell:first-of-type{padding-left:15px!important;padding-right:15px!important}th.mat-mdc-header-cell:last-of-type,td.mat-mdc-cell:last-of-type,td.mat-mdc-footer-cell:last-of-type{padding-right:0!important}.value-cell{display:flex;align-items:left}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#add8e6}td[class*=\\\" mat-column\\\"]{text-align:left}.mat-mdc-cell,.mat-mdc-header-cell{padding:0 10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:normal}.size-16{width:16px;height:16px;font-size:16px;color:#404040;background:white;border:1px solid #C0C0C0;margin-right:4px}.mat-mdc-table{width:100%}.mat-mdc-table.resizing{-webkit-user-select:none;user-select:none;cursor:col-resize}.mat-mdc-table .mat-mdc-cell span{display:block;overflow:hidden;text-overflow:ellipsis}.mat-mdc-table .mat-mdc-header-cell{position:relative}.mat-mdc-table .mat-mdc-header-cell:not(:last-child) .resize-holder{cursor:col-resize;width:20px;height:100%;position:absolute;right:-10px;top:0;z-index:1}.mat-mdc-table .mat-mdc-cell,.mat-mdc-table .mat-mdc-header-cell{border-right:1px solid rgba(0,0,0,.12)}.mat-mdc-table .mat-mdc-cell:not(:nth-child(1)),.mat-mdc-table .mat-mdc-header-cell:not(:nth-child(1)){padding:0 10px}::ng-deep .mat-sort-header-container{display:flex;justify-content:center}tr.mat-mdc-footer-row{font-weight:700}.loading{position:absolute;width:100%;height:100%;padding-top:25px;background:rgba(139,147,154,.15);z-index:1000;display:flex;align-items:center;justify-content:center}.row-odd{background:var(--accent-lighter-color)}\\n\", \".cdk-drag-preview{box-sizing:border-box;display:table;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f;background:mat-color(mat-light-theme-background,background)}.cdk-drag-preview td{vertical-align:middle}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.cdk-drop-list-dragging .mat-mdc-row:not(.cdk-drag-placeholder){pointer-events:none}.cdk-drag{cursor:move}.cdk-drag-disabled{cursor:initial}\\n\", \".align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}\\n\", \"::ng-deep app-kles-dynamictable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-dynamictreetable .mat-mdc-form-field-focus-overlay,::ng-deep app-kles-lazytreetable .mat-mdc-form-field-focus-overlay{background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-dynamictreetable .mdc-text-field--filled:not(.mdc-text-field--disabled),::ng-deep app-kles-lazytreetable .mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:transparent!important}::ng-deep app-kles-dynamictable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-dynamictreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix,::ng-deep app-kles-lazytreetable .mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mat-mdc-form-field-infix{padding-top:24px!important;padding-bottom:8px!important}::ng-deep app-kles-dynamictable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-dynamictreetable .mdc-text-field:not(.mdc-text-field--outlined),::ng-deep app-kles-lazytreetable .mdc-text-field:not(.mdc-text-field--outlined){padding:0!important}\\n\"] }]\n    }], () => [{ type: i1$1.TranslateService }, { type: i2$1.DateAdapter }, { type: i3$1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.MatDialog }, { type: i5.DomSanitizer }, { type: i2$1.DateAdapter }, { type: TreeService }, { type: ConverterService }, { type: AbstractKlesLazyTreetableService, decorators: [{\n                type: Inject,\n                args: ['tableService']\n            }] }], null); })();\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(KlesLazyTreetableComponent, { className: \"KlesLazyTreetableComponent\", filePath: \"lib\\\\component\\\\lazytreetable\\\\lazytreetable.component.ts\", lineNumber: 26 }); })();\n\nclass DefaultKlesTableService extends AbstractKlesTableService {\n    constructor() {\n        super(...arguments);\n        //Sorting\n        this.getSortingDataAccessor = (item, property) => {\n            if (!item.value) {\n                return item.value;\n            }\n            let value = item.value[property];\n            if (value) {\n                if (typeof value === 'string') {\n                    value = value.toLowerCase();\n                }\n                else if (typeof value === 'object') {\n                    if (value.key) {\n                        value = value.key;\n                    }\n                }\n            }\n            return value;\n        };\n        this.unfoldPredicate = (index, data) => {\n            return data.controls._unfold.value;\n        };\n    }\n    //Header\n    onHeaderChange(e) { }\n    onHeaderCellChange(e) { }\n    onStatusHeaderChange(e) { }\n    //Line\n    onCellChange(e) { }\n    onStatusCellChange(e) { }\n    onLineChange(e) {\n        if (this.table.multiTemplate) {\n            this.table.matTable.renderRows();\n        }\n    }\n    onStatusLineChange(e) { }\n    onClick(e) { }\n    //drag and drop\n    drop(e) { }\n    getSortPredicate(index, item) {\n        return true;\n    }\n    //Footer\n    onFooterChange(e) { }\n    onFooterCellChange(e) { }\n    //Paginator\n    onPageChange(e) { }\n    //Data\n    onDataLoaded() { }\n    //Cell Style\n    getCellStyle(row, column) { return ''; }\n    getFooterStyle(column) { return ''; }\n    /**Util Table */\n    //Manage Record\n    addRecord(record, index) {\n        const _id = record._id || uuid.v4();\n        delete record._id;\n        const newRecord = {\n            _id,\n            _index: typeof index === 'undefined' ? this.table._lines.length : index,\n            value: record\n        };\n        const group = this.table.addFormLine(newRecord);\n        if (typeof index !== 'undefined') {\n            this.table.getFormArray().controls.forEach((row) => {\n                if (row.value._index >= index) {\n                    row.patchValue({ _index: row.value._index + 1 }, { emitEvent: false });\n                }\n            });\n            this.table._lines.forEach((line) => {\n                if (line._index >= index) {\n                    line._index = line._index + 1;\n                }\n            });\n            this.table._lines.splice(index, 0, newRecord);\n            this.table.getFormArray().insert(index, group);\n        }\n        else {\n            this.table._lines.push(newRecord);\n            this.table.getFormArray().push(group);\n        }\n        this.updateDataSource();\n        return group;\n    }\n    deleteRecord(event) {\n        // console.log('Delete Record=', event);\n        event.forEach((e) => {\n            const id = e.controls['_id'].value;\n            const index = this.table.getFormArray().controls.findIndex(f => f.value._id === id);\n            this.table.getFormArray().removeAt(index);\n            this.table._lines = this.table._lines.filter(f => f._id !== id);\n        });\n        // console.log('List _lines=', this.table._lines);\n        this.updateDataSource();\n        this.table.selection.clear();\n    }\n    updateRecord(record, options) {\n        const updateForm = this.table.getFormArray().controls\n            .find((f) => f.controls._id.value === '' + record._id);\n        if (updateForm) {\n            updateForm.patchValue(record, options);\n            this.updateDataSource();\n            this.table.ref.detectChanges();\n        }\n    }\n    updateDataSource() {\n        this.table.dataSource.data = this.table.getFormArray().controls;\n        this.table.dataSource.filteredData = this.table.getFormArray().controls;\n    }\n    /**Setters */\n    setTable(table) {\n        this.table = table;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵDefaultKlesTableService_BaseFactory; return function DefaultKlesTableService_Factory(t) { return (ɵDefaultKlesTableService_BaseFactory || (ɵDefaultKlesTableService_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultKlesTableService)))(t || DefaultKlesTableService); }; })(); }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultKlesTableService, factory: DefaultKlesTableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultKlesTableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nclass KlesSelectionTableService {\n    constructor(column) {\n        this.columnSelect = column;\n    }\n    changeSelectionHeader(e) {\n        if (e.column.columnDef === this.columnSelect) {\n            const val = e.group.controls[this.columnSelect].value;\n            this.table.getFormArray().controls\n                .filter((e) => e.controls[this.columnSelect]?.enabled)\n                .forEach((e) => {\n                e.controls[this.columnSelect]?.patchValue(val);\n            });\n        }\n    }\n    changeSelectionLine(e) {\n        if (this.table) {\n            if (e.column.columnDef === this.columnSelect && e.row) {\n                if (this.table.dataSource.filteredData.includes(e.group)) {\n                    if (e.group.controls[e.column.columnDef].value) {\n                        if (!this.table.selection.isMultipleSelection()) {\n                            this.table.getFormArray().controls\n                                .filter((row) => row.value._id !== e.group.value._id)\n                                .forEach((row) => {\n                                row.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n                            });\n                        }\n                        this.table.selection.select(e.group);\n                    }\n                    else {\n                        this.table.selection.deselect(e.group);\n                    }\n                    this.table._onSelected.emit(this.table.selection.selected);\n                }\n                else {\n                    e.group.controls[e.column.columnDef]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                    this.table.selection.deselect(e.row);\n                }\n            }\n            if (this.isAllSelected()) {\n                this.table.columns.update((columns) => {\n                    columns.filter(f => f.columnDef === this.columnSelect).forEach(m => m.headerCell.indeterminate = false);\n                    return columns;\n                });\n                this.table.formHeader.controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\n                this.table.tableService.onSelectIndeterminate.next(false);\n            }\n            else {\n                this.table.columns().filter(f => f.columnDef === this.columnSelect)\n                    .map(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\n                this.table.columns.update((columns) => {\n                    columns.filter(f => f.columnDef === this.columnSelect)\n                        .forEach(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\n                    return columns;\n                });\n                this.table.tableService.onSelectIndeterminate.next(!this.table.selection.isEmpty());\n                if (this.table.selection.isEmpty()) {\n                    this.table.formHeader.controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                }\n            }\n        }\n    }\n    isAllSelected() {\n        if (this.table) {\n            const numSelected = this.table.selection.selected\n                .filter(s => this.table.dataSource.filteredData.includes(s)).length;\n            const numRows = this.table.dataSource.filteredData.length;\n            return numSelected === numRows;\n        }\n        return false;\n    }\n}\n\nclass KlesHeaderFilterTableService {\n    constructor() {\n        this.filteredValues = {};\n    }\n    filterData() {\n        if (this.table) {\n            this.filteredValues = this.table.formHeader.value;\n            Object.keys(this.filteredValues).map(key => {\n                if (moment.isMoment(this.filteredValues[key])) {\n                    this.filteredValues[key] = this.filteredValues[key].toDate().toDateString();\n                }\n            });\n            this.table.dataSource.filterPredicate = this.createFilter();\n            this.table.dataSource.filter = JSON.stringify(this.filteredValues);\n        }\n    }\n    /**Filter */\n    createFilter() {\n        const myFilterPredicate = (data, filter) => {\n            let searchString = JSON.parse(filter);\n            const filterableColumn = this.table.columns().filter(f => f.filterable).map(m => m.columnDef);\n            searchString = _.pick(searchString, filterableColumn);\n            return Object.keys(searchString).filter(f => searchString[f] && filterableColumn.includes(f)).every(key => {\n                let keyValue = data?.controls[key]?.value;\n                const column = this.table.columns().find(col => col.columnDef === key);\n                if (column.headerCell.filterPredicate) {\n                    return column.headerCell.filterPredicate(keyValue, searchString[key]) || false;\n                }\n                if (keyValue && typeof (keyValue) === 'object' && column.cell.property) {\n                    keyValue = keyValue[column.cell.property];\n                }\n                if (searchString[key] && typeof (searchString[key]) === 'object' && (column.headerCell.property || column.cell.property)) {\n                    if (Array.isArray(searchString[key])) {\n                        if (!searchString[key].length)\n                            return true;\n                        const list = searchString[key].map(m => m[column.headerCell.property || column.cell.property].toLowerCase());\n                        return keyValue && list.includes(keyValue.toString().trim().toLowerCase());\n                    }\n                    else {\n                        searchString[key] = searchString[key][column.headerCell.property || column.cell.property];\n                    }\n                }\n                if (!keyValue && searchString[key].length === 0) {\n                    return true;\n                }\n                else if (!keyValue) {\n                    return false;\n                }\n                else if (!searchString[key]) {\n                    return true;\n                }\n                return keyValue && keyValue.toString().trim().toLowerCase().indexOf(searchString[key].toLowerCase()) !== -1;\n            });\n        };\n        return myFilterPredicate;\n    }\n}\n\nclass KlesDragDropRowTableService {\n    beforeDrop(event) {\n        return of(true);\n    }\n    onDrop(event) {\n        this.beforeDrop(event).pipe(take(1)).subscribe((isValid) => {\n            if (isValid) {\n                if (event.previousContainer === event.container) {\n                    const previousIndex = this.table.getFormArray().controls.findIndex((d) => d.value._id === event.item.data.value._id);\n                    moveItemInArray(this.table.getFormArray().controls, previousIndex, event.currentIndex);\n                    this.table._onDragDropRow.emit({\n                        currentIndex: event.currentIndex, previousIndex: previousIndex,\n                        group: this.table.getFormArray().controls[event.currentIndex]\n                    });\n                    this.table.dataSource.data = this.table.getFormArray().controls;\n                }\n                else {\n                    event.previousContainer.data.tableService.deleteRecord([event.item.data]);\n                    this.table.tableService.addRecord(event.item.data.value, event.currentIndex);\n                    this.table._onDragDropRow.emit({\n                        currentIndex: event.currentIndex, previousIndex: event.previousIndex,\n                        container: event.container,\n                        group: this.table.getFormArray().controls[event.currentIndex]\n                    });\n                }\n                this.afterDrop(event);\n            }\n        });\n    }\n    afterDrop(event) {\n    }\n    sortPredicate(index, item) {\n        return true;\n    }\n}\n\nclass KlesUnfoldRowTableService {\n    unfoldRow({ group, row, value }) {\n        if (this.table && this.table.templateUnfold) {\n            const isUnfold = group.controls._unfold?.value;\n            if (!this.table.templateUnfold?.multiUnfold && isUnfold) {\n                this.table.getFormArray().controls\n                    .filter((row) => row.controls._id.value !== group.controls._id.value)\n                    .forEach((row) => row.controls._unfold.patchValue(false, { emitEvent: false }));\n            }\n        }\n    }\n}\n\n// @Injectable({\n//     providedIn: 'root'\n// })\nclass KlesTableService extends classes(DefaultKlesTableService, KlesSelectionTableService, KlesHeaderFilterTableService, KlesDragDropRowTableService, KlesUnfoldRowTableService) {\n    constructor() {\n        super({ super: KlesSelectionTableService, arguments: ['#select'] }, { super: KlesHeaderFilterTableService }, { super: KlesUnfoldRowTableService });\n    }\n    //Header \n    onHeaderChange(e) {\n        this.filterData();\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    //Line\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return this.sortPredicate(index, item);\n    }\n    onLineChange(e) {\n        this.unfoldRow(e);\n        this.table.matTable.renderRows();\n    }\n    //Footer\n    onFooterChange(e) { }\n    onPageChange(event) { }\n    static { this.ɵfac = function KlesTableService_Factory(t) { return new (t || KlesTableService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: KlesTableService, factory: KlesTableService.ɵfac }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTableService, [{\n        type: Injectable\n    }], () => [], null); })();\n\nclass KlesSelectionTableLazyService {\n    constructor(column, selection) {\n        this.selection = selection;\n        this.columnSelect = column;\n    }\n    changeSelectionHeader(e) {\n        if (this.selection?.selectAll) {\n            if (e.column.columnDef === this.columnSelect) {\n                const val = e.group.controls[this.columnSelect].value;\n                const filterHeader = this.table.columns()\n                    .filter(column => column.filterable)\n                    .map(column => {\n                    return { [column.columnDef]: this.table.formHeader.controls[column.columnDef].value };\n                })\n                    .reduce((a, b) => ({ ...a, ...b }), {});\n                this.selection.selectAll(val, filterHeader)\n                    .pipe(take(1), map((response) => {\n                    return { success: true, ...response };\n                }), catchError(err => {\n                    console.error(err);\n                    return of({ success: false, indeterminate: false, selected: false });\n                }))\n                    .subscribe((response) => {\n                    this.table.getFormArray().controls.forEach((row) => {\n                        row.controls[this.columnSelect]?.patchValue(response.selected, { emitEvent: false, onlySelf: true });\n                    });\n                    this.table.tableService.onSelectIndeterminate.next(response.indeterminate);\n                    this.table.ref.markForCheck();\n                });\n            }\n        }\n    }\n    changeSelectionLine(e) {\n        if (this.selection?.select) {\n            if (e.column.columnDef === this.columnSelect && e.row) {\n                const val = e.group.controls[e.column.columnDef].value;\n                this.selection.select(val, e.group)\n                    .pipe(take(1), map((response) => {\n                    return { success: true, ...response };\n                }), catchError(err => {\n                    console.error(err);\n                    return of({ success: false, indeterminate: false, selected: false });\n                }))\n                    .subscribe((response) => {\n                    if (!response.success) {\n                        e.group.controls[e.column.columnDef].patchValue(!val, { emitEvent: false });\n                    }\n                    else if (response.success) {\n                        if (response.indeterminate) {\n                            this.table.formHeader\n                                .controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                        }\n                        else if (response.selected && !response.indeterminate) {\n                            this.table.formHeader\n                                .controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\n                        }\n                        else {\n                            this.table.formHeader\n                                .controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                        }\n                        this.table.columns.update((columns) => {\n                            columns.find(f => f.columnDef === this.columnSelect).headerCell.indeterminate = response.indeterminate;\n                            return columns;\n                        });\n                        this.table.tableService.onSelectIndeterminate.next(response.indeterminate);\n                    }\n                });\n            }\n        }\n    }\n}\n\nclass KlesLazyTableService extends classes(DefaultKlesTableService, KlesSelectionTableLazyService, KlesDragDropRowTableService, KlesUnfoldRowTableService) {\n    constructor(pagination, selection) {\n        super({ super: KlesSelectionTableLazyService, arguments: ['#select', selection] }, { super: KlesUnfoldRowTableService });\n        this.pagination = pagination;\n    }\n    //Header \n    onHeaderChange(e) {\n        const value = { ...this.table.formHeader.value };\n        this.table.columns().forEach(column => {\n            if (!column.filterable) {\n                delete value[column.columnDef];\n            }\n        });\n        if (!_.isEqual(this.table.filteredValues$.getValue(), value)) {\n            this.table.filteredValues$.next(value);\n        }\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    //Line\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    onLineChange(e) {\n        this.unfoldRow(e);\n        super.onLineChange(e);\n    }\n    //Footer\n    onFooterChange(e) { }\n    onPageChange(event) {\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return true;\n    }\n    load(sort, order, page, perPage, filter) {\n        return this.pagination.list(sort, order, page, perPage, filter);\n    }\n    reload() {\n        this.table.reload$.next();\n    }\n}\n\nclass DefaultKlesTreetableService extends DefaultKlesTableService {\n    constructor() {\n        super(...arguments);\n        this.getDepthDataAccessor = (item, property) => {\n            return item.value._status.depth;\n        };\n        this.getSortingDataAccessor = (item, property) => {\n            let value = item.value[property];\n            if (value) {\n                if (typeof value === 'string') {\n                    value = value.toLowerCase();\n                }\n                else if (typeof value === 'object') {\n                    if (value.key) {\n                        value = value.key;\n                    }\n                }\n            }\n            return value;\n        };\n        this.unfoldPredicate = (index, data) => {\n            return data.controls._status.value.isVisible && data.controls._unfold.value;\n        };\n    }\n    getParentDataAccessor(item, property) {\n        const [parent] = this.table.searchableTree.map(st => this.table.treeService.searchById(st, item.value._id))\n            .filter(node => {\n            return isSome(node);\n        })\n            .flatMap(node => {\n            return pipe(node, fold(() => -1, (n) => n.pathToRoot.length));\n        })\n            .map(node => this.table.dataSource.data.find(row => row.value._id === node._id));\n        return parent || null;\n    }\n    getTable() {\n        return this;\n    }\n    onLineOpen(e) {\n    }\n    onLineClose(e) {\n    }\n    onLineChange(e) {\n        this.changeChildrenVisibility(e.group, e.group.controls._status.value.isExpanded);\n        super.onLineChange(e);\n    }\n    changeChildrenVisibility(node, visibility) {\n        const paginator = node.value._status.paginator;\n        const start = (paginator?.pageIndex * paginator?.pageSize) || 0;\n        const end = (start + paginator?.pageSize) || node.value._status.children?.length;\n        node.value._status.children?.forEach((child, index) => {\n            const childGroup = this.table.getFormArray().controls.find(control => control.value._id === child._id);\n            if (childGroup) {\n                childGroup.controls._status.patchValue({\n                    isVisible: (index >= start && index < end) ? visibility : false,\n                }, { emitEvent: false });\n                this.changeChildrenVisibility(childGroup, childGroup.controls._status.value.isExpanded\n                    && ((index >= start && index < end) ? visibility : false));\n            }\n        });\n    }\n    addRecord(record, index) {\n        const searchableNode = this.table.converterService.toSearchableTree(record);\n        const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\n        const groups = this.table.createFormNode(treeNode);\n        if (typeof index !== 'undefined') {\n            this.table._lines.splice(index, 0, record);\n            groups.forEach((group, i) => {\n                this.table.getFormArray().insert(index + i, group);\n            });\n        }\n        else {\n            this.table._lines.push(record);\n            groups.forEach((group) => {\n                this.table.getFormArray().push(group);\n            });\n        }\n        this.table.searchableTree = this.table._lines.map(t => this.table.converterService.toSearchableTree(t));\n        this.updateDataSource();\n        return groups[0];\n    }\n    updateRow(row, options) {\n        const data = {\n            ...row.value,\n            _id: row._id,\n            // _status: { depth: row.depth, isExpanded: row.isExpanded, isVisible: row.isVisible }\n        };\n        return this.updateRecord(data, options);\n    }\n    addChild(parentId, record) {\n        const treeTableTree = this.table.searchableTree.map(st => this.table.converterService.toTreeTableTree(st));\n        const parent = treeTableTree.find(s => s._id === parentId);\n        const parentDepth = ~~parent?.depth;\n        if (parent) {\n            const searchableNode = this.table.converterService.toSearchableTree(record);\n            const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\n            treeNode.depth = ~~parentDepth + 1;\n            const groups = this.table.createFormNode(treeNode);\n            const indexParent = this.table.getFormArray().controls.findIndex((group) => group.value._id === parentId);\n            const index = indexParent;\n            +(parent.children?.length || 0);\n            if (parent.children) {\n                parent.children.push({ value: groups[0].getRawValue() });\n            }\n            else {\n                parent.children = [{ value: groups[0].getRawValue() }];\n            }\n            this.table._lines[indexParent].children = parent.children;\n            this.table._lines.splice(index + 1, 0, record);\n            groups.forEach((group, i) => {\n                this.table.getFormArray().insert(index + (i + 1), group);\n            });\n            this.table.searchableTree = this.table.getFormArray().controls.map(line => {\n                return {\n                    value: (line.value?._id === parentId) ? { ...line.value, children: parent.children, childrenCounter: ~~parent.children?.length } : line.value,\n                    _id: line.value?._id,\n                    children: (line.value?._id === parentId) ? parent.children : line.value?._status?.children,\n                    childrenCounter: (line.value?._id === parentId) ? ~~parent.children?.length : ~~line.value?._status?.childrenCounter,\n                    isBusy: line.value?._status?.isBusy || false\n                };\n            });\n            this.updateDataSource();\n            return groups[0];\n        }\n        return null;\n    }\n    static { this.ɵfac = /*@__PURE__*/ (() => { let ɵDefaultKlesTreetableService_BaseFactory; return function DefaultKlesTreetableService_Factory(t) { return (ɵDefaultKlesTreetableService_BaseFactory || (ɵDefaultKlesTreetableService_BaseFactory = i0.ɵɵgetInheritedFactory(DefaultKlesTreetableService)))(t || DefaultKlesTreetableService); }; })(); }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DefaultKlesTreetableService, factory: DefaultKlesTreetableService.ɵfac, providedIn: 'root' }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultKlesTreetableService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nclass KlesDragDropRowTreeTableService extends KlesDragDropRowTableService {\n    beforeDrop(event) {\n        const rowDrop = event.item.data;\n        const row = this.table.getFormArray().controls[event.currentIndex];\n        return of(row.value._status.depth === rowDrop.value._status.depth && row.value._status.parentId === rowDrop.value._status.parentId);\n    }\n    onDrop(event) {\n        this.beforeDrop(event).pipe(take(1)).subscribe((isValid) => {\n            if (isValid) {\n                const previousIndex = this.table.getFormArray().controls.findIndex((d) => d.value._id === event.item.data.value._id);\n                const currentIndex = (event.previousIndex < event.currentIndex ?\n                    this.findIndexLastChild(this.table.getFormArray().controls[event.currentIndex]) || event.currentIndex\n                    : event.currentIndex);\n                moveItemInArray(this.table.getFormArray().controls, previousIndex, currentIndex);\n                this.moveChildren(this.table.getFormArray().controls[currentIndex], currentIndex);\n                this.table._onDragDropRow.emit({\n                    currentIndex, previousIndex: previousIndex,\n                    group: this.table.getFormArray().controls[currentIndex]\n                });\n                this.table.dataSource.data = this.table.getFormArray().controls;\n                this.afterDrop(event);\n            }\n        });\n    }\n    moveChildren(parent, index) {\n        parent?.controls._status.value.children?.forEach((child) => {\n            const previousIndex = this.table.getFormArray().controls.findIndex((group) => group.controls._id.value === child._id);\n            if (previousIndex !== -1) {\n                if (previousIndex > index) {\n                    index++;\n                }\n                moveItemInArray(this.table.getFormArray().controls, previousIndex, index);\n                index = this.moveChildren(this.table.getFormArray().controls[index], index);\n            }\n        });\n        return index;\n    }\n    findIndexLastChild(parent) {\n        if (!parent.controls._status.value.children || !parent.controls._status.value.children.length) {\n            return null;\n        }\n        return Math.max(...parent.controls._status.value.children?.map((child) => {\n            return this.table.getFormArray().controls.findIndex((group) => group.controls._id.value === child._id);\n        }));\n    }\n    sortPredicate(index, item) {\n        return this.table.getFormArray().controls[index].controls._status.value.depth === item.data.controls._status.value.depth\n            && this.table.getFormArray().controls[index].controls._status.value.parentId === item.data.controls._status.value.parentId;\n    }\n}\n\nclass KlesLazyTreetableService extends classes(DefaultKlesTreetableService, KlesSelectionTableLazyService, KlesDragDropRowTreeTableService) {\n    constructor(data, child, selection) {\n        super({ super: KlesSelectionTableLazyService, arguments: ['#select', selection] });\n        this.data = data;\n        this.child = child;\n    }\n    //Header \n    onHeaderChange(e) {\n        const value = { ...this.table.formHeader.value };\n        this.table.columns().forEach(column => {\n            if (!column.filterable) {\n                delete value[column.columnDef];\n            }\n        });\n        if (!_.isEqual(this.table.filteredValues$.getValue(), value)) {\n            this.table.filteredValues$.next(value);\n        }\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    //Line\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    onLineChange(e) {\n        super.onLineChange(e);\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return this.sortPredicate(index, item);\n    }\n    changeChildrenVisibility(node, visibility) {\n        node.value._status.children?.forEach(child => {\n            const childGroup = this.table.getFormArray().controls.find(control => control.value._id === child._id);\n            if (childGroup) {\n                childGroup.controls._status.patchValue({\n                    isVisible: visibility,\n                }, { emitEvent: false });\n                this.changeChildrenVisibility(childGroup, childGroup.controls._status.value.isExpanded && visibility);\n            }\n        });\n    }\n    //Footer\n    onFooterChange(e) { }\n    onPageChange(event) {\n        // super.onPageChange(event);\n    }\n    load(sort, order, page, perPage, filter) {\n        return this.data.list(sort, order, page, perPage, filter);\n    }\n    loadChild(parentId, sort, order, page, perPage, filter) {\n        return this.child.loadChildren(parentId, sort, order, page, perPage, filter);\n    }\n    addChild(parentId, record) {\n        const searchableParent = this.table.searchableTree.map(s => {\n            return this.table.treeService.getById(s, parentId);\n        }).filter(Boolean)?.[0];\n        if (searchableParent) {\n            const searchableNode = this.table.converterService.toSearchableTree(record);\n            searchableParent.children ? searchableParent.children.push(searchableNode) : searchableParent.children = [searchableNode];\n            const treeTableTree = this.table.searchableTree.map(st => this.table.converterService.toTreeTableTree(st));\n            const treeTableParent = this.table.treeService.flatten(treeTableTree.map(s => {\n                return this.table.treeService.searchById(s, parentId);\n            }).find(s => pipe(O.isSome(s))))[0].value;\n            const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\n            treeNode.depth = ~~treeTableParent.pathToRoot.length + 1;\n            const groups = this.table.createFormNode(treeNode);\n            const parentIndex = this.table.getFormArray().controls.findIndex((group) => group.value._id === parentId);\n            this.table.getFormArray().controls[parentIndex].controls._status.patchValue({\n                children: (this.table.getFormArray().controls[parentIndex].controls._status.value.children || []).concat([treeNode]),\n                childrenCounter: (this.table.getFormArray().controls[parentIndex].controls._status.value.children?.length || 0) + 1\n            }, { emitEvent: false });\n            groups.forEach((group, index) => {\n                this.table.getFormArray().insert(parentIndex + index + 1, group);\n            });\n            this.updateDataSource();\n            return groups[0];\n        }\n    }\n    addChildren(parentId, record) {\n        return record.map(m => this.addChild(parentId, record));\n    }\n    deleteRow(rowId) {\n        const row = this.table.getFormArray().controls.find((group) => group.value._id === rowId);\n        if (row) {\n            row.controls._status.value.children?.forEach((child) => {\n                this.deleteRow(child._id);\n            });\n            const parentId = row.controls._status.value.parentId;\n            if (parentId) {\n                const parent = this.table.getFormArray().controls.find((group) => group.value._id === parentId);\n                if (parent) {\n                    parent.controls._status.patchValue({ children: parent.controls._status.value.children.filter(c => c._id !== rowId) }, { emitEvent: false });\n                }\n            }\n            const index = this.table.getFormArray().controls.findIndex((group) => group.value._id === rowId);\n            if (index !== -1) {\n                this.table.getFormArray().removeAt(index);\n            }\n            this.table.searchableTree = this.table.searchableTree.filter(searchableNode => searchableNode._id !== rowId);\n        }\n    }\n    deleteChildren(parentId) {\n        const parent = this.table.getFormArray().controls.find((group) => group.value._id === parentId);\n        if (parent?.controls._status.controls.children?.value) {\n            parent?.controls._status.controls.children?.value?.forEach((child) => {\n                this.deleteRow(child._id);\n            });\n            parent?.controls._status.patchValue({ children: [] }, { emitEvent: false });\n            const searchableParent = this.table.searchableTree.map(s => {\n                return this.table.treeService.getById(s, parentId);\n            })?.[0];\n            if (searchableParent) {\n                searchableParent.children = [];\n            }\n            this.updateDataSource();\n        }\n    }\n}\n\nclass KlesSelectionTreetableService extends KlesSelectionTableService {\n    constructor(column) {\n        super(column);\n    }\n    changeSelectionLine(e) {\n        if (this.table) {\n            if (e.column.columnDef === this.columnSelect && e.row) {\n                if (this.table.dataSource.filteredData.includes(e.group)) {\n                    const selected = e.group.controls[e.column.columnDef].value;\n                    this.updateChildrens(e.column, e.group, selected);\n                    this.updateParent(e.column, e.group);\n                    this.table.selection.clear();\n                    /* TODO not sure about this*/\n                    this.table.form.controls.rows.controls\n                        .filter((group) => group.controls[this.columnSelect].value === true)\n                        .forEach(control => {\n                        this.table.selection.select(control);\n                    });\n                    /* ***************** */\n                    this.table._onSelected.emit(this.table.selection.selected);\n                }\n            }\n            if (this.isAllSelected()) {\n                this.table.columns().filter(f => f.columnDef === this.columnSelect).map(m => m.headerCell.indeterminate = false);\n                this.table.formHeader.controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\n                this.table.tableService.onSelectIndeterminate.next(false);\n            }\n            else {\n                this.table.columns().filter(f => f.columnDef === this.columnSelect).map(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\n                this.table.tableService.onSelectIndeterminate.next(!this.table.selection.isEmpty());\n                if (this.table.selection.isEmpty()) {\n                    this.table.formHeader.controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\n                }\n            }\n            this.table.form.updateValueAndValidity();\n        }\n    }\n    childrenIsAllSelected(column, group) {\n        if (!group.value._status.children) {\n            return true;\n        }\n        return group.value._status.children.every(children => {\n            return this.table.dataSource.data.find(row => row.value._id === children._id).controls[column.columnDef].value === true;\n        });\n    }\n    childrenAtLeastOneSelected(column, group) {\n        if (!group.value._status.children) {\n            return true;\n        }\n        return group.value._status.children.some(children => {\n            const index = this.table.dataSource.data.findIndex(row => row.value._id === children._id);\n            return this.table.dataSource.data.find(row => row.value._id === children._id).controls[column.columnDef].value === true\n                || this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate === true;\n        });\n    }\n    isAllSelected() {\n        if (this.table) {\n            const numSelected = this.table.selection.selected\n                .filter(s => this.table.dataSource.filteredData.includes(s)).length;\n            const numRows = this.table.dataSource.filteredData.length;\n            return numSelected === numRows;\n        }\n        return false;\n    }\n    updateChildrens(column, group, selected) {\n        const childrens = group.controls._status.controls.children?.value || [];\n        childrens.forEach(children => {\n            const childGroup = this.table.dataSource.data.find(row => row.value._id === children._id);\n            if (childGroup.controls[column.columnDef].value !== selected) {\n                childGroup.controls[column.columnDef].patchValue(selected, { emitEvent: false });\n            }\n            this.updateChildrens(column, childGroup, selected);\n        });\n    }\n    updateParent(column, group) {\n        // const node = this.table.searchableTree.map(st => this.table.treeService.searchById(st, group.value._id)).find(st => st.isSome()).getOrElse(null);\n        const node = this.table.searchableTree\n            .map(st => this.table.treeService.searchById(st, group.value._id))\n            .find(st => pipe(O.isSome(st)));\n        if (node) {\n            // node.pathToRoot.forEach(parent => {\n            //     const parentGroup = this.table.dataSource.data.find(row => row.value._id === parent._id) as FormGroup;\n            //     const index = this.table.dataSource.data.findIndex(row => row.value._id === parent._id);\n            //     this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = false;\n            //     if (this.childrenIsAllSelected(column, parentGroup)) {\n            //         parentGroup.controls[column.columnDef].patchValue(true, { emitEvent: false });\n            //     } else if (this.childrenAtLeastOneSelected(column, parentGroup)) {\n            //         this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = true;\n            //         parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n            //     } else {\n            //         parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n            //     }\n            // })\n            pipe(node, O.map(m => m.pathToRoot.forEach(parent => {\n                const parentGroup = this.table.dataSource.data.find(row => row.value._id === parent._id);\n                const index = this.table.dataSource.data.findIndex(row => row.value._id === parent._id);\n                this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = false;\n                if (this.childrenIsAllSelected(column, parentGroup)) {\n                    parentGroup.controls[column.columnDef].patchValue(true, { emitEvent: false });\n                }\n                else if (this.childrenAtLeastOneSelected(column, parentGroup)) {\n                    this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = true;\n                    parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n                }\n                else {\n                    parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\n                }\n            })));\n        }\n    }\n}\n\nclass KlesTreetableService extends classes(DefaultKlesTreetableService, KlesSelectionTreetableService, KlesDragDropRowTreeTableService) {\n    constructor() {\n        super({ super: KlesSelectionTreetableService, arguments: ['#select'] });\n    }\n    onHeaderCellChange(e) {\n        this.changeSelectionHeader(e);\n    }\n    onCellChange(e) {\n        this.changeSelectionLine(e);\n    }\n    drop(e) {\n        this.onDrop(e);\n    }\n    getSortPredicate(index, item) {\n        return this.sortPredicate(index, item);\n    }\n    static { this.ɵfac = function KlesTreetableService_Factory(t) { return new (t || KlesTreetableService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: KlesTreetableService, factory: KlesTreetableService.ɵfac }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesTreetableService, [{\n        type: Injectable\n    }], () => [], null); })();\n\nclass KlesSelectionClickTableService {\n    constructor(column) {\n        this.columnSelect = column;\n    }\n    changeClickLine(group) {\n        if (this.table) {\n            if (this.table.dataSource.filteredData.includes(group)) {\n                if (!this.table.selection.isMultipleSelection()) {\n                    this.table.getFormArray().controls\n                        .filter((row) => row.value._id !== group.value._id)\n                        .forEach((row) => {\n                        row.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n                    });\n                }\n                if (!this.table.selection.isSelected(group)) {\n                    this.table.selection.select(group);\n                    group.controls[this.columnSelect]?.patchValue(true, { emitEvent: false });\n                }\n                else {\n                    this.table.selection.deselect(group);\n                    group.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n                }\n                this.table._onSelected.emit(this.table.selection.selected);\n            }\n            else {\n                this.table.selection.deselect(group);\n                group.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\n            }\n            this.table.ref.markForCheck();\n        }\n    }\n}\n\nclass KlesTextFilterTableService {\n    constructor() {\n        this.filteredValues = {};\n    }\n    filterData() {\n        if (this.table) {\n            this.filteredValues = this.table.formHeader.value;\n            this.table.dataSource.filterPredicate = this.createFilter();\n            this.table.dataSource.filter = JSON.stringify(this.filteredValues);\n        }\n    }\n    /**Filter */\n    createFilter() {\n        const myFilterPredicate = (data, filter) => {\n            let searchString = JSON.parse(filter);\n            const filterableColumn = this.table.columns().filter(f => f.filterable).map(m => m.columnDef);\n            searchString = _.pick(searchString, filterableColumn);\n            return Object.keys(searchString).filter(f => filterableColumn.includes(f)).every(key => {\n                let keyValue = data?.controls[key]?.value;\n                if (!keyValue && searchString[key].length === 0) {\n                    return true;\n                }\n                else if (!keyValue) {\n                    return false;\n                }\n                else if (!searchString[key]) {\n                    return true;\n                }\n                const column = this.table.columns().find(col => col.columnDef === key);\n                if (column.cell.property) {\n                    keyValue = data?.controls[key]?.value[column.cell.property];\n                }\n                return keyValue && keyValue.toString().trim().toLowerCase().indexOf(searchString[key].toLowerCase()) !== -1;\n            });\n        };\n        return myFilterPredicate;\n    }\n}\n\nvar AlignCell;\n(function (AlignCell) {\n    AlignCell[\"LEFT\"] = \"left\";\n    AlignCell[\"CENTER\"] = \"center\";\n    AlignCell[\"RIGHT\"] = \"right\";\n})(AlignCell || (AlignCell = {}));\n\nclass MaterialModule {\n    static { this.ɵfac = function MaterialModule_Factory(t) { return new (t || MaterialModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MaterialModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n            MatDatepickerModule,\n            MatDialogModule\n        ], imports: [CommonModule,\n            MatSliderModule,\n            MatButtonModule,\n            MatToolbarModule,\n            MatIconModule,\n            MatSidenavModule,\n            MatBadgeModule,\n            MatListModule,\n            MatGridListModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatSelectModule,\n            MatRadioModule,\n            MatDatepickerModule,\n            MatChipsModule,\n            MatTooltipModule,\n            MatTableModule,\n            MatPaginatorModule,\n            MatCardModule,\n            MatMenuModule,\n            MatTabsModule,\n            CdkTableModule,\n            MatProgressSpinnerModule,\n            MatCheckboxModule,\n            MatDialogModule,\n            MatAutocompleteModule,\n            MatProgressBarModule,\n            MatSortModule,\n            MatExpansionModule,\n            MatNativeDateModule,\n            MatSnackBarModule,\n            MatTreeModule,\n            MatSliderModule,\n            MatButtonModule,\n            MatSlideToggleModule,\n            ColorPickerModule,\n            DragDropModule, MatButtonModule,\n            MatToolbarModule,\n            MatIconModule,\n            MatSidenavModule,\n            MatBadgeModule,\n            MatListModule,\n            MatGridListModule,\n            MatInputModule,\n            MatFormFieldModule,\n            MatSelectModule,\n            MatRadioModule,\n            MatDatepickerModule,\n            MatChipsModule,\n            MatTooltipModule,\n            MatTableModule,\n            MatPaginatorModule,\n            MatCardModule,\n            MatMenuModule,\n            MatTabsModule,\n            CdkTableModule,\n            MatProgressSpinnerModule,\n            MatCheckboxModule,\n            MatDialogModule,\n            MatAutocompleteModule,\n            MatProgressBarModule,\n            MatSortModule,\n            MatExpansionModule,\n            MatNativeDateModule,\n            MatSnackBarModule,\n            MatTreeModule,\n            MatSliderModule,\n            MatButtonModule,\n            MatSlideToggleModule,\n            ColorPickerModule,\n            DragDropModule,\n            KlesMaterialDatepickerModule] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatSliderModule,\n                    MatButtonModule,\n                    MatToolbarModule,\n                    MatIconModule,\n                    MatSidenavModule,\n                    MatBadgeModule,\n                    MatListModule,\n                    MatGridListModule,\n                    MatFormFieldModule,\n                    MatInputModule,\n                    MatSelectModule,\n                    MatRadioModule,\n                    MatDatepickerModule,\n                    MatChipsModule,\n                    MatTooltipModule,\n                    MatTableModule,\n                    MatPaginatorModule,\n                    MatCardModule,\n                    MatMenuModule,\n                    MatTabsModule,\n                    CdkTableModule,\n                    MatProgressSpinnerModule,\n                    MatCheckboxModule,\n                    MatDialogModule,\n                    MatAutocompleteModule,\n                    MatProgressBarModule,\n                    MatSortModule,\n                    MatExpansionModule,\n                    MatNativeDateModule,\n                    MatSnackBarModule,\n                    MatTreeModule,\n                    MatSliderModule,\n                    MatButtonModule,\n                    MatSlideToggleModule,\n                    ColorPickerModule,\n                    DragDropModule\n                ],\n                exports: [\n                    MatButtonModule,\n                    MatToolbarModule,\n                    MatIconModule,\n                    MatSidenavModule,\n                    MatBadgeModule,\n                    MatListModule,\n                    MatGridListModule,\n                    MatInputModule,\n                    MatFormFieldModule,\n                    MatSelectModule,\n                    MatRadioModule,\n                    MatDatepickerModule,\n                    MatChipsModule,\n                    MatTooltipModule,\n                    MatTableModule,\n                    MatPaginatorModule,\n                    MatCardModule,\n                    MatMenuModule,\n                    MatTabsModule,\n                    CdkTableModule,\n                    MatProgressSpinnerModule,\n                    MatCheckboxModule,\n                    MatDialogModule,\n                    MatAutocompleteModule,\n                    MatProgressBarModule,\n                    MatSortModule,\n                    MatExpansionModule,\n                    MatNativeDateModule,\n                    MatSnackBarModule,\n                    MatTreeModule,\n                    MatSliderModule,\n                    MatButtonModule,\n                    MatSlideToggleModule,\n                    ColorPickerModule,\n                    DragDropModule,\n                    KlesMaterialDatepickerModule\n                ],\n                providers: [\n                    MatDatepickerModule,\n                    MatDialogModule\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MaterialModule, { imports: [CommonModule,\n        MatSliderModule,\n        MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatBadgeModule,\n        MatListModule,\n        MatGridListModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatRadioModule,\n        MatDatepickerModule,\n        MatChipsModule,\n        MatTooltipModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatCardModule,\n        MatMenuModule,\n        MatTabsModule,\n        CdkTableModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        MatSortModule,\n        MatExpansionModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n        MatTreeModule,\n        MatSliderModule,\n        MatButtonModule,\n        MatSlideToggleModule,\n        ColorPickerModule,\n        DragDropModule], exports: [MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSidenavModule,\n        MatBadgeModule,\n        MatListModule,\n        MatGridListModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatSelectModule,\n        MatRadioModule,\n        MatDatepickerModule,\n        MatChipsModule,\n        MatTooltipModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatCardModule,\n        MatMenuModule,\n        MatTabsModule,\n        CdkTableModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatAutocompleteModule,\n        MatProgressBarModule,\n        MatSortModule,\n        MatExpansionModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n        MatTreeModule,\n        MatSliderModule,\n        MatButtonModule,\n        MatSlideToggleModule,\n        ColorPickerModule,\n        DragDropModule,\n        KlesMaterialDatepickerModule] }); })();\n\nconst components = [\n    KlesTableComponent,\n    KlesLazyTableComponent,\n    KlesFormTextHeaderComponent,\n    KlesFormTextHeaderFilterComponent,\n    KlesFormDynamicHeaderFilterComponent,\n    KlesLeafComponent,\n    KlesNodeComponent,\n    KlesTreetableComponent,\n    KlesLazyTreetableComponent,\n    KlesUnfoldCellComponent\n];\nconst directives = [\n    KlesTableDirective,\n    KlesResizeColumnDirective,\n    KlesCellStyleDirective,\n    KlesComponentHeaderDirective,\n    KlesDynamicTreeCellDirective,\n    KlesTreetableDirective,\n    KlesDynamicCellDirective\n];\nconst services = [\n    AbstractKlesTableService,\n    AbstractKlesLazyTableService,\n    KlesTableService,\n    // KlesLazyTableService,\n    AbstractKlesTreeTableService,\n    AbstractKlesLazyTreetableService,\n    // KlesTreetableService,\n    DefaultKlesTreetableService,\n    // KlesLazyTreetableService,\n    ConverterService,\n    TreeService\n];\nconst pipes = [FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe];\nclass KlesMaterialTableModule {\n    static { this.ɵfac = function KlesMaterialTableModule_Factory(t) { return new (t || KlesMaterialTableModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: KlesMaterialTableModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [\n            services\n        ], imports: [CommonModule,\n            MaterialModule,\n            TranslateModule,\n            ReactiveFormsModule,\n            FormsModule,\n            KlesMaterialDynamicformsModule] }); }\n}\n(() => { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KlesMaterialTableModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    components,\n                    directives,\n                    pipes\n                ],\n                imports: [\n                    CommonModule,\n                    MaterialModule,\n                    TranslateModule,\n                    ReactiveFormsModule,\n                    FormsModule,\n                    KlesMaterialDynamicformsModule\n                ],\n                exports: [\n                    components,\n                    directives,\n                    pipes\n                ],\n                providers: [\n                    services\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(KlesMaterialTableModule, { declarations: [KlesTableComponent,\n        KlesLazyTableComponent,\n        KlesFormTextHeaderComponent,\n        KlesFormTextHeaderFilterComponent,\n        KlesFormDynamicHeaderFilterComponent,\n        KlesLeafComponent,\n        KlesNodeComponent,\n        KlesTreetableComponent,\n        KlesLazyTreetableComponent,\n        KlesUnfoldCellComponent, KlesTableDirective,\n        KlesResizeColumnDirective,\n        KlesCellStyleDirective,\n        KlesComponentHeaderDirective,\n        KlesDynamicTreeCellDirective,\n        KlesTreetableDirective,\n        KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe], imports: [CommonModule,\n        MaterialModule,\n        TranslateModule,\n        ReactiveFormsModule,\n        FormsModule,\n        KlesMaterialDynamicformsModule], exports: [KlesTableComponent,\n        KlesLazyTableComponent,\n        KlesFormTextHeaderComponent,\n        KlesFormTextHeaderFilterComponent,\n        KlesFormDynamicHeaderFilterComponent,\n        KlesLeafComponent,\n        KlesNodeComponent,\n        KlesTreetableComponent,\n        KlesLazyTreetableComponent,\n        KlesUnfoldCellComponent, KlesTableDirective,\n        KlesResizeColumnDirective,\n        KlesCellStyleDirective,\n        KlesComponentHeaderDirective,\n        KlesDynamicTreeCellDirective,\n        KlesTreetableDirective,\n        KlesDynamicCellDirective, FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe] }); })();\n\n/*\n * Public API Surface of kles-material-table\n */\n/**MODEL */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractCell, AbstractKlesLazyTableService, AbstractKlesLazyTreetableService, AbstractKlesTableService, AbstractKlesTreeTableService, AbstractTreeCell, AlignCell, CellPipe, ConverterService, DefaultKlesTableService, DefaultKlesTreetableService, ElevationPipe, FieldPipe, GroupPipe, KlesCellStyleDirective, KlesComponentHeaderDirective, KlesDragDropRowTableService, KlesDragDropRowTreeTableService, KlesDynamicCellDirective, KlesDynamicTreeCellDirective, KlesFormDynamicHeaderFilterComponent, KlesFormTextHeaderComponent, KlesFormTextHeaderFilterComponent, KlesHeaderFilterTableService, KlesLazyTableComponent, KlesLazyTableService, KlesLazyTreetableComponent, KlesLazyTreetableService, KlesLeafComponent, KlesMaterialTableModule, KlesNodeComponent, KlesResizeColumnDirective, KlesSelectionClickTableService, KlesSelectionTableLazyService, KlesSelectionTableService, KlesSelectionTreetableService, KlesTableComponent, KlesTableDirective, KlesTableService, KlesTextFilterTableService, KlesTreetableComponent, KlesTreetableDirective, KlesTreetableService, KlesUnfoldCellComponent, KlesUnfoldRowTableService, MatTreetableData, RowDragDisabledPipe, RowPipe, RowTreePipe, Span, SpanPipe, TreeService };\n//# sourceMappingURL=3kles-kles-material-table.mjs.map\n","map":null,"preliminaryFileName":"3kles-kles-material-table.mjs","sourcemapFileName":"3kles-kles-material-table.mjs.map"},{"fileName":"3kles-kles-material-table.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"3kles-kles-material-table.mjs\",\"sources\":[\"../../../projects/kles-material-table/src/lib/directives/table.directive.ts\",\"../../../projects/kles-material-table/src/lib/directives/resizecolumn.directive.ts\",\"../../../projects/kles-material-table/src/lib/directives/cellstyle.directive.ts\",\"../../../projects/kles-material-table/src/lib/directives/dynamic-component.directive.ts\",\"../../../projects/kles-material-table/src/lib/component/cell/cell.abstract.ts\",\"../../../projects/kles-material-table/src/lib/component/treetable/cell/treecell.abstract.ts\",\"../../../projects/kles-material-table/src/lib/component/cell/unfoldcell.component.ts\",\"../../../projects/kles-material-table/src/lib/directives/dynamic-cell.directive.ts\",\"../../../projects/kles-material-table/src/lib/component/treetable/cell/leaf.component.ts\",\"../../../projects/kles-material-table/src/lib/component/treetable/cell/node.component.ts\",\"../../../projects/kles-material-table/src/lib/directives/dynamic-treecell.directive.ts\",\"../../../projects/kles-material-table/src/lib/directives/treetable.directive.ts\",\"../../../projects/kles-material-table/src/lib/animations/row.animation.ts\",\"../../../projects/kles-material-table/src/lib/pipe/field.pipe.ts\",\"../../../projects/kles-material-table/src/lib/pipe/group.pipe.ts\",\"../../../projects/kles-material-table/src/lib/pipe/elevation.pipe.ts\",\"../../../projects/kles-material-table/src/lib/pipe/row.pipe.ts\",\"../../../projects/kles-material-table/src/lib/pipe/rowdragdisabled.pipe.ts\",\"../../../projects/kles-material-table/src/lib/enums/span.enum.ts\",\"../../../projects/kles-material-table/src/lib/pipe/span.pipe.ts\",\"../../../projects/kles-material-table/src/lib/pipe/cell.pipe.ts\",\"../../../projects/kles-material-table/src/lib/services/abstracttable.service.ts\",\"../../../projects/kles-material-table/src/lib/component/table/table.component.html\",\"../../../projects/kles-material-table/src/lib/component/table/table.component.ts\",\"../../../projects/kles-material-table/src/lib/services/lazy/abstractlazytable.service.ts\",\"../../../projects/kles-material-table/src/lib/component/lazytable/lazytable.component.html\",\"../../../projects/kles-material-table/src/lib/component/lazytable/lazytable.component.ts\",\"../../../projects/kles-material-table/src/lib/component/header/textheader.component.ts\",\"../../../projects/kles-material-table/src/lib/component/header/textheaderfilter.component.ts\",\"../../../projects/kles-material-table/src/lib/component/header/dynamic-headerfilter.component.ts\",\"../../../projects/kles-material-table/src/lib/component/treetable/mat-treetable-datasource.ts\",\"../../../projects/kles-material-table/src/lib/services/treetable/tree.service.ts\",\"../../../projects/kles-material-table/src/lib/services/treetable/converter.service.ts\",\"../../../projects/kles-material-table/src/lib/pipe/rowtree.pipe.ts\",\"../../../projects/kles-material-table/src/lib/services/treetable/abstracttreetable.service.ts\",\"../../../projects/kles-material-table/src/lib/component/treetable/treetable.component.html\",\"../../../projects/kles-material-table/src/lib/component/treetable/treetable.component.ts\",\"../../../projects/kles-material-table/src/lib/services/lazy/abstractlazytreetable.service.ts\",\"../../../projects/kles-material-table/src/lib/component/lazytreetable/lazytreetable.component.html\",\"../../../projects/kles-material-table/src/lib/component/lazytreetable/lazytreetable.component.ts\",\"../../../projects/kles-material-table/src/lib/services/defaulttable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/selection/selectiontable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/filter/headerfilter-table.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/dragdrop/dragdroprow.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/unfoldrow/unfoldrow.service.ts\",\"../../../projects/kles-material-table/src/lib/services/table.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/selection/selectiontablelazy.service.ts\",\"../../../projects/kles-material-table/src/lib/services/lazy/lazytable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/treetable/defaulttreetable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/dragdrop/dragdroprowtree.service.ts\",\"../../../projects/kles-material-table/src/lib/services/lazy/lazytreetable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/selection/selectiontreetable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/treetable/treetable.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/selectionclick/selectionclick.service.ts\",\"../../../projects/kles-material-table/src/lib/services/features/filter/textfiltertable.service.ts\",\"../../../projects/kles-material-table/src/lib/enums/align.enum.ts\",\"../../../projects/kles-material-table/src/lib/modules/material.module.ts\",\"../../../projects/kles-material-table/src/lib/table.module.ts\",\"../../../projects/kles-material-table/src/public-api.ts\",\"../../../projects/kles-material-table/src/3kles-kles-material-table.ts\"],\"sourcesContent\":[\"import { EnumType, KlesFormColorComponent, KlesFormDateComponent, KlesFormInputClearableComponent, KlesFormSelectSearchComponent } from '@3kles/kles-material-dynamicforms';\\r\\nimport { ViewContainerRef, Injector, ComponentFactoryResolver, ComponentRef, Directive, Input, OnInit, OnChanges, SimpleChanges, Output, EventEmitter, signal } from '@angular/core';\\r\\nimport { BehaviorSubject } from 'rxjs';\\r\\nimport { KlesFormDynamicHeaderFilterComponent } from '../../public-api';\\r\\nimport { KlesTableConfig } from '../models/tableconfig.model';\\r\\nimport { MatPaginatorIntl } from '@angular/material/paginator';\\r\\n\\r\\n@Directive({\\r\\n    selector: '[klesTable]'\\r\\n})\\r\\nexport class KlesTableDirective implements OnInit, OnChanges {\\r\\n    @Input() tableConfig: KlesTableConfig;\\r\\n    @Input() lines: any[];\\r\\n    @Input() footer: any;\\r\\n\\r\\n    @Output() _onLoaded = new EventEmitter();\\r\\n    @Output() _onSelected = new EventEmitter();\\r\\n    @Output() _onChangeHeaderCell = new EventEmitter();\\r\\n    @Output() _onChangeCell = new EventEmitter();\\r\\n    @Output() _onChangeFooterCell = new EventEmitter();\\r\\n    @Output() _onStatusHeaderChange = new EventEmitter();\\r\\n\\r\\n    @Output() _onClick = new EventEmitter();\\r\\n\\r\\n    componentRef: ComponentRef<any>;\\r\\n\\r\\n    constructor(private resolver: ComponentFactoryResolver,\\r\\n        private container: ViewContainerRef) { }\\r\\n\\r\\n    ngOnInit() {\\r\\n        // console.log('Directive KlesTable OnInit=', this.tableConfig);\\r\\n        // if (this.tableConfig) {\\r\\n        //     console.log('Directive KlesTable OnInit BuildComp=', this.tableConfig);\\r\\n        //     this.buildComponent();\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges) {\\r\\n        if (changes.tableConfig) {\\r\\n            this.tableConfig = changes.tableConfig.currentValue;\\r\\n            if (this.tableConfig) {\\r\\n                this.buildComponent();\\r\\n                if (!changes.lines && !this.componentRef.instance.lines) {\\r\\n                    this.lines = [];\\r\\n                    this.componentRef.instance.lines = [];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (changes.lines && this.componentRef) {\\r\\n            this.lines = changes.lines.currentValue;\\r\\n            this.componentRef.instance.lines = this.lines;\\r\\n        }\\r\\n\\r\\n        if (changes.footer && this.componentRef) {\\r\\n            this.footer = changes.footer.currentValue;\\r\\n            this.componentRef.instance.footer = this.footer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    buildComponent() {\\r\\n        const options = {\\r\\n            providers: [\\r\\n                {\\r\\n                    provide: 'tableService',\\r\\n                    useValue: this.tableConfig.tableService\\r\\n                },\\r\\n                ...this.tableConfig.customMatPaginatorIntl ? [{\\r\\n                    provide: MatPaginatorIntl,\\r\\n                    useClass: this.tableConfig.customMatPaginatorIntl\\r\\n                }] : []\\r\\n            ]\\r\\n        };\\r\\n        const injector: Injector = Injector.create(options);\\r\\n        const factory = this.resolver.resolveComponentFactory(\\r\\n            this.tableConfig.tableComponent\\r\\n        );\\r\\n\\r\\n        if (this.componentRef) {\\r\\n            this.componentRef.destroy();\\r\\n        }\\r\\n\\r\\n        this.componentRef = this.container.createComponent(factory, 0, injector);\\r\\n\\r\\n        this.componentRef.instance.columns = signal(this.tableConfig.columns.map(m => {\\r\\n            const obj = { ...m };\\r\\n            obj.headerCell.filterable = obj.filterable;\\r\\n            obj.headerCell.sortable = obj.sortable;\\r\\n\\r\\n            if ((obj.filterable || obj.headerCell.filterable) && !obj.headerCell.component && obj.headerCell.type) {\\r\\n                obj.headerCell.component = KlesFormDynamicHeaderFilterComponent;\\r\\n                switch (obj.headerCell.type) {\\r\\n                    case EnumType.date:\\r\\n                        obj.headerCell.filterComponent = KlesFormDateComponent;\\r\\n                        break;\\r\\n                    case EnumType.color:\\r\\n                        obj.headerCell.filterComponent = KlesFormColorComponent;\\r\\n                        break;\\r\\n                    case EnumType.list:\\r\\n                        obj.headerCell.filterComponent = KlesFormInputClearableComponent;\\r\\n                        obj.headerCell.autocomplete = true;\\r\\n                        obj.headerCell.options = new BehaviorSubject<any[]>([]);\\r\\n                        break;\\r\\n                    case EnumType.multi:\\r\\n                        obj.headerCell.filterComponent = KlesFormSelectSearchComponent;\\r\\n                        obj.headerCell.autocomplete = true;\\r\\n                        obj.headerCell.options = new BehaviorSubject<any[]>([]);\\r\\n                        obj.headerCell.multiple = true;\\r\\n                        break;\\r\\n                    default:\\r\\n                        obj.headerCell.filterComponent = KlesFormInputClearableComponent;\\r\\n                        obj.headerCell.inputType = obj.headerCell.type;\\r\\n                        break;\\r\\n\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return obj;\\r\\n        }));\\r\\n        if (this.tableConfig.options) {\\r\\n            this.componentRef.instance.options = this.tableConfig.options;\\r\\n        }\\r\\n        if (this.tableConfig.selectionMode !== undefined) {\\r\\n            this.componentRef.instance.selectionMode = this.tableConfig.selectionMode;\\r\\n        }\\r\\n        if (this.tableConfig.sortConfig) {\\r\\n            this.componentRef.instance.sortConfig = this.tableConfig.sortConfig;\\r\\n        }\\r\\n        //PAGINATION\\r\\n        if (this.tableConfig.hidePaginator) {\\r\\n            this.componentRef.instance.hidePaginator = this.tableConfig.hidePaginator;\\r\\n        }\\r\\n        if (this.tableConfig.pageSize) {\\r\\n            this.componentRef.instance.pageSize = this.tableConfig.pageSize;\\r\\n        }\\r\\n        if (this.tableConfig.pageSizeOptions) {\\r\\n            this.componentRef.instance.pageSizeOptions = this.tableConfig.pageSizeOptions;\\r\\n        }\\r\\n        //VALIDATION\\r\\n        if (this.tableConfig.lineValidations) {\\r\\n            this.componentRef.instance.lineValidations = this.tableConfig.lineValidations;\\r\\n        }\\r\\n        if (this.tableConfig.lineAsyncValidations) {\\r\\n            this.componentRef.instance.lineAsyncValidations = this.tableConfig.lineAsyncValidations;\\r\\n        }\\r\\n        //FOOTER\\r\\n        if (this.tableConfig.showFooter) {\\r\\n            this.componentRef.instance.showFooter = this.tableConfig.showFooter;\\r\\n        }\\r\\n        if (this.tableConfig.ngClassRow) {\\r\\n            this.componentRef.instance.ngClassRow = this.tableConfig.ngClassRow;\\r\\n        }\\r\\n\\r\\n        if (this.tableConfig.multiTemplate) {\\r\\n            this.componentRef.instance.multiTemplate = this.tableConfig.multiTemplate;\\r\\n            this.componentRef.instance.templates = this.tableConfig.templates || [];\\r\\n            this.componentRef.instance.templateUnfold = this.tableConfig.templateUnfold;\\r\\n        }\\r\\n\\r\\n        this.componentRef.instance.dragDropRows = this.tableConfig.dragDropRows;\\r\\n        this.componentRef.instance.dragDropRowsOptions = { autoScrollStep: 5, ...this.tableConfig.dragDropRowsOptions };\\r\\n        this.componentRef.instance.id = this.tableConfig.id;\\r\\n\\r\\n        // this.componentRef.instance.lines = [...this.lines];\\r\\n\\r\\n        this.componentRef.instance._onChangeHeaderCell = this._onChangeHeaderCell;\\r\\n        this.componentRef.instance._onChangeCell = this._onChangeCell;\\r\\n        this.componentRef.instance._onChangeFooterCell = this._onChangeFooterCell;\\r\\n        this.componentRef.instance._onSelected = this._onSelected;\\r\\n        this.componentRef.instance._onLoaded = this._onLoaded;\\r\\n        this.componentRef.instance._onStatusHeaderChange = this._onStatusHeaderChange;\\r\\n        this.componentRef.instance._onClick = this._onClick;\\r\\n    }\\r\\n}\\r\\n\",\"import { Directive, OnInit, Renderer2, Input, ElementRef } from \\\"@angular/core\\\";\\r\\n\\r\\n@Directive({\\r\\n    selector: \\\"[klesResizeColumn]\\\"\\r\\n})\\r\\nexport class KlesResizeColumnDirective implements OnInit {\\r\\n    @Input(\\\"klesResizeColumn\\\") resizable: boolean;\\r\\n    @Input() index: number;\\r\\n\\r\\n    private startX: number;\\r\\n    private startWidth: number;\\r\\n    private column: HTMLElement;\\r\\n    private table: HTMLElement;\\r\\n    private pressed: boolean;\\r\\n\\r\\n    constructor(private renderer: Renderer2, private el: ElementRef) {\\r\\n        this.column = this.el.nativeElement;\\r\\n    }\\r\\n\\r\\n    ngOnInit() {\\r\\n        if (this.resizable) {\\r\\n            const row = this.renderer.parentNode(this.column);\\r\\n            const thead = this.renderer.parentNode(row);\\r\\n            this.table = this.renderer.parentNode(thead);\\r\\n\\r\\n            const resizer = this.renderer.createElement(\\\"span\\\");\\r\\n            this.renderer.addClass(resizer, \\\"resize-holder\\\");\\r\\n            this.renderer.appendChild(this.column, resizer);\\r\\n            this.renderer.listen(resizer, \\\"mousedown\\\", this.onMouseDown);\\r\\n            this.renderer.listen(this.table, \\\"mousemove\\\", this.onMouseMove);\\r\\n            this.renderer.listen(\\\"document\\\", \\\"mouseup\\\", this.onMouseUp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    onMouseDown = (event: MouseEvent) => {\\r\\n        this.pressed = true;\\r\\n        this.startX = event.pageX;\\r\\n        this.startWidth = this.column.offsetWidth;\\r\\n    };\\r\\n\\r\\n    onMouseMove = (event: MouseEvent) => {\\r\\n        const offset = 35;\\r\\n        if (this.pressed && event.buttons) {\\r\\n            this.renderer.addClass(this.table, \\\"resizing\\\");\\r\\n\\r\\n            // Calculate width of column\\r\\n            let width =\\r\\n                this.startWidth + (event.pageX - this.startX - offset);\\r\\n\\r\\n            const tableCells = Array.from(this.table.querySelectorAll(\\\".mat-row\\\")).map(\\r\\n                (row: any) => row.querySelectorAll(\\\".mat-cell\\\").item(this.index)\\r\\n            );\\r\\n\\r\\n            // Set table header width\\r\\n            this.renderer.setStyle(this.column, \\\"width\\\", `${width}px`);\\r\\n\\r\\n            // Set table cells width\\r\\n            for (const cell of tableCells) {\\r\\n                this.renderer.setStyle(cell, \\\"width\\\", `${width}px`);\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n    onMouseUp = (event: MouseEvent) => {\\r\\n        if (this.pressed) {\\r\\n            this.pressed = false;\\r\\n            this.renderer.removeClass(this.table, \\\"resizing\\\");\\r\\n        }\\r\\n    };\\r\\n}\\r\\n\",\"import { ChangeDetectorRef, ElementRef, EmbeddedViewRef, Input, OnChanges, Renderer2, SimpleChanges, Type } from '@angular/core';\\r\\nimport { Directive } from '@angular/core';\\r\\nimport { SafeStyle } from '@angular/platform-browser';\\r\\n\\r\\n@Directive({\\r\\n    selector: \\\"[klesCellStyle]\\\"\\r\\n})\\r\\nexport class KlesCellStyleDirective implements OnChanges {\\r\\n\\r\\n    @Input() row;\\r\\n    @Input() column;\\r\\n\\r\\n    private domElement: any;\\r\\n    private context: any;\\r\\n\\r\\n\\r\\n    constructor(private elementRef: ElementRef, cdRef: ChangeDetectorRef) {\\r\\n        this.domElement = this.elementRef.nativeElement;\\r\\n        this.context = ((cdRef as EmbeddedViewRef<Type<any>>).context);\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        const style: SafeStyle = this.context.getCellStyle(this.row, this.column);\\r\\n        if (style) {\\r\\n            this.domElement.style = style;\\r\\n        }\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"import { IKlesFieldConfig } from '@3kles/kles-material-dynamicforms';\\r\\nimport { Directive, Input, OnInit, ComponentFactoryResolver, ViewContainerRef, ComponentRef, Type, OnChanges, SimpleChanges } from '@angular/core';\\r\\nimport { UntypedFormGroup } from '@angular/forms';\\r\\n\\r\\n@Directive({\\r\\n    selector: '[klesComponentHeader]'\\r\\n})\\r\\nexport class KlesComponentHeaderDirective implements OnInit, OnChanges {\\r\\n    @Input() component: Type<any>;\\r\\n    @Input() value: any;\\r\\n    @Input() group?: UntypedFormGroup;\\r\\n    @Input() field?: IKlesFieldConfig;\\r\\n\\r\\n\\r\\n    componentRef: ComponentRef<any>;\\r\\n\\r\\n    constructor(private resolver: ComponentFactoryResolver,\\r\\n        private container: ViewContainerRef) { }\\r\\n\\r\\n    ngOnInit() {\\r\\n        this.buildComponent();\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        if (changes.component && !changes.component.isFirstChange()) {\\r\\n            this.component = changes.component.currentValue;\\r\\n            this.buildComponent();\\r\\n        }\\r\\n        if (changes.value && !changes.value.isFirstChange()) {\\r\\n            this.value = changes.value.currentValue;\\r\\n            this.componentRef.instance.value = this.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    buildComponent() {\\r\\n        const factory = this.resolver.resolveComponentFactory(\\r\\n            this.component\\r\\n        );\\r\\n        if (this.componentRef) this.componentRef.destroy();\\r\\n        this.componentRef = this.container.createComponent(factory);\\r\\n        this.componentRef.instance.component = this.component;\\r\\n        this.componentRef.instance.value = this.value;\\r\\n        this.componentRef.instance.field = this.field;\\r\\n        this.componentRef.instance.group = this.group;\\r\\n    }\\r\\n}\\r\\n\",\"import { IKlesFieldConfig } from '@3kles/kles-material-dynamicforms';\\r\\nimport { UntypedFormGroup } from '@angular/forms';\\r\\n\\r\\nexport abstract class AbstractCell<T> {\\r\\n    column: T;\\r\\n    field: IKlesFieldConfig;\\r\\n    group: UntypedFormGroup;\\r\\n    siblingFields?: T[];\\r\\n\\r\\n}\\r\\n\",\"import { UntypedFormGroup } from '@angular/forms';\\r\\nimport { KlesTreeColumnConfig } from '../../../models/columnconfig.model';\\r\\nimport { AbstractCell } from '../../cell/cell.abstract';\\r\\n\\r\\nexport abstract class AbstractTreeCell extends AbstractCell<KlesTreeColumnConfig> {\\r\\n    row: UntypedFormGroup;\\r\\n\\r\\n    formatIndentation(node: UntypedFormGroup, step: number = 5): string {\\r\\n        return '&nbsp;'.repeat(node.value._status.depth * step);\\r\\n    }\\r\\n\\r\\n    onNodeClick(row) {\\r\\n        row.controls._status.patchValue({\\r\\n            isExpanded: !row.value._status.isExpanded\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"import { Component, ViewEncapsulation } from \\\"@angular/core\\\";\\r\\nimport { AbstractCell } from \\\"./cell.abstract\\\";\\r\\nimport { KlesColumnConfig } from \\\"../../models/columnconfig.model\\\";\\r\\nimport { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { IKlesCellFieldConfig } from \\\"../../models/cell.model\\\";\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-fold',\\r\\n    encapsulation: ViewEncapsulation.None,\\r\\n    template: `\\r\\n            <div>\\r\\n                @if ((!templateUnfold?.disabled || !templateUnfold?.disabled(group))) {\\r\\n                    <button mat-icon-button aria-label=\\\"expand row\\\" (click)=\\\"onFoldClick(group); $event.stopPropagation()\\\">\\r\\n                        <mat-icon> {{group.value._unfold ? 'keyboard_arrow_up' : 'keyboard_arrow_down'}} </mat-icon>\\r\\n                    </button>\\r\\n                }\\r\\n\\r\\n                <ng-container klesDynamicField [field]=\\\"field\\\"\\r\\n                    [group]=\\\"group\\\" [siblingFields]=\\\"siblingFields\\\">\\r\\n                </ng-container>\\r\\n            </div>\\r\\n    `,\\r\\n    styles: [\\r\\n\\r\\n    ],\\r\\n})\\r\\n\\r\\nexport class KlesUnfoldCellComponent extends AbstractCell<KlesColumnConfig> {\\r\\n    // disabled: (row: UntypedFormGroup) => boolean;\\r\\n\\r\\n    templateUnfold: { cells: IKlesCellFieldConfig[], multiUnfold?: boolean; disabled?: (row: UntypedFormGroup) => boolean; };\\r\\n\\r\\n    onFoldClick(row: any): void {\\r\\n        row.controls._unfold.patchValue(!row.value._unfold);\\r\\n    }\\r\\n}\\r\\n\",\"import { KlesDynamicFieldDirective } from '@3kles/kles-material-dynamicforms';\\r\\nimport { Directive, OnInit, OnChanges, OnDestroy, Input, SimpleChanges } from '@angular/core';\\r\\nimport { KlesColumnConfig } from '../models/columnconfig.model';\\r\\nimport { KlesUnfoldCellComponent } from '../component/cell/unfoldcell.component';\\r\\n\\r\\n\\r\\n@Directive({\\r\\n    selector: '[klesDynamicCell]'\\r\\n})\\r\\nexport class KlesDynamicCellDirective extends KlesDynamicFieldDirective implements OnInit, OnChanges, OnDestroy {\\r\\n\\r\\n    @Input() column: KlesColumnConfig;\\r\\n    @Input() config?: any;\\r\\n\\r\\n    ngOnInit() {\\r\\n        super.ngOnInit();\\r\\n    }\\r\\n\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        super.ngOnChanges(changes);\\r\\n    }\\r\\n\\r\\n    ngOnDestroy(): void {\\r\\n        super.ngOnDestroy();\\r\\n    }\\r\\n\\r\\n    buildComponent() {\\r\\n        if (this.column.canUnfold) {\\r\\n            if (this.componentRef) { this.componentRef.destroy(); }\\r\\n            this.componentRef = this.container.createComponent(KlesUnfoldCellComponent);\\r\\n            this.componentRef.instance.field = this.field;\\r\\n            this.componentRef.instance.group = this.group;\\r\\n            this.componentRef.instance.siblingFields = this.siblingFields;\\r\\n            this.componentRef.instance.templateUnfold = this.config?.templateUnfold;\\r\\n        } else {\\r\\n            super.buildComponent();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"import { Component } from \\\"@angular/core\\\";\\r\\nimport { AbstractTreeCell } from \\\"./treecell.abstract\\\";\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-leaf',\\r\\n    template: `\\r\\n        <div [innerHTML]=\\\"formatIndentation(row)\\\"></div>\\r\\n        <ng-container klesDynamicCell [field]=\\\"field\\\" [group]=\\\"group\\\" [column]=\\\"column\\\">\\r\\n        </ng-container>\\r\\n    `,\\r\\n    styles: [\\r\\n        `:host { display: inline-flex}`\\r\\n    ]\\r\\n})\\r\\n\\r\\nexport class KlesLeafComponent extends AbstractTreeCell {\\r\\n\\r\\n}\\r\\n\",\"import { Component, QueryList, ViewChild, ViewChildren, ViewEncapsulation } from \\\"@angular/core\\\";\\r\\nimport { AbstractTreeCell } from \\\"./treecell.abstract\\\";\\r\\nimport { MatPaginator, PageEvent } from \\\"@angular/material/paginator\\\";\\r\\nimport { FormGroup, UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { IKlesCellFieldConfig } from \\\"../../../models/cell.model\\\";\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-node',\\r\\n    encapsulation: ViewEncapsulation.None,\\r\\n    template: `\\r\\n        <div style=\\\"display: flex; flex-direction: column; flex: auto;\\\">\\r\\n        <div style=\\\"display:flex; align-items: center; gap:3px\\\">\\r\\n            @if (column.canExpand) {\\r\\n                <div [innerHTML]=\\\"formatIndentation(row)\\\"></div>\\r\\n            }\\r\\n        \\r\\n            @if (!row.getRawValue()?._status?.isBusy && row.value._status.childrenCounter > 0) {\\r\\n                <mat-icon class=\\\"size-16\\\" (click)=\\\"onNodeClick(row)\\\">\\r\\n                    {{row.value._status.isExpanded ? 'remove' : 'add'}}\\r\\n                </mat-icon>\\r\\n            }\\r\\n\\r\\n            @if (row.getRawValue()?._status?.isBusy && column.canExpand) {\\r\\n                <mat-spinner diameter=\\\"25\\\"></mat-spinner>\\r\\n            }\\r\\n\\r\\n            <ng-container klesDynamicCell [field]=\\\"field\\\"\\r\\n                [group]=\\\"group\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"paginator\\\">\\r\\n            @if (column.paginator && row.value._status.childrenCounter>0 && row.value._status.isExpanded) {\\r\\n                <mat-paginator #treePaginator\\r\\n                    [length]=\\\"row.value._status.paginator?.length\\\"\\r\\n                    [pageSize]=\\\"row.value._status.paginator?.pageSize\\\"\\r\\n                    [showFirstLastButtons]=\\\"column.paginatorOption?.showFirstLastButtons\\\"\\r\\n                    [hidePageSize]=\\\"column.paginatorOption?.hidePageSize === undefined ? true : column.paginatorOption?.hidePageSize\\\"\\r\\n                    [pageSizeOptions]=\\\"column.paginatorOption?.pageSizeOptions || [5, 10, 25, 100]\\\"\\r\\n                    [pageIndex]=\\\"row.value._status.paginator?.pageIndex\\\"\\r\\n                    (page)=\\\"handlePageEvent($event)\\\">\\r\\n                </mat-paginator>\\r\\n            }\\r\\n        </div>\\r\\n\\r\\n        </div>\\r\\n    \\r\\n    \\r\\n    `,\\r\\n    styles: [\\r\\n        'app-kles-node mat-icon {cursor: pointer}',\\r\\n        `app-kles-node .size-16 {\\r\\n                 width: 16px;\\r\\n                 height: 16px;\\r\\n                 font-size: 16px;\\r\\n                 color:#404040;\\r\\n                 background: white;\\r\\n                 border: 1px solid #C0C0C0;margin-right:4px;}\\r\\n                 `,\\r\\n        `app-kles-node { display: inline-flex; align-items: center; flex-direction: row; width: 100%; }`,\\r\\n        `app-kles-node .mat-mdc-paginator-range-label { margin: 0px }`,\\r\\n        `app-kles-node .mat-mdc-paginator { background: transparent }`,\\r\\n        `app-kles-node .mat-mdc-paginator-range-label { min-width: max-content }`,\\r\\n        `app-kles-node .mat-mdc-paginator-container { padding: 0 2px 0 8px; min-height: auto }`,\\r\\n        `app-kles-node .paginator { display: flex; width: 100%; justify-content: end; }`,\\r\\n    ],\\r\\n})\\r\\n\\r\\nexport class KlesNodeComponent extends AbstractTreeCell {\\r\\n\\r\\n    templateUnfold: { cells: IKlesCellFieldConfig[], multiUnfold?: boolean; disabled?: (row: UntypedFormGroup) => boolean; }\\r\\n\\r\\n    onNodeClick(row: any): void {\\r\\n        (this.group.controls._status as FormGroup).controls.paginator?.patchValue({\\r\\n            pageIndex: 0\\r\\n        }, { emitEvent: false });\\r\\n        super.onNodeClick(row);\\r\\n    }\\r\\n\\r\\n    handlePageEvent(e: PageEvent) {\\r\\n        this.group.controls._status.patchValue({\\r\\n            paginator: {\\r\\n                pageIndex: e.pageIndex,\\r\\n                pageSize: e.pageSize,\\r\\n                length: e.length\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n}\",\"import { KlesDynamicFieldDirective } from '@3kles/kles-material-dynamicforms';\\r\\nimport { Directive, OnInit, OnChanges, OnDestroy, Input, SimpleChanges } from '@angular/core';\\r\\nimport { UntypedFormGroup } from '@angular/forms';\\r\\nimport { KlesLeafComponent } from '../component/treetable/cell/leaf.component';\\r\\nimport { KlesNodeComponent } from '../component/treetable/cell/node.component';\\r\\nimport { KlesTreeColumnConfig } from '../models/columnconfig.model';\\r\\n\\r\\n\\r\\n@Directive({\\r\\n    selector: '[klesDynamicTreeCell]'\\r\\n})\\r\\nexport class KlesDynamicTreeCellDirective extends KlesDynamicFieldDirective implements OnInit, OnChanges, OnDestroy {\\r\\n\\r\\n    @Input() column: KlesTreeColumnConfig;\\r\\n    @Input() row: UntypedFormGroup;\\r\\n    @Input() config?: any;\\r\\n\\r\\n    ngOnInit() {\\r\\n        this.buildComponent();\\r\\n    }\\r\\n\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        super.ngOnChanges(changes);\\r\\n    }\\r\\n\\r\\n    ngOnDestroy(): void {\\r\\n        super.ngOnDestroy();\\r\\n    }\\r\\n\\r\\n    buildComponent() {\\r\\n        if (this.componentRef) { this.componentRef.destroy(); }\\r\\n\\r\\n        this.componentRef = this.container.createComponent(this.column.canExpand ? KlesNodeComponent : KlesLeafComponent);\\r\\n        this.componentRef.instance.field = this.field;\\r\\n        this.componentRef.instance.group = this.group;\\r\\n        this.componentRef.instance.row = this.row;\\r\\n        this.componentRef.instance.column = this.column;\\r\\n        this.componentRef.instance.templateUnfold = this.config?.templateUnfold;\\r\\n    }\\r\\n}\\r\\n\",\"import { Directive, EventEmitter, Output, SimpleChanges } from \\\"@angular/core\\\";\\r\\nimport { KlesTableDirective } from \\\"./table.directive\\\";\\r\\n\\r\\n@Directive({\\r\\n    selector: '[klesTreetable]'\\r\\n})\\r\\nexport class KlesTreetableDirective extends KlesTableDirective {\\r\\n\\r\\n    @Output() _onLineOpen = new EventEmitter();\\r\\n    @Output() _onLineClose = new EventEmitter();\\r\\n\\r\\n    ngOnInit() {\\r\\n        super.ngOnInit();\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges) {\\r\\n        super.ngOnChanges(changes);\\r\\n    }\\r\\n\\r\\n    buildComponent() {\\r\\n        super.buildComponent();\\r\\n        this.componentRef.instance._onLineOpen = this._onLineOpen;\\r\\n        this.componentRef.instance._onLineClose = this._onLineClose;\\r\\n\\r\\n    }\\r\\n}\",\"import { animate, sequence, style, transition, trigger } from \\\"@angular/animations\\\";\\r\\n\\r\\nexport const rowsAnimation =\\r\\n    trigger('rowsAnimation', [\\r\\n        transition('void => *', [\\r\\n            style({ height: '*', opacity: '0', 'box-shadow': 'none' }),\\r\\n            sequence([\\r\\n                animate(\\\".35s ease\\\", style({ height: '*', opacity: '.9', 'box-shadow': 'none' })),\\r\\n                animate(\\\".35s ease\\\", style({ height: '*', opacity: 1, }))\\r\\n            ])\\r\\n        ])\\r\\n    ]);\",\"import { ChangeDetectorRef, EmbeddedViewRef, Pipe, PipeTransform, Type } from '@angular/core';\\r\\nimport { KlesColumnConfig } from '../models/columnconfig.model';\\r\\n\\r\\n@Pipe({\\r\\n    name: 'fieldPipe',\\r\\n    pure: false\\r\\n})\\r\\nexport class FieldPipe implements PipeTransform {\\r\\n\\r\\n    private context: any;\\r\\n\\r\\n    constructor(cdRef: ChangeDetectorRef) {\\r\\n        this.context = ((cdRef as EmbeddedViewRef<Type<any>>).context);\\r\\n    }\\r\\n\\r\\n    transform(column: KlesColumnConfig, index: number): any {\\r\\n        if (this.context) {\\r\\n            return this.context.getLineFields(index, column.cell.name);\\r\\n        }\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\",\"import { Pipe, PipeTransform, ChangeDetectorRef, EmbeddedViewRef, Type } from '@angular/core';\\r\\n@Pipe({\\r\\n    name: 'groupPipe',\\r\\n    pure: true\\r\\n})\\r\\nexport class GroupPipe implements PipeTransform {\\r\\n\\r\\n    private context: any;\\r\\n\\r\\n    constructor(cdRef: ChangeDetectorRef) {\\r\\n        this.context = ((cdRef as EmbeddedViewRef<Type<any>>).context);\\r\\n    }\\r\\n\\r\\n    transform(index: number): any {\\r\\n        if (this.context) {\\r\\n            return this.context.getControls(index);\\r\\n        }\\r\\n        return null;\\r\\n    }\\r\\n}\",\"import { Pipe, PipeTransform } from '@angular/core';\\r\\n\\r\\n@Pipe({\\r\\n    name: 'elevationPipe',\\r\\n    pure: true\\r\\n})\\r\\nexport class ElevationPipe implements PipeTransform {\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n\\r\\n    transform(elevation: number): any {\\r\\n        return `mat-elevation-z${elevation}`;\\r\\n    }\\r\\n}\\r\\n\",\"import { ChangeDetectorRef, EmbeddedViewRef, Pipe, PipeTransform, Type } from '@angular/core';\\r\\nimport { UntypedFormGroup } from '@angular/forms';\\r\\n\\r\\n@Pipe({\\r\\n    name: 'rowPipe',\\r\\n    pure: false\\r\\n})\\r\\nexport class RowPipe implements PipeTransform {\\r\\n\\r\\n    private context: any;\\r\\n\\r\\n    constructor(cdRef: ChangeDetectorRef) {\\r\\n        this.context = ((cdRef as EmbeddedViewRef<Type<any>>).context);\\r\\n    }\\r\\n\\r\\n    transform(row: UntypedFormGroup): any {\\r\\n        if (this.context) {\\r\\n            return this.context.ngClassRow(row);\\r\\n        }\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n\",\"import { ChangeDetectorRef, EmbeddedViewRef, Pipe, PipeTransform, Type } from \\\"@angular/core\\\";\\r\\nimport { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\n\\r\\n@Pipe({\\r\\n    name: 'rowDragDisabledPipe',\\r\\n    pure: false\\r\\n})\\r\\nexport class RowDragDisabledPipe implements PipeTransform {\\r\\n\\r\\n    private context: any;\\r\\n\\r\\n    constructor(cdRef: ChangeDetectorRef) {\\r\\n        this.context = ((cdRef as EmbeddedViewRef<Type<any>>).context);\\r\\n    }\\r\\n\\r\\n    transform(row: UntypedFormGroup): any {\\r\\n        if (this.context && this.context.dragDropRowsOptions.dragDisabled) {\\r\\n            return this.context.dragDropRowsOptions.dragDisabled(row);\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"export enum Span {\\r\\n    MAX = 'max'\\r\\n}\\r\\n\",\"import { Pipe, PipeTransform } from \\\"@angular/core\\\";\\r\\nimport { Span } from \\\"../enums/span.enum\\\";\\r\\n\\r\\n\\r\\n@Pipe({\\r\\n    name: 'spanPipe',\\r\\n})\\r\\nexport class SpanPipe implements PipeTransform {\\r\\n\\r\\n    transform(span: number | Span, maxSize: number): number {\\r\\n        if (span === Span.MAX) {\\r\\n            return maxSize;\\r\\n        }\\r\\n        return span;\\r\\n    }\\r\\n}\\r\\n\",\"import { ChangeDetectorRef, EmbeddedViewRef, Pipe, PipeTransform, Type } from '@angular/core';\\r\\nimport { KlesColumnConfig } from '../models/columnconfig.model';\\r\\n\\r\\n@Pipe({\\r\\n    name: 'cellPipe',\\r\\n})\\r\\nexport class CellPipe implements PipeTransform {\\r\\n\\r\\n    private context: any;\\r\\n\\r\\n    constructor(cdRef: ChangeDetectorRef) {\\r\\n        this.context = ((cdRef as EmbeddedViewRef<Type<any>>).context);\\r\\n    }\\r\\n\\r\\n    transform(column: KlesColumnConfig): any {\\r\\n        return {\\r\\n            'vertical-separator': this.context?.options?.verticalSeparator,\\r\\n            ...(column.align && { ['align-' + column.align]: true })\\r\\n        };\\r\\n    }\\r\\n}\\r\\n\",\"import { Injectable } from '@angular/core';\\r\\nimport { AbstractControl, UntypedFormGroup } from '@angular/forms';\\r\\nimport { PageEvent } from '@angular/material/paginator';\\r\\nimport { SafeStyle } from '@angular/platform-browser';\\r\\nimport { IChangeCell, IChangeHeaderFooterCell, IChangeLine } from '../models/cell.model';\\r\\nimport { KlesColumnConfig } from '../models/columnconfig.model';\\r\\nimport { Subject } from 'rxjs';\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport abstract class AbstractKlesTableService {\\r\\n\\r\\n    protected table: any;\\r\\n    public onSelectIndeterminate: Subject<boolean> = new Subject<boolean>();\\r\\n\\r\\n    //Header\\r\\n    abstract onHeaderChange(e: any);\\r\\n    abstract onHeaderCellChange(e: IChangeHeaderFooterCell);\\r\\n    abstract onStatusHeaderChange(e: any);\\r\\n\\r\\n    //Line\\r\\n    abstract onLineChange(e: IChangeLine);\\r\\n    abstract onStatusLineChange(e: any);\\r\\n    abstract onCellChange(e: IChangeCell);\\r\\n    abstract onStatusCellChange(e: any);\\r\\n    abstract onClick(e: any);\\r\\n\\r\\n    //drag and drop\\r\\n    abstract drop(e: any);\\r\\n    abstract getSortPredicate(index: number, item: any): boolean;\\r\\n\\r\\n    //Footer\\r\\n    abstract onFooterChange(e: any);\\r\\n    abstract onFooterCellChange(e: IChangeHeaderFooterCell);\\r\\n\\r\\n    abstract onDataLoaded();\\r\\n\\r\\n    abstract getCellStyle(row: any, column: KlesColumnConfig): SafeStyle;\\r\\n    abstract getFooterStyle(column: KlesColumnConfig): SafeStyle;\\r\\n\\r\\n    //Sorting\\r\\n    abstract getSortingDataAccessor(item: AbstractControl, property);\\r\\n\\r\\n    //Pagination\\r\\n    abstract onPageChange(e: PageEvent);\\r\\n\\r\\n    //Manage Record\\r\\n    abstract addRecord(record, index?: number): UntypedFormGroup;\\r\\n    abstract deleteRecord(record);\\r\\n    abstract updateRecord(record, options?: { emitEvent: boolean, onlySelf: boolean });\\r\\n\\r\\n    abstract unfoldPredicate: ((index, data) => boolean);\\r\\n\\r\\n    /**Setters */\\r\\n    public setTable(table: any) {\\r\\n        this.table = table;\\r\\n    }\\r\\n}\\r\\n\",\"<form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n  <table [id]=\\\"id\\\" mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n    formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" [multiTemplateDataRows]=\\\"multiTemplate\\\"\\r\\n    cdkDropList (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n    [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\" [cdkDropListSortPredicate]=\\\"sortPredicate()\\\"\\r\\n    [cdkDropListConnectedTo]=\\\"dragDropRowsOptions.connectedTo\\\">\\r\\n    <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n\\r\\n      <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n        <div style=\\\"display: inline-flex;\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n          </ng-container>\\r\\n        </div>\\r\\n      </th>\\r\\n      <div>\\r\\n        @if (multiTemplate) {\\r\\n          <td mat-cell *cdkCellDef=\\\"let row;let index = dataIndex;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n            [ngClass]=\\\"column | cellPipe\\\">\\r\\n            <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\" [group]=\\\"index | groupPipe\\\"\\r\\n              [siblingFields]=\\\"lineFields[index]\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n          </td>\\r\\n        }\\r\\n        @else {\\r\\n          <td mat-cell *cdkCellDef=\\\"let row;let index = index;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n            [ngClass]=\\\"column | cellPipe\\\">\\r\\n            <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\" [group]=\\\"index | groupPipe\\\"\\r\\n              [siblingFields]=\\\"lineFields[row.value._index]\\\" [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n            </ng-container>\\r\\n          </td>\\r\\n        }\\r\\n\\r\\n        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n          @if (column.footerCell) {\\r\\n            <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n            </ng-container>\\r\\n          }\\r\\n        </td>\\r\\n      </div>\\r\\n\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    @if (templateUnfold && multiTemplate) {\\r\\n      <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n          [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n          [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n            [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n          </ng-container>\\r\\n        </td>\\r\\n      </ng-container>\\r\\n    }\\r\\n\\r\\n    <ng-container *ngFor=\\\"let template of templates\\\">\\r\\n      <ng-container *ngFor=\\\"let cell of template.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n          [attr.colspan]=\\\"cell.colspan | spanPipe: displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n          [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n          <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\">\\r\\n          </ng-container>\\r\\n        </td>\\r\\n      </ng-container>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n    <tr mat-row [ngClass]=\\\"(row | rowPipe)\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\" (click)=\\\"onClick(row)\\\"\\r\\n      cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\" [@rowsAnimation]=\\\"\\\">\\r\\n\\r\\n      @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n        <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n          <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n          </ng-container>\\r\\n        </ng-template>\\r\\n      }\\r\\n\\r\\n      @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n        <ng-template cdkDragPlaceholder>\\r\\n          <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\" [value]=\\\"row\\\">\\r\\n          </ng-container>\\r\\n        </ng-template>\\r\\n      }\\r\\n    </tr>\\r\\n\\r\\n    @if (multiTemplate) {\\r\\n      @if (templateUnfold) {\\r\\n        <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\"></tr>\\r\\n      }\\r\\n\\r\\n      <ng-container *ngFor=\\\"let template of templates\\\">\\r\\n        <tr mat-row [ngClass]=\\\"row | rowPipe\\\" [@rowsAnimation]=\\\"\\\"\\r\\n          *matRowDef=\\\"let row; columns: getTemplateColumns(template); when: template.when\\\"></tr>\\r\\n      </ng-container>\\r\\n    }\\r\\n\\r\\n    @if (showFooter) {\\r\\n      <div>\\r\\n        <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n        </tr>\\r\\n      </div>\\r\\n    }\\r\\n  </table>\\r\\n\\r\\n</form>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n  <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n    (page)=\\\"pageChanged($event)\\\">\\r\\n  </mat-paginator>\\r\\n</div> \",\"import { SelectionModel } from '@angular/cdk/collections';\\r\\nimport {\\r\\n    AfterViewInit, Component, OnInit, ViewChild, EventEmitter,\\r\\n    Input, Output, OnChanges, SimpleChanges, ChangeDetectionStrategy,\\r\\n    ChangeDetectorRef, Inject, OnDestroy, Type, signal, Signal, computed\\r\\n} from '@angular/core';\\r\\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\\r\\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\\r\\nimport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS, MomentDateAdapter } from '@angular/material-moment-adapter';\\r\\nimport { AbstractControl, AsyncValidatorFn, UntypedFormArray, UntypedFormBuilder, UntypedFormGroup, ValidatorFn } from '@angular/forms';\\r\\nimport { TranslateService } from '@ngx-translate/core';\\r\\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\\r\\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\\r\\nimport { MatSort, Sort } from '@angular/material/sort';\\r\\nimport { MatDialog } from '@angular/material/dialog';\\r\\nimport { KlesColumnConfig } from '../../models/columnconfig.model';\\r\\nimport { Options } from '../../models/options.model';\\r\\nimport { Node } from '../../models/node.model';\\r\\nimport { componentMapper, IKlesFieldConfig, klesFieldControlFactory } from '@3kles/kles-material-dynamicforms';\\r\\nimport * as uuid from 'uuid';\\r\\nimport * as _ from 'lodash';\\r\\nimport { catchError, debounceTime, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';\\r\\nimport { IChangeCell, IChangeHeaderFooterCell, IDropRow, IKlesCellFieldConfig } from '../../models/cell.model';\\r\\nimport { AbstractKlesTableService } from '../../services/abstracttable.service';\\r\\nimport { of, Subject } from 'rxjs';\\r\\nimport { rowsAnimation } from '../../animations/row.animation';\\r\\n\\r\\nimport { CdkDragDrop, CdkDrag } from '@angular/cdk/drag-drop';\\r\\n\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-dynamictable',\\r\\n    templateUrl: './table.component.html',\\r\\n    styleUrls: ['./table.component.scss', '../../styles/dragdrop.scss', '../../styles/align-cell.scss', '../../styles/input.scss'],\\r\\n    animations: [rowsAnimation],\\r\\n    providers: [\\r\\n        { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\\r\\n        {\\r\\n            provide: DateAdapter,\\r\\n            useClass: MomentDateAdapter,\\r\\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\\r\\n        },\\r\\n        { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\\r\\n    ],\\r\\n    changeDetection: ChangeDetectionStrategy.OnPush\\r\\n})\\r\\n\\r\\nexport class KlesTableComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\\r\\n    public paginator: MatPaginator;\\r\\n    public sort: MatSort;\\r\\n    protected sortDefault = false;\\r\\n\\r\\n    protected _onDestroy = new Subject<void>();\\r\\n    protected _onLinesChanges = new Subject<void>();\\r\\n\\r\\n    @ViewChild(MatSort, { static: false }) set matSort(ms: MatSort) {\\r\\n        if (!this.sort) {\\r\\n            this.sort = ms;\\r\\n            this.setDataSourceAttributes();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @ViewChild(MatPaginator, { static: true }) set matPaginator(mp: MatPaginator) {\\r\\n        if (!this.paginator) {\\r\\n            this.paginator = mp;\\r\\n            this.setDataSourceAttributes();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @ViewChild(MatTable) matTable: MatTable<any>;\\r\\n\\r\\n    /** Input Component */\\r\\n    @Input() id: string;\\r\\n\\r\\n    @Input() _lines: Node[] = [];\\r\\n    @Input() set lines(lines: any | any[]) {\\r\\n        this.updateData(lines);\\r\\n    }\\r\\n\\r\\n    @Input() _footer: any = {};\\r\\n    @Input() set footer(footer: any) {\\r\\n        if (footer) {\\r\\n            this.updateFooter(footer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Input() columns = signal<KlesColumnConfig[]>([]);\\r\\n    @Input() set selectionMode(selectionMode: boolean) {\\r\\n        this.selection = new SelectionModel<any>(selectionMode);\\r\\n    }\\r\\n    @Input() options: Options<any> = {\\r\\n        verticalSeparator: true,\\r\\n        capitalisedHeader: true,\\r\\n        highlightRowOnHover: true,\\r\\n        elevation: 5\\r\\n    };\\r\\n    @Input() sortConfig: Sort;\\r\\n    @Input() hidePaginator: boolean = false;\\r\\n    @Input() pageSize = 10;\\r\\n    @Input() pageSizeOptions = [5, 10, 20, 25, 50];\\r\\n    @Input() showFooter: boolean = false;\\r\\n    @Input() dragDropRows: boolean = false;\\r\\n    @Input() dragDropRowsOptions: any = { autoScrollStep: 5 };\\r\\n\\r\\n    @Input() lineValidations: ValidatorFn[];\\r\\n    @Input() lineAsyncValidations: AsyncValidatorFn[];\\r\\n\\r\\n    @Input() ngClassRow: (row: UntypedFormGroup) => any = ((row) => ({ 'highlight-on-hover': this.options.highlightRowOnHover }));\\r\\n\\r\\n    @Input() multiTemplate: boolean = false;\\r\\n    @Input() templates: { cells: IKlesCellFieldConfig[], when?: ((index: number, rowData: any) => boolean) }[] = [];\\r\\n    @Input() templateUnfold: { cells: IKlesCellFieldConfig[], multiUnfold?: boolean; disabled?: (row: UntypedFormGroup) => boolean; };\\r\\n\\r\\n    /** Output Component */\\r\\n    @Output() _onLoaded = new EventEmitter();\\r\\n    @Output() _onSelected = new EventEmitter<AbstractControl[]>();\\r\\n    @Output() _onChangeHeaderCell = new EventEmitter<IChangeHeaderFooterCell>();\\r\\n    @Output() _onChangeCell = new EventEmitter<IChangeCell>();\\r\\n    @Output() _onChangeFooterCell = new EventEmitter<IChangeHeaderFooterCell>();\\r\\n    @Output() _onStatusHeaderChange = new EventEmitter();\\r\\n    @Output() _onStatusLineChange = new EventEmitter();\\r\\n    @Output() _onStatusCellChange = new EventEmitter();\\r\\n    @Output() _onClick = new EventEmitter();\\r\\n    @Output() _onDragDropRow = new EventEmitter<IDropRow>();\\r\\n\\r\\n    // Table\\r\\n    formHeader: UntypedFormGroup;\\r\\n    form: UntypedFormGroup;\\r\\n    formFooter: UntypedFormGroup;\\r\\n\\r\\n    lineFields: IKlesFieldConfig[][];\\r\\n    dataSource = new MatTableDataSource<AbstractControl>([]);\\r\\n    selection = new SelectionModel<AbstractControl>(true);\\r\\n\\r\\n    renderedData: any[]; // data from the datasource\\r\\n\\r\\n    displayedColumns = computed(() => this.columns().filter(e => e.visible).map(c => c.columnDef));\\r\\n\\r\\n    constructor(protected translate: TranslateService,\\r\\n        protected adapter: DateAdapter<any>,\\r\\n        protected fb: UntypedFormBuilder,\\r\\n        public ref: ChangeDetectorRef,\\r\\n        protected dialog: MatDialog,\\r\\n        public sanitizer: DomSanitizer,\\r\\n        public _adapter: DateAdapter<any>,\\r\\n        //@Inject('tableService') public tableService: DefaultKlesTableService\\r\\n        @Inject('tableService') public tableService: AbstractKlesTableService\\r\\n    ) {\\r\\n        this.tableService.setTable(this);\\r\\n    }\\r\\n\\r\\n    ngOnDestroy(): void {\\r\\n        this._onLinesChanges.next();\\r\\n        this._onDestroy.next();\\r\\n        this._onLinesChanges.complete();\\r\\n        this._onDestroy.complete();\\r\\n    }\\r\\n\\r\\n    ngOnInit() {\\r\\n        this.dataSource.connect().subscribe(d => {\\r\\n            this.renderedData = d;\\r\\n        });\\r\\n\\r\\n        this.formHeader = this.initFormHeader();\\r\\n        this.formFooter = this.initFormFooter();\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        // console.log('changes', changes);\\r\\n        // if (changes.columns) {\\r\\n        //     this.columns = changes.columns.currentValue;\\r\\n        //     this.formHeader = this.initFormHeader();\\r\\n        // }\\r\\n        // if (changes.lines) {\\r\\n        //     this.updateData(changes.lines.currentValue);\\r\\n        // }\\r\\n        // if (changes.selectionMode) {\\r\\n        //     this.selectionMode = changes.selectionMode.currentValue;\\r\\n        //     this.selection = new SelectionModel<any>(this.selectionMode);\\r\\n        // }\\r\\n        // if (changes.footer) {\\r\\n\\r\\n        // }\\r\\n    }\\r\\n\\r\\n    ngAfterViewInit() {\\r\\n        this.matTable?.updateStickyColumnStyles();\\r\\n    }\\r\\n\\r\\n\\r\\n    trackById(index: number, item: UntypedFormGroup): any {\\r\\n        return item;\\r\\n    }\\r\\n\\r\\n    /** Form Header */\\r\\n    initFormHeader() {\\r\\n        const group = this.fb.group({});\\r\\n        this.columns().forEach(column => {\\r\\n            const colCellHeader = _.cloneDeep(column.headerCell);\\r\\n            colCellHeader.name = column.columnDef;\\r\\n            const control = this.buildControlField(colCellHeader, colCellHeader.value || '');\\r\\n            control.valueChanges.pipe(takeUntil(this._onDestroy),\\r\\n                debounceTime(colCellHeader.debounceTime || 0)\\r\\n            ).subscribe(e => {\\r\\n                const group = control.parent;\\r\\n                this._onChangeHeaderCell.emit({ column, group });\\r\\n                this.tableService.onHeaderCellChange({ column, group });\\r\\n            });\\r\\n            group.addControl(colCellHeader.name, control);\\r\\n        });\\r\\n\\r\\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\\r\\n            this.tableService.onHeaderChange(e);\\r\\n        });\\r\\n        group.statusChanges.subscribe(e => {\\r\\n            this.tableService.onStatusHeaderChange(e);\\r\\n            this._onStatusHeaderChange.emit(e);\\r\\n        });\\r\\n        return group;\\r\\n    }\\r\\n\\r\\n    /** Form Array Line Table */\\r\\n    initFormArray() {\\r\\n        this.lineFields = [];\\r\\n        this._onLinesChanges.next();\\r\\n        const array = this.fb.array(this._lines.map((row) => {\\r\\n            return this.addFormLine(row);\\r\\n        }));\\r\\n        return array;\\r\\n    }\\r\\n\\r\\n    addFormLine(row): UntypedFormGroup {\\r\\n        const group = this.fb.group({});\\r\\n        const idControl = this.fb.control(row._id);\\r\\n        const indexControl = this.fb.control(row._index);\\r\\n        const unfoldControl = this.fb.control(row._unfold || false);\\r\\n        group.addControl('_id', idControl);\\r\\n        group.addControl('_index', indexControl);\\r\\n        group.addControl('_unfold', unfoldControl);\\r\\n        const listField = [];\\r\\n        this.columns().forEach(column => {\\r\\n            column.cell.name = column.columnDef;\\r\\n            const colCell = _.cloneDeep(column.cell);\\r\\n            const control = this.buildControlField(colCell, row.value[colCell.name]);\\r\\n            listField.push(colCell);\\r\\n            control.valueChanges.pipe(\\r\\n                takeUntil(this._onLinesChanges),\\r\\n                debounceTime(colCell.debounceTime || 0),\\r\\n                switchMap((value) => {\\r\\n                    if (colCell.executeAfterChange) {\\r\\n                        colCell.pending = true;\\r\\n                        this.ref.markForCheck();\\r\\n                        return colCell.executeAfterChange(colCell.name,\\r\\n                            { ...control?.parent.value, [colCell.name]: value }, control?.parent)\\r\\n                            .pipe(\\r\\n                                take(1),\\r\\n                                catchError((err) => {\\r\\n                                    console.error(err);\\r\\n                                    return of(null);\\r\\n                                }),\\r\\n                                map((response) => ({ value, response })),\\r\\n                                tap(() => {\\r\\n                                    colCell.pending = false;\\r\\n                                    this.ref.markForCheck();\\r\\n                                })\\r\\n                            );\\r\\n                    }\\r\\n                    return of({ value, response: null });\\r\\n                })\\r\\n            ).subscribe(e => {\\r\\n                const group = control.parent;\\r\\n                this.tableService.onCellChange({ column, row: { ...group.value, [colCell.name]: e.value }, group, response: e.response });\\r\\n                this._onChangeCell.emit({ column, row: { ...group.value, [colCell.name]: e.value }, group, response: e.response });\\r\\n            });\\r\\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\\r\\n                const group = control.parent;\\r\\n                this.tableService.onStatusCellChange({ cell: control, group, status });\\r\\n                this._onStatusCellChange.emit({ cell: control, group, status });\\r\\n            });\\r\\n\\r\\n            group.addControl(column.cell.name, control);\\r\\n        });\\r\\n        this.lineFields.push(listField);\\r\\n\\r\\n        if (this.multiTemplate) {\\r\\n            if (this.templateUnfold) {\\r\\n                this.templateUnfold.cells.forEach((cell) => {\\r\\n                    const field: IKlesCellFieldConfig = _.cloneDeep(cell);\\r\\n                    const control = this.buildControlField(field, row.value[cell.name]);\\r\\n                    group.addControl(cell.name, control);\\r\\n                })\\r\\n            }\\r\\n            if (this.templates?.length) {\\r\\n                this.templates.forEach(template => {\\r\\n                    template.cells.forEach((cell) => {\\r\\n                        const field: IKlesCellFieldConfig = _.cloneDeep(cell);\\r\\n                        const control = this.buildControlField(field, row.value[cell.name]);\\r\\n                        group.addControl(cell.name, control);\\r\\n                    })\\r\\n\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        group.setValidators(this.lineValidations);\\r\\n        group.setAsyncValidators(this.lineAsyncValidations);\\r\\n\\r\\n        group.valueChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(value => {\\r\\n            this.tableService.onLineChange({ group, row, value });\\r\\n        });\\r\\n\\r\\n        group.statusChanges.subscribe(status => {\\r\\n            this.tableService.onStatusLineChange({ group, row, status });\\r\\n            this._onStatusLineChange.emit({ group, row, status });\\r\\n        });\\r\\n        return group;\\r\\n    }\\r\\n\\r\\n    public updateFormCell(index: number, cell: IKlesCellFieldConfig) {\\r\\n        const cellIndex = this.lineFields[index].findIndex(field => field.name === cell.name);\\r\\n        const column = this.columns().find(col => col.columnDef === cell.name);\\r\\n\\r\\n        const group = ((this.form.controls.rows as UntypedFormArray).controls\\r\\n            .find((c: UntypedFormGroup) => c.controls._index.value === index));\\r\\n\\r\\n        if (cellIndex >= 0 && column && group) {\\r\\n            this.lineFields[index][cellIndex] = _.cloneDeep(cell);\\r\\n            const colCell = _.cloneDeep(cell);\\r\\n\\r\\n            const control = this.buildControlField(colCell, group.value[cell.name] || cell.value);\\r\\n\\r\\n            (group as UntypedFormGroup).setControl(cell.name, control);\\r\\n\\r\\n            control.valueChanges.pipe(takeUntil(this._onLinesChanges),\\r\\n                debounceTime(colCell.debounceTime || 0),\\r\\n                switchMap((value) => {\\r\\n                    if (colCell.executeAfterChange) {\\r\\n                        colCell.pending = true;\\r\\n                        this.ref.markForCheck();\\r\\n                        return colCell.executeAfterChange(colCell.name,\\r\\n                            { ...control?.parent.value, [colCell.name]: value }, control?.parent)\\r\\n                            .pipe(\\r\\n                                take(1),\\r\\n                                catchError((err) => {\\r\\n                                    console.error(err);\\r\\n                                    return of(null);\\r\\n                                }),\\r\\n                                map((response) => ({ value, response })),\\r\\n                                tap(() => {\\r\\n                                    colCell.pending = false;\\r\\n                                    this.ref.markForCheck();\\r\\n                                })\\r\\n                            );\\r\\n                    }\\r\\n                    return of({ value, response: null });\\r\\n                }))\\r\\n                // distinctUntilChanged((prev, curr) => {\\r\\n                //     if (column.cell?.property && prev && curr) {\\r\\n                //         return prev[column.cell.property] === curr[column.cell.property];\\r\\n                //     }\\r\\n                //     return prev === curr;\\r\\n                // }))\\r\\n                .subscribe(e => {\\r\\n                    const parent = control.parent;\\r\\n                    this.tableService.onCellChange({ column, row: { ...parent.value, [cell.name]: e.value }, group: parent, response: e.response });\\r\\n                    this._onChangeCell.emit({ column, row: { ...parent.value, [cell.name]: e.value }, group: parent, response: e.response });\\r\\n                });\\r\\n\\r\\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\\r\\n                const parent = control.parent;\\r\\n                this.tableService.onStatusCellChange({ cell: control, group: parent, status });\\r\\n                this._onStatusCellChange.emit({ cell: control, group: parent, status });\\r\\n            });\\r\\n            this.ref.markForCheck();\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Form Footer */\\r\\n    initFormFooter() {\\r\\n        const group = this.fb.group({});\\r\\n        this.columns()\\r\\n            .filter((column) => column.footerCell)\\r\\n            .forEach(column => {\\r\\n                const colCellFooter = column.footerCell;\\r\\n                colCellFooter.name = column.columnDef;\\r\\n                const control = this.buildControlField(colCellFooter, this._footer[colCellFooter.name]);\\r\\n                control.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\\r\\n                    const parent = control.parent;\\r\\n                    const change: IChangeHeaderFooterCell = { column, group: parent };\\r\\n                    this._onChangeFooterCell.emit(change);\\r\\n                    this.tableService.onFooterCellChange(change);\\r\\n                });\\r\\n                group.addControl(colCellFooter.name, control);\\r\\n            });\\r\\n\\r\\n        group.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(e => {\\r\\n            this.tableService.onFooterChange(e);\\r\\n        });\\r\\n        return group;\\r\\n    }\\r\\n\\r\\n    /**Field and control */\\r\\n    buildControlField(field: IKlesFieldConfig, value?: any): AbstractControl {\\r\\n\\r\\n        const asyncValidations = field.asyncValidations?.map(asyncValisation => {\\r\\n            const klesValidator = { ...asyncValisation };\\r\\n            const validatorFn = ((c: AbstractControl) => {\\r\\n                const validator$ = klesValidator.validator(c);\\r\\n                if (validator$ instanceof Promise) {\\r\\n                    return validator$.finally(() => this.ref.markForCheck());\\r\\n                } else {\\r\\n                    return validator$.pipe(tap(() => this.ref.markForCheck()));\\r\\n                }\\r\\n            });\\r\\n            asyncValisation.validator = validatorFn;\\r\\n            return asyncValisation;\\r\\n        }) || [];\\r\\n\\r\\n\\r\\n        if (field.type) {\\r\\n            return componentMapper.find(c => c.type === field.type)?.factory({ ...field, value, asyncValidations }) || klesFieldControlFactory({ ...field, value, asyncValidations });\\r\\n        } else {\\r\\n            return componentMapper.find(c => c.component === field.component)?.factory({ ...field, value, asyncValidations }) || klesFieldControlFactory({ ...field, value, asyncValidations });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    getFormArray(): UntypedFormArray {\\r\\n        return (this.form.get('rows') as UntypedFormArray);\\r\\n    }\\r\\n\\r\\n    getFilterFormArray(): UntypedFormGroup[] {\\r\\n        // return this.fb.array(this.renderedData);\\r\\n        return this.renderedData;\\r\\n    }\\r\\n\\r\\n    getActualIndex(index: number) {\\r\\n        if (this.paginator && !this.hidePaginator) {\\r\\n            return index + this.paginator.pageSize * this.paginator.pageIndex;\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    getControls(index) {\\r\\n        //console.log('GetControls index=', index, \\\"=\\\", (this.form.get('rows') as FormArray).controls);\\r\\n        //(this.form.get('rows') as FormArray).push\\r\\n        //(this.form.get('rows') as FormArray).removeAt(index)\\r\\n        //return (this.form.get('rows') as FormArray).controls[index];\\r\\n        // return this.getFilterFormArray().controls[this.getActualIndex(index)];\\r\\n        // return this.getFilterFormArray().controls[index];\\r\\n        return this.getFilterFormArray()[index];\\r\\n    }\\r\\n\\r\\n    getLineFields(index, key) {\\r\\n        // return this.lineFields[this.getActualIndex(index)].find(f => f.name === key);\\r\\n        return this.lineFields[index].find(f => f.name === key);\\r\\n    }\\r\\n\\r\\n    /**Manage Data */\\r\\n\\r\\n    /**\\r\\n* Method to set the data lines to datasource table\\r\\n*/\\r\\n    protected setItems() {\\r\\n        this.form = this.fb.group({\\r\\n            rows: this.initFormArray()\\r\\n        });\\r\\n\\r\\n        this.dataSource.data = this.getFormArray().controls;\\r\\n        this.dataSource.filteredData = this.getFormArray().controls;\\r\\n\\r\\n        this._onLoaded.emit();\\r\\n        this.tableService.onDataLoaded();\\r\\n    }\\r\\n\\r\\n    updateFooter(footer: any) {\\r\\n        this._footer = { ...footer };\\r\\n        this.formFooter = this.initFormFooter();\\r\\n    }\\r\\n\\r\\n    updateData(lines: any[]) {\\r\\n        this._lines = lines.map((l, index) => {\\r\\n            const data = { ...l };\\r\\n            const options = data.options;\\r\\n            const _id = l._id || uuid.v4();\\r\\n            const _unfold = l._unfold || false;\\r\\n            const _index = index;\\r\\n\\r\\n            delete data._id;\\r\\n            delete data.options;\\r\\n            return {\\r\\n                _id,\\r\\n                _unfold,\\r\\n                _index,\\r\\n                ...options && { options },\\r\\n                value: data,\\r\\n\\r\\n            };\\r\\n        });\\r\\n        this.setItems();\\r\\n    }\\r\\n\\r\\n    setDataSourceAttributes() {\\r\\n        if (!this.hidePaginator) {\\r\\n            this.dataSource.paginator = this.paginator;\\r\\n        } else {\\r\\n            this.dataSource.paginator = null;\\r\\n        }\\r\\n\\r\\n        if (this.sort) {\\r\\n            this.dataSource.sort = this.sort;\\r\\n            this.tableService.setTable(this);\\r\\n            this.dataSource.sortingDataAccessor = this.tableService.getSortingDataAccessor;\\r\\n            if (this.paginator && !this.hidePaginator) {\\r\\n                this.sort.sortChange.subscribe(() => {\\r\\n                    this.paginator.pageIndex = 0;\\r\\n                });\\r\\n            }\\r\\n            if (!this.sortDefault && this.sortConfig) {\\r\\n                // console.log('Active default sort');\\r\\n                this.sort.active = this.sortConfig.active;\\r\\n                this.sort.direction = this.sortConfig.direction;\\r\\n                this.sort.sortChange.emit(this.sortConfig);\\r\\n                this.sortDefault = !this.sortDefault;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public getSelectedLines(): any[] {\\r\\n        return this.getFormArray().controls.filter(f => this.selection.isSelected(f));\\r\\n    }\\r\\n\\r\\n    /** Table rendering */\\r\\n\\r\\n    /**\\r\\n     * Method to rendering cell color\\r\\n     * @param row\\r\\n     * @param column\\r\\n     */\\r\\n    getCellStyle(row: any, column: KlesColumnConfig): SafeStyle {\\r\\n        return this.tableService.getCellStyle(row, column);\\r\\n    }\\r\\n\\r\\n    getFooterStyle(column: KlesColumnConfig): SafeStyle {\\r\\n        return this.tableService.getFooterStyle(column);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Method to check if column is sticky\\r\\n     * @param column\\r\\n     */\\r\\n    // isSticky(column: KlesColumnConfig): boolean {\\r\\n    //     console.log('isSticky')\\r\\n    //     return column.sticky || false;\\r\\n    // }\\r\\n\\r\\n    formatElevation(): string {\\r\\n        return `mat-elevation-z${this.options.elevation}`;\\r\\n    }\\r\\n\\r\\n    public isSortingDisabled(column: KlesColumnConfig): boolean {\\r\\n        return column.sortable || false;\\r\\n    }\\r\\n\\r\\n\\r\\n    public setVisible(name: string, visible: boolean): void {\\r\\n        this.columns.update((columns) => {\\r\\n            const column = columns.find(col => col.columnDef === name);\\r\\n            if (column) {\\r\\n                column.visible = visible;\\r\\n            }\\r\\n            return columns;\\r\\n        });\\r\\n    }\\r\\n\\r\\n    public pageChanged(event: PageEvent) {\\r\\n        this.tableService.onPageChange(event);\\r\\n    }\\r\\n\\r\\n    public getTemplateColumns(template: any): string[] {\\r\\n        return template.cells.map(c => c.name);\\r\\n    }\\r\\n\\r\\n    public onClick(row: UntypedFormGroup) {\\r\\n        this._onClick.emit(row);\\r\\n        this.tableService.onClick(row);\\r\\n    }\\r\\n\\r\\n    public drop(event: CdkDragDrop<UntypedFormGroup[]>) {\\r\\n        this.tableService.drop(event);\\r\\n    }\\r\\n\\r\\n    public sortPredicate() {\\r\\n        return ((index: number, item: CdkDrag<number>) => {\\r\\n            return this.tableService?.getSortPredicate(index, item);\\r\\n        })\\r\\n    }\\r\\n}\\r\\n\",\"import { Observable } from 'rxjs';\\r\\nimport { AbstractKlesTableService } from '../abstracttable.service';\\r\\n\\r\\nexport abstract class AbstractKlesLazyTableService extends AbstractKlesTableService {\\r\\n\\r\\n    abstract load(sort: string, order: string, page: number, perPage: number, filter?: { [key: string]: any; })\\r\\n        : Observable<{ lines: any[], totalCount: number, footer?: any, header?: any }>;\\r\\n\\r\\n    abstract reload(): void;\\r\\n}\\r\\n\",\"<div style=\\\"position: relative;\\\">\\r\\n    @if (loading()) {\\r\\n        <div class=\\\"loading\\\">\\r\\n            <mat-spinner></mat-spinner>\\r\\n        </div>\\r\\n    }\\r\\n    <form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n        <table [id]=\\\"id\\\" mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n            formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n            (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n            [multiTemplateDataRows]=\\\"multiTemplate\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n            [cdkDropListSortPredicate]=\\\"sortPredicate()\\\" [cdkDropListConnectedTo]=\\\"dragDropRowsOptions.connectedTo\\\">\\r\\n            @for (column of columns(); track column.columnDef) {\\r\\n                <ng-container [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.ngClass}}\\\"\\r\\n                        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                        <div style=\\\"display: inline-flex;\\\">\\r\\n                            <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                    </th>\\r\\n                    <div>\\r\\n                        @if (multiTemplate) {\\r\\n                            <td mat-cell *cdkCellDef=\\\"let row;let index = dataIndex;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [siblingFields]=\\\"lineFields[row.value._index]\\\"\\r\\n                                    [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        }\\r\\n                        @else {\\r\\n                            <td mat-cell *cdkCellDef=\\\"let row;let index = index;\\\" [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                <ng-container klesDynamicCell [field]=\\\"column | fieldPipe:row.value._index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [siblingFields]=\\\"lineFields[row.value._index]\\\"\\r\\n                                    [column]=\\\"column\\\" [config]=\\\"{templateUnfold}\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        }\\r\\n\\r\\n                        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                            @if (column.footerCell) {\\r\\n                                <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                                </ng-container>\\r\\n                            }\\r\\n                        </td>\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n            }\\r\\n\\r\\n            @if (templateUnfold && multiTemplate) {\\r\\n                @for (cell of templateUnfold.cells; track cell.name) {\\r\\n                    <ng-container [matColumnDef]=\\\"cell.name\\\">\\r\\n                        <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                            [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                            [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                            <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n                                [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n                            </ng-container>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                }\\r\\n            }\\r\\n\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n            <tr mat-row [ngClass]=\\\"row | rowPipe\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\" [@rowsAnimation]=\\\"\\\"\\r\\n                (click)=\\\"onClick(row)\\\" cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\">\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                    <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                    <ng-template cdkDragPlaceholder>\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\"\\r\\n                            [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n            </tr>\\r\\n\\r\\n            @if (multiTemplate && templateUnfold) {\\r\\n                <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n                </tr>\\r\\n            }\\r\\n\\r\\n            @if (showFooter) {\\r\\n                <div>\\r\\n                    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                    </tr>\\r\\n                </div>\\r\\n            }\\r\\n        </table>\\r\\n\\r\\n    </form>\\r\\n</div>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n        (page)=\\\"pageChanged($event)\\\">\\r\\n    </mat-paginator>\\r\\n</div>\",\"import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnChanges, OnDestroy, OnInit, SimpleChanges, signal } from '@angular/core';\\r\\nimport { UntypedFormBuilder } from '@angular/forms';\\r\\nimport { DateAdapter } from '@angular/material/core';\\r\\nimport { MatDialog } from '@angular/material/dialog';\\r\\nimport { DomSanitizer } from '@angular/platform-browser';\\r\\nimport { TranslateService } from '@ngx-translate/core';\\r\\nimport { BehaviorSubject, concat, merge, of, Subject } from 'rxjs';\\r\\nimport { catchError, debounceTime, distinctUntilChanged, map, switchMap, takeUntil } from 'rxjs/operators';\\r\\nimport { AbstractKlesLazyTableService } from '../../services/lazy/abstractlazytable.service';\\r\\nimport { KlesTableComponent } from '../table/table.component';\\r\\nimport { rowsAnimation } from '../../animations/row.animation';\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-lazytable',\\r\\n    templateUrl: './lazytable.component.html',\\r\\n    styleUrls: ['./lazytable.component.scss', '../../styles/dragdrop.scss', '../../styles/align-cell.scss', '../../styles/input.scss'],\\r\\n    animations: [rowsAnimation],\\r\\n    changeDetection: ChangeDetectionStrategy.OnPush\\r\\n})\\r\\nexport class KlesLazyTableComponent extends KlesTableComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\\r\\n\\r\\n    loading = signal(false);\\r\\n    filteredValues$ = new BehaviorSubject<{ [key: string]: any; }>({});\\r\\n    reload$ = new Subject<void>();\\r\\n\\r\\n    constructor(protected translate: TranslateService,\\r\\n        protected adapter: DateAdapter<any>,\\r\\n        private fb1: UntypedFormBuilder,\\r\\n        public ref: ChangeDetectorRef,\\r\\n        protected dialog: MatDialog,\\r\\n        public sanitizer: DomSanitizer,\\r\\n        public _adapter: DateAdapter<any>,\\r\\n        @Inject('tableService') public tableService: AbstractKlesLazyTableService\\r\\n    ) {\\r\\n        super(translate, adapter, fb1, ref, dialog, sanitizer, _adapter, tableService);\\r\\n    }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n        super.ngOnInit();\\r\\n\\r\\n        this.filteredValues$.next(\\r\\n            this.columns()\\r\\n                .filter(column => column.filterable)\\r\\n                .map(column => {\\r\\n                    return { [column.columnDef]: this.formHeader.controls[column.columnDef].value };\\r\\n                })\\r\\n                .reduce((a, b) => ({ ...a, ...b }), {}));\\r\\n    }\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        super.ngOnChanges(changes);\\r\\n    }\\r\\n    ngAfterViewInit(): void {\\r\\n        super.ngAfterViewInit();\\r\\n\\r\\n        merge(this.sort.sortChange, this.filteredValues$.pipe(debounceTime(500)), this.reload$)\\r\\n            .subscribe(() => this.paginator.pageIndex = 0);\\r\\n\\r\\n        merge(this.reload$, this.sort.sortChange.pipe(distinctUntilChanged()),\\r\\n            this.paginator.page.pipe(distinctUntilChanged()), this.filteredValues$.pipe(debounceTime(500)))\\r\\n            .pipe(\\r\\n                takeUntil(this._onDestroy),\\r\\n                switchMap(() => {\\r\\n                    return concat(\\r\\n                        of({ loading: true, value: { lines: [], totalCount: 0, footer: {}, header: {} } }),\\r\\n                        this.tableService.load(this.sort.active, this.sort.direction, this.paginator.pageIndex, this.paginator.pageSize,\\r\\n                            this.filteredValues$.getValue()).pipe(\\r\\n                                map(value => ({ loading: false, value })),\\r\\n                                catchError((err) => {\\r\\n                                    console.error(err);\\r\\n                                    return of({ loading: false, value: { lines: [], totalCount: 0, footer: {}, header: {} } });\\r\\n                                })\\r\\n                            )\\r\\n                    );\\r\\n                })\\r\\n            )\\r\\n            .subscribe((response) => {\\r\\n                if (response.loading) {\\r\\n                    this.loading.set(true);\\r\\n                } else {\\r\\n                    this.loading.set(false);\\r\\n\\r\\n                    if (this.showFooter && response.value.footer) {\\r\\n                        this.formFooter.patchValue(response.value.footer);\\r\\n                    }\\r\\n                    if (response.value.header) {\\r\\n                        this.formHeader.patchValue(response.value.header, { emitEvent: false });\\r\\n                    }\\r\\n                    this.updateData(response.value.lines);\\r\\n                    this.paginator.length = response.value.totalCount;\\r\\n\\r\\n                }\\r\\n            });\\r\\n\\r\\n    }\\r\\n    ngOnDestroy(): void {\\r\\n        super.ngOnDestroy();\\r\\n    }\\r\\n\\r\\n    getLineFields(index, key) {\\r\\n        return this.lineFields[index].find(f => f.name === key);\\r\\n    }\\r\\n\\r\\n    setDataSourceAttributes() {\\r\\n        if (this.sort) {\\r\\n            if (this.paginator && !this.hidePaginator) {\\r\\n                this.sort.sortChange.subscribe(() => {\\r\\n                    this.paginator.pageIndex = 0;\\r\\n                });\\r\\n            }\\r\\n            if (this.sortConfig) {\\r\\n                this.sort.active = this.sortConfig.active;\\r\\n                this.sort.direction = this.sortConfig.direction;\\r\\n                this.sort.sortChange.emit(this.sortConfig);\\r\\n                // this.sortDefault = !this.sortDefault;\\r\\n            }\\r\\n        }\\r\\n        this.tableService.setTable(this);\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"import { KlesFieldAbstract } from '@3kles/kles-material-dynamicforms';\\r\\nimport { OnInit, Component } from '@angular/core';\\r\\nimport { IKlesHeaderFieldConfig } from '../../models/header-field.config.model';\\r\\n\\r\\n@Component({\\r\\n    selector: 'kles-form-textheader',\\r\\n    template: `\\r\\n    <div mat-sort-header [disabled]=\\\"!field.sortable\\\"><span>{{ field.label | translate}}</span></div>\\r\\n    `,\\r\\n    styles: ['mat-form-field {width: calc(100%)}']\\r\\n})\\r\\nexport class KlesFormTextHeaderComponent extends KlesFieldAbstract implements OnInit {\\r\\n    field: IKlesHeaderFieldConfig;\\r\\n    ngOnInit(): void {\\r\\n        super.ngOnInit();\\r\\n    }\\r\\n}\\r\\n\",\"import { KlesFieldAbstract } from '@3kles/kles-material-dynamicforms';\\r\\nimport { OnInit, Component } from '@angular/core';\\r\\nimport { Observable, of } from 'rxjs';\\r\\nimport { startWith, map, switchMap } from 'rxjs/operators';\\r\\nimport { IKlesHeaderFieldConfig } from '../../models/header-field.config.model';\\r\\n\\r\\n@Component({\\r\\n    selector: 'kles-form-textheaderfilter',\\r\\n    template: `\\r\\n    <div mat-sort-header [disabled]=\\\"!field.sortable\\\"><span>{{ field.label | translate}}</span></div>\\r\\n    <mat-form-field [formGroup]=\\\"group\\\" class=\\\"form-element\\\">\\r\\n        @if (field.autocomplete) {\\r\\n            <input matInput matTooltip=\\\"{{field.tooltip}}\\\" [attr.id]=\\\"field.id\\\" (click)=\\\"stopPropagation($event)\\\" [ngClass]=\\\"field.ngClass\\\" [formControlName]=\\\"field.name\\\" [placeholder]=\\\"field.placeholder | translate\\\" [type]=\\\"field.inputType\\\"\\r\\n            [matAutocomplete]=\\\"auto\\\">\\r\\n\\r\\n            <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                @for (option of filteredOption | async; track option) {\\r\\n                    <mat-option [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n                }\\r\\n            </mat-autocomplete>\\r\\n        }\\r\\n        @else {\\r\\n            <input matInput matTooltip=\\\"{{field.tooltip}}\\\" [attr.id]=\\\"field.id\\\" (click)=\\\"stopPropagation($event)\\\" [ngClass]=\\\"field.ngClass\\\" [formControlName]=\\\"field.name\\\" [placeholder]=\\\"field.placeholder | translate\\\" [type]=\\\"field.inputType\\\">\\r\\n        }\\r\\n\\r\\n        <button mat-button matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"group.controls[field.name].reset(''); stopPropagation($event)\\\">\\r\\n            <mat-icon>close</mat-icon>\\r\\n        </button>\\r\\n\\r\\n        @if (isPending()) {\\r\\n            <mat-spinner matSuffix mode=\\\"indeterminate\\\" diameter=\\\"17\\\"></mat-spinner>\\r\\n        }\\r\\n\\r\\n        @for (validation of field.validations; track validation.name) {\\r\\n            <ng-container ngProjectAs=\\\"mat-error\\\">\\r\\n                @if (group.get(field.name).hasError(validation.name)) {\\r\\n                    <mat-error>{{validation.message | translate}}</mat-error>\\r\\n                }\\r\\n            </ng-container>\\r\\n        }\\r\\n        @for (validation of field.asyncValidations; track validation.name) {\\r\\n            <ng-container ngProjectAs=\\\"mat-error\\\">\\r\\n                @if (group.get(field.name).hasError(validation.name)) {\\r\\n                    <mat-error>{{validation.message | translate}}</mat-error>\\r\\n                }\\r\\n            </ng-container>\\r\\n        }\\r\\n    </mat-form-field>\\r\\n    `,\\r\\n    styles: ['mat-form-field {width: calc(100%)}']\\r\\n})\\r\\nexport class KlesFormTextHeaderFilterComponent extends KlesFieldAbstract implements OnInit {\\r\\n\\r\\n    field: IKlesHeaderFieldConfig;\\r\\n    filteredOption: Observable<any[]>;\\r\\n    options$: Observable<any[]>;\\r\\n\\r\\n    ngOnInit(): void {\\r\\n        if (this.field.options instanceof Observable) {\\r\\n            this.options$ = this.field.options;\\r\\n        } else {\\r\\n            this.options$ = of(this.field.options as any);\\r\\n        }\\r\\n\\r\\n        this.filteredOption = this.group.get(this.field.name).valueChanges\\r\\n            .pipe(\\r\\n                startWith(''),\\r\\n                switchMap(data => data ? this.filterData(data) : this.options$)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    isPending() {\\r\\n        return this.group.controls[this.field.name].pending;\\r\\n    }\\r\\n\\r\\n    private filterData(value: any): Observable<any[]> {\\r\\n        let filterValue;\\r\\n\\r\\n        if (typeof value === 'string' && Object.prototype.toString.call(value) === '[object String]') {\\r\\n            filterValue = value.toLowerCase();\\r\\n        } else {\\r\\n            filterValue = value[this.field.property].toLowerCase();\\r\\n        }\\r\\n\\r\\n        if (this.field.property) {\\r\\n            return this.options$\\r\\n                .pipe(map(options => options.filter(option => option[this.field.property].toLowerCase().indexOf(filterValue) === 0)));\\r\\n        }\\r\\n        return this.options$.pipe(map(options => options.filter(option => option.toLowerCase().indexOf(filterValue) === 0)));\\r\\n    }\\r\\n\\r\\n\\r\\n    stopPropagation(event) {\\r\\n        event.stopPropagation();\\r\\n    }\\r\\n}\\r\\n\",\"import { KlesFieldAbstract } from '@3kles/kles-material-dynamicforms';\\r\\nimport { OnInit, Component } from '@angular/core';\\r\\nimport { IKlesHeaderFieldConfig } from '../../models/header-field.config.model';\\r\\n\\r\\n@Component({\\r\\n    selector: 'kles-form-textheaderfilter',\\r\\n    template: `\\r\\n    <div mat-sort-header [disabled]=\\\"!field.sortable\\\"><span>{{ field.label | translate}}</span></div>\\r\\n    @if (field.filterComponent) {\\r\\n        <div (click)=\\\"stopPropagation($event)\\\" style=\\\"display: inline-flex;\\\">\\r\\n            <ng-container klesComponentHeader [component]=\\\"field.filterComponent\\\" [group]=\\\"group\\\" [field]=\\\"filterField\\\" >\\r\\n            </ng-container>\\r\\n            <span style=\\\"padding-top: 10px;\\\">\\r\\n                @if (field.filterClearable && group.get(field.name).value) {\\r\\n                    <button mat-button mat-icon-button aria-label=\\\"Clear\\\" type=\\\"button\\\"\\r\\n                        (click)=\\\"group.controls[field.name].reset();\\\">\\r\\n                        <mat-icon>close</mat-icon>\\r\\n                    </button>\\r\\n                }\\r\\n            </span>\\r\\n    </div>\\r\\n    }\\r\\n    `,\\r\\n    styles: [`mat-form-field {width: calc(100%)} \\r\\n        mat-icon {font-size: 16px; height:16px; width:16px} \\r\\n        .mat-mdc-icon-button {padding-bottom: 4px; min-width: 0; width: 22px; height: 22px; flex-shrink: 0; line-height: 1; border-radius: 50%;}\\r\\n        .mat-sort-header-container {display: flex; justify-content: center;}`\\r\\n    ]\\r\\n})\\r\\nexport class KlesFormDynamicHeaderFilterComponent extends KlesFieldAbstract implements OnInit {\\r\\n    field: IKlesHeaderFieldConfig;\\r\\n    filterField: IKlesHeaderFieldConfig;\\r\\n\\r\\n    ngOnInit(): void {\\r\\n        super.ngOnInit();\\r\\n\\r\\n        this.filterField = Object.assign({}, this.field);\\r\\n        delete this.filterField['label'];\\r\\n    }\\r\\n\\r\\n    stopPropagation(event) {\\r\\n        event.stopPropagation();\\r\\n    }\\r\\n}\\r\\n\",\"import { MatSort } from \\\"@angular/material/sort\\\";\\r\\nimport { MatTableDataSource } from \\\"@angular/material/table\\\";\\r\\nimport { KlesTreetableComponent } from \\\"./treetable.component\\\";\\r\\n\\r\\nexport class MatTreetableData<T> extends MatTableDataSource<T> {\\r\\n\\r\\n  _compareFn = new Intl.Collator('pl', { sensitivity: 'base', numeric: true }).compare;\\r\\n\\r\\n  private sortChildrends(parent, sort, data) {\\r\\n    return data.filter(line => parent === this.parentDataAccessor(line, sort.active))\\r\\n      .sort((a, b) => {\\r\\n        const valueA = this.sortingDataAccessor(a, sort.active);\\r\\n        const valueB = this.sortingDataAccessor(b, sort.active);\\r\\n        const comparatorResult = this._compareFn(<string>valueA, <string>valueB);\\r\\n        return comparatorResult * (sort.direction == 'asc' ? 1 : -1);\\r\\n      })\\r\\n      .flatMap(children => {\\r\\n        return [children].concat(this.sortChildrends(children, sort, data));\\r\\n      })\\r\\n  }\\r\\n\\r\\n\\r\\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\\r\\n    const active = sort.active;\\r\\n    const direction = sort.direction;\\r\\n    if (!active || direction == '') { return data; }\\r\\n\\r\\n    return (this.sortChildrends(null, sort, data)); /** parent = null because first element has no parent */\\r\\n\\r\\n  }\\r\\n\\r\\n  deptDataAccessor: ((data: T, sortHeaderId: string) => number) = (data: T, sortHeaderId: string): number => {\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  parentDataAccessor: ((data: T, sortHeaderId: string) => T);\\r\\n\\r\\n  table: KlesTreetableComponent<any>;\\r\\n}\",\"import { Injectable } from '@angular/core';\\r\\nimport { cloneDeep } from 'lodash';\\r\\nimport * as O from 'fp-ts/lib/Option'\\r\\nimport { pipe } from \\\"fp-ts/lib/function\\\";\\r\\nimport { NodeInTree, SearchableNode, Node } from '../../models/node.model';\\r\\n\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport class TreeService {\\r\\n\\r\\n    /**\\r\\n     * Traverse a tree data structure and applies the provided @param f function\\r\\n     * to all nodes\\r\\n     * @param root the tree to be traversed\\r\\n     * @param f the function to be applied to all nodes\\r\\n     * N.B. this function modifies the existing tree\\r\\n     */\\r\\n    traverse<K extends Node>(root: K, f: (node: K) => void): void {\\r\\n        this._traverse(root, (node: K) => {\\r\\n            f(node);\\r\\n            return true;\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Search a tree for a node with the provided @param id\\r\\n     * @param root the tree to be searched\\r\\n     * @param id the id of the node to be retrieved\\r\\n     */\\r\\n    searchById<T, K extends SearchableNode<T>>(root: K, id: string): O.Option<NodeInTree<T>> {\\r\\n        let matchingNode: K;\\r\\n        const pathToRoot: { [k: string]: K } = {};\\r\\n        this._traverse(root, (node: K) => {\\r\\n            node.children?.forEach(child => {\\r\\n                pathToRoot[child._id] = node;\\r\\n            });\\r\\n            if (node._id === id) {\\r\\n                matchingNode = node;\\r\\n            }\\r\\n            return node._id !== id;\\r\\n        });\\r\\n        return matchingNode ? O.some({\\r\\n            _id: matchingNode._id,\\r\\n            value: matchingNode.value,\\r\\n            children: matchingNode.children,\\r\\n            pathToRoot: this.buildPath(id, pathToRoot)\\r\\n        }) : O.none;\\r\\n    }\\r\\n\\r\\n    getById<T, K extends SearchableNode<T>>(root: K, id: string): SearchableNode<T> {\\r\\n        let matchingNode: K;\\r\\n        this._traverse(root, (node: K) => {\\r\\n            if (node._id === id) {\\r\\n                matchingNode = node;\\r\\n            }\\r\\n            return node._id !== id;\\r\\n        });\\r\\n        return matchingNode;\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal function that can be used to traverse or search the tree\\r\\n     * @param root the tree to be scanned\\r\\n     * @param f an optional function to be applied to all nodes\\r\\n     */\\r\\n    private _traverse<T, K extends Node>(root: K, f: (node: K) => boolean): void {\\r\\n        if (!f(root)) {\\r\\n            return;\\r\\n        }\\r\\n        root.children?.forEach(c => this._traverse(c, f));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Given a @param root tree and a @param node node, calculate the\\r\\n     * depth of the node in the tree\\r\\n     * @param root the tree\\r\\n     * @param node the node we want to calculate the depth of\\r\\n     */\\r\\n    getNodeDepth<T, K extends SearchableNode<T>>(root: K, node: K): number {\\r\\n        return pipe(\\r\\n            this.searchById(root, node._id),\\r\\n            O.fold(() => -1, n => n.pathToRoot.length)\\r\\n        )\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Flatten a @param root tree into a list of its nodes\\r\\n     * @param root the tree to be flattened\\r\\n     */\\r\\n    flatten<T, K extends Node>(root: K): K[] {\\r\\n        const result = [cloneDeep(root)];\\r\\n        for (const node of result) {\\r\\n            if (node.children) {\\r\\n                result.splice(result.indexOf(node) + 1, 0, ...node.children as K[]);\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal function used to build the pathToRoot of a node in a tree\\r\\n     * @param id the id of the node\\r\\n     * @param pathMap the pathMap returned by searchById\\r\\n     */\\r\\n    private buildPath<T, K extends SearchableNode<T>>(id: string, pathMap: { [k: string]: K }): K[] {\\r\\n        const pathToRoot = [];\\r\\n        let key = id;\\r\\n        while (key) {\\r\\n            if (pathMap[key]) {\\r\\n                pathToRoot.push(pathMap[key]);\\r\\n                key = pathMap[key]._id;\\r\\n            } else {\\r\\n                key = null;\\r\\n            }\\r\\n        }\\r\\n        return pathToRoot;\\r\\n    }\\r\\n\\r\\n}\",\"import { Injectable } from '@angular/core';\\r\\nimport { cloneDeep } from 'lodash';\\r\\nimport { TreeService } from './tree.service';\\r\\nimport { v4 as uuidv4 } from 'uuid';\\r\\nimport * as O from 'fp-ts/lib/Option';\\r\\nimport { SearchableNode, TreeTableNode, Node } from '../../models/node.model';\\r\\n\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport class ConverterService {\\r\\n\\r\\n    constructor(private treeService: TreeService) { }\\r\\n\\r\\n    /**\\r\\n     * Clone a Node<T> object and convert it to a SearchableNode<T>\\r\\n     * @param tree the node to be converted\\r\\n     */\\r\\n    toSearchableTree<T>(tree: Node): SearchableNode<T> {\\r\\n        const treeClone = cloneDeep<any>(tree) as SearchableNode<T>;\\r\\n        this.treeService.traverse(treeClone, (node: SearchableNode<T>) => {\\r\\n            node._id = node._id ? node._id : uuidv4();\\r\\n        });\\r\\n        return treeClone;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Clone a SearchableNode<T> object and convert it to a TreeTableNode<T>\\r\\n     * @param tree the node to be converted\\r\\n     */\\r\\n    toTreeTableTree<T>(tree: SearchableNode<T>): TreeTableNode<T> {\\r\\n        const treeClone = cloneDeep(tree) as TreeTableNode<T>;\\r\\n        this.treeService.traverse(treeClone, (node: TreeTableNode<T>) => {\\r\\n            const root = this.treeService.searchById(treeClone, node._id);\\r\\n\\r\\n            if (O.isSome(root) && root.value.pathToRoot.length > 0) {\\r\\n                node.parentId = root.value.pathToRoot[0]._id;\\r\\n            }\\r\\n\\r\\n            node.depth = this.treeService.getNodeDepth(treeClone, node);\\r\\n            node.isExpanded = false;\\r\\n            node.isVisible = node.depth === 0;\\r\\n            node.childrenCounter = node.childrenCounter || ~~node.children?.length;\\r\\n            node.isBusy = node.isBusy || false\\r\\n        });\\r\\n        return treeClone;\\r\\n    }\\r\\n}\\r\\n\",\"import { Pipe } from \\\"@angular/core\\\";\\r\\nimport { RowPipe } from \\\"./row.pipe\\\";\\r\\nimport { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\n\\r\\n@Pipe({\\r\\n    name: 'rowTreePipe',\\r\\n    pure: false\\r\\n})\\r\\nexport class RowTreePipe extends RowPipe {\\r\\n\\r\\n    transform(row: UntypedFormGroup): any {\\r\\n        return {\\r\\n            'row-odd': row.value._status.depth % 2 !== 0,\\r\\n            ...super.transform(row)\\r\\n        }\\r\\n    }\\r\\n}\",\"import { Injectable } from \\\"@angular/core\\\";\\r\\nimport { AbstractControl, UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { AbstractKlesTableService } from \\\"../abstracttable.service\\\";\\r\\n\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport abstract class AbstractKlesTreeTableService extends AbstractKlesTableService {\\r\\n    protected table: any;\\r\\n    abstract getDepthDataAccessor(item: AbstractControl, property: string): number;\\r\\n    abstract getParentDataAccessor(item: UntypedFormGroup, property: string): AbstractControl;\\r\\n    abstract onLineOpen(e: any);\\r\\n    abstract onLineClose(e: any);\\r\\n    abstract updateRow(record: any, options?: { emitEvent: boolean; onlySelf: boolean; });\\r\\n    abstract addChild(parentId: string, record, index?: number);\\r\\n    abstract addChildren(parentId: string, record: any[], index?: number);\\r\\n    abstract deleteChild(parentId: string, record, index?: number);\\r\\n    abstract deleteChildren(parentId: string);\\r\\n}\\r\\n\",\"<form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n    <table mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n        formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n        (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\" [cdkDropListDisabled]=\\\"!dragDropRows\\\"\\r\\n        [multiTemplateDataRows]=\\\"multiTemplate\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n        [cdkDropListSortPredicate]=\\\"sortPredicate()\\\">\\r\\n        <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\"\\r\\n            [sticky]=\\\"column.sticky || false\\\">\\r\\n\\r\\n            <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n                [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                <div style=\\\"display: inline-flex;\\\">\\r\\n                    <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                    </ng-container>\\r\\n                </div>\\r\\n            </th>\\r\\n\\r\\n            @if (column.visible) {\\r\\n                <div>\\r\\n                    @if (multiTemplate) {\\r\\n                        <ng-container *cdkCellDef=\\\"let row;let index = dataIndex;\\\">\\r\\n                            <td mat-cell [style]=\\\"getCellStyle(row,column)\\\" [ngClass]=\\\"column | cellPipe\\\">\\r\\n    \\r\\n                                <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n                        </ng-container>\\r\\n                    }\\r\\n                    @else {\\r\\n                        <ng-container *cdkCellDef=\\\"let row;let index = index;\\\">\\r\\n                            <td mat-cell [style]=\\\"getCellStyle(row,column)\\\" [ngClass]=\\\"column | cellPipe\\\">\\r\\n    \\r\\n                                <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                    [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                </ng-container>\\r\\n                            </td>\\r\\n    \\r\\n                        </ng-container>\\r\\n                    }\\r\\n    \\r\\n                    <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                        @if (column.footerCell) {\\r\\n                            <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                            </ng-container>\\r\\n                        }\\r\\n                    </td>\\r\\n                </div>\\r\\n            }\\r\\n        </ng-container>\\r\\n\\r\\n        @if (templateUnfold && multiTemplate) {\\r\\n            <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n                <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                    [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\" [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                    [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                    <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\">\\r\\n                    </ng-container>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n        }\\r\\n\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n\\r\\n        <tr mat-row [ngClass]=\\\"row | rowTreePipe\\\" [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: displayedColumns();\\\"\\r\\n            (click)=\\\"onClick(row)\\\" cdkDrag [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\"\\r\\n            [class.cdk-visually-hidden]=\\\"!row.value._status.isVisible\\\">\\r\\n\\r\\n\\r\\n            @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                    <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                    </ng-container>\\r\\n                </ng-template>\\r\\n            }\\r\\n\\r\\n            @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                <ng-template cdkDragPlaceholder>\\r\\n                    <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\" [value]=\\\"row\\\">\\r\\n                    </ng-container>\\r\\n                </ng-template>\\r\\n            }\\r\\n        </tr>\\r\\n\\r\\n        @if (multiTemplate && templateUnfold) {\\r\\n            <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n            </tr>\\r\\n        }\\r\\n\\r\\n        @if (showFooter) {\\r\\n            <div>\\r\\n                <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                </tr>\\r\\n            </div>\\r\\n        }\\r\\n    </table>\\r\\n\\r\\n</form>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\">\\r\\n    </mat-paginator>\\r\\n</div>\",\"import {\\r\\n    Component, ChangeDetectionStrategy, SimpleChanges, EventEmitter, Output, ChangeDetectorRef, Inject, Signal\\r\\n} from '@angular/core';\\r\\nimport * as _ from 'lodash';\\r\\nimport { TranslateService } from '@ngx-translate/core';\\r\\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\\r\\nimport { AbstractControl, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\\r\\nimport { DomSanitizer } from '@angular/platform-browser';\\r\\nimport { MatDialog } from '@angular/material/dialog';\\r\\nimport { MatTreetableData } from './mat-treetable-datasource';\\r\\nimport { MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS } from '@angular/material-moment-adapter';\\r\\nimport { SearchableNode, TreeTableNode } from '../../models/node.model';\\r\\nimport { ConverterService } from '../../services/treetable/converter.service';\\r\\nimport { TreeService } from '../../services/treetable/tree.service';\\r\\nimport { KlesTableComponent } from '../table/table.component';\\r\\nimport { debounceTime, switchMap, take, catchError, takeUntil, map, tap } from 'rxjs/operators';\\r\\nimport { AbstractKlesTreeTableService } from '../../services/treetable/abstracttreetable.service';\\r\\nimport { of } from 'rxjs';\\r\\nimport { rowsAnimation } from '../../animations/row.animation';\\r\\nimport { KlesTreeColumnConfig } from '../../models/columnconfig.model';\\r\\nimport * as uuid from 'uuid';\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-dynamictreetable',\\r\\n    templateUrl: './treetable.component.html',\\r\\n    styleUrls: ['./treetable.component.scss', '../../styles/dragdrop.scss', '../../styles/align-cell.scss', '../../styles/input.scss'],\\r\\n    animations: [rowsAnimation],\\r\\n    providers: [\\r\\n        { provide: MAT_DATE_LOCALE, useValue: 'fr-FR' },\\r\\n        {\\r\\n            provide: DateAdapter,\\r\\n            useClass: MomentDateAdapter,\\r\\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\\r\\n        },\\r\\n        { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\\r\\n    ],\\r\\n    changeDetection: ChangeDetectionStrategy.OnPush\\r\\n})\\r\\n\\r\\nexport class KlesTreetableComponent<T> extends KlesTableComponent {\\r\\n\\r\\n\\r\\n    @Output() _onLineOpen = new EventEmitter();\\r\\n    @Output() _onLineClose = new EventEmitter();\\r\\n\\r\\n    searchableTree: SearchableNode<T>[];\\r\\n\\r\\n    dataSource = new MatTreetableData<AbstractControl>([]);\\r\\n\\r\\n    constructor(protected translate: TranslateService,\\r\\n        protected adapter: DateAdapter<any>,\\r\\n        protected formBuilder: UntypedFormBuilder,\\r\\n        public ref: ChangeDetectorRef,\\r\\n        protected dialog: MatDialog,\\r\\n        public sanitizer: DomSanitizer,\\r\\n        public _adapter: DateAdapter<any>,\\r\\n        public treeService: TreeService,\\r\\n        public converterService: ConverterService,\\r\\n        @Inject('tableService') public tableService: AbstractKlesTreeTableService) {\\r\\n        super(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, tableService);\\r\\n    }\\r\\n\\r\\n\\r\\n    ngOnInit() {\\r\\n        super.ngOnInit();\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        super.ngOnChanges(changes);\\r\\n    }\\r\\n\\r\\n    ngAfterViewInit(): void {\\r\\n        super.ngAfterViewInit();\\r\\n    }\\r\\n\\r\\n    updateData(lines: any[]) {\\r\\n        this.updateTree(lines);\\r\\n        // this.displayedColumns = this.columns.filter(e => e.visible).map(c => c.columnDef);\\r\\n        this.setItems();\\r\\n    }\\r\\n\\r\\n    protected updateTree(data: any) {\\r\\n        this._lines = (Array.isArray(data) ? data : [data]).map((line => {\\r\\n            return { _id: uuid.v4(), ...line };\\r\\n        }));\\r\\n        this.searchableTree = this._lines.map(t => this.converterService.toSearchableTree(t));\\r\\n    }\\r\\n\\r\\n\\r\\n    initFormArray() {\\r\\n        const treeTableTree = this.searchableTree.map(st => this.converterService.toTreeTableTree(st));\\r\\n        this.lineFields = [];\\r\\n        const array = this.formBuilder.array(\\r\\n            treeTableTree.flatMap(node => {\\r\\n                return this.createFormNode(node);\\r\\n            })\\r\\n        );\\r\\n        return array;\\r\\n    }\\r\\n\\r\\n    createFormNode(node: TreeTableNode<any>): UntypedFormGroup[] {\\r\\n        let children: UntypedFormGroup[] = [];\\r\\n        const parent = this.addFormLine(node);\\r\\n        if (node.children) {\\r\\n            children = node.children.flatMap(child => {\\r\\n                const childControls = this.createFormNode(child);\\r\\n                childControls.filter(control => control.value._status.depth === parent.value._status.depth + 1)\\r\\n                    .forEach((control) => {\\r\\n                        control.valueChanges\\r\\n                            .pipe(\\r\\n                                takeUntil(this._onDestroy))\\r\\n                            .subscribe((value) => {\\r\\n                                // delete value._id;\\r\\n                                // delete value._status;\\r\\n                                const v = { ...value };\\r\\n                                delete v._id;\\r\\n                                delete v._status;\\r\\n\\r\\n                                const data = {\\r\\n                                    value: v,\\r\\n                                    ...(value._status.children && { children: value._status.children }),\\r\\n                                    childrenCounter: ~~value._status?.children?.length,\\r\\n                                    depth: value._status.depth,\\r\\n                                    isExpanded: value._status.isExpanded,\\r\\n                                    isVisible: value._status.isVisible,\\r\\n                                    _id: value._id\\r\\n                                };\\r\\n\\r\\n                                parent.controls._status\\r\\n                                    .patchValue({\\r\\n                                        children:\\r\\n                                            parent.controls._status.value.children.map((c => {\\r\\n                                                if (c._id === data._id) {\\r\\n                                                    return data;\\r\\n                                                }\\r\\n                                                return c;\\r\\n                                            }))\\r\\n\\r\\n                                    }, { emitEvent: false });\\r\\n                            });\\r\\n                    });\\r\\n                return childControls;\\r\\n            });\\r\\n        }\\r\\n        return [parent, ...children];\\r\\n    }\\r\\n\\r\\n    addFormLine(row: TreeTableNode<T>): UntypedFormGroup {\\r\\n        const group = this.formBuilder.group({});\\r\\n        const idControl = this.formBuilder.control(row._id);\\r\\n        const unfoldControl = this.fb.control(row._unfold || false);\\r\\n        group.addControl('_id', idControl);\\r\\n        group.addControl('_unfold', unfoldControl);\\r\\n\\r\\n        const paginator = (this.columns as Signal<KlesTreeColumnConfig[]>)().find(c => c.paginator && c.canExpand);\\r\\n\\r\\n        const statusControl = this.formBuilder.group({\\r\\n            parentId: row.parentId,\\r\\n            isVisible: row.isVisible,\\r\\n            isExpanded: row.isExpanded,\\r\\n            depth: row.depth,\\r\\n            children: [row.children],\\r\\n            childrenCounter: row.childrenCounter || ~~row.children?.length,\\r\\n            ...(paginator && {\\r\\n                paginator: this.formBuilder.group({\\r\\n                    pageIndex: 0,\\r\\n                    pageSize: paginator.paginatorOption?.pageSize || 5,\\r\\n                    length: row.childrenCounter || ~~row.children?.length || 0\\r\\n                })\\r\\n            })\\r\\n        });\\r\\n\\r\\n        group.addControl('_status', statusControl);\\r\\n\\r\\n        const rowValue = row?.value;\\r\\n        const listField = [];\\r\\n        this.columns().forEach(column => {\\r\\n            column.cell.name = column.columnDef;\\r\\n            const colCell = _.cloneDeep(column.cell);\\r\\n            const control = this.buildControlField(colCell, rowValue[colCell.name]);\\r\\n            listField.push({ ...column.cell });\\r\\n            control.valueChanges.pipe(\\r\\n                takeUntil(this._onLinesChanges),\\r\\n                debounceTime(colCell.debounceTime || 0),\\r\\n                switchMap((value) => {\\r\\n                    if (colCell.executeAfterChange) {\\r\\n                        colCell.pending = true;\\r\\n                        this.ref.markForCheck();\\r\\n                        return colCell.executeAfterChange(colCell.name,\\r\\n                            { ...control?.parent.value, [colCell.name]: value }, control?.parent)\\r\\n                            .pipe(\\r\\n                                take(1),\\r\\n                                catchError((err) => {\\r\\n                                    console.error(err);\\r\\n                                    return of(null);\\r\\n                                }),\\r\\n                                map((response) => ({ value, response })),\\r\\n                                tap(() => {\\r\\n                                    colCell.pending = false;\\r\\n                                    this.ref.markForCheck();\\r\\n                                })\\r\\n                            );\\r\\n                    }\\r\\n                    return of({ value, response: null });\\r\\n                })\\r\\n                // distinctUntilChanged((prev, curr) => {\\r\\n                //     if (Array.isArray(prev) && Array.isArray(curr)) {\\r\\n                //         if (column.cell?.property) {\\r\\n                //             return prev.length === curr.length\\r\\n                //                 && prev.every((value, index) => value[column.cell.property] === curr[index][column.cell.property]);\\r\\n                //         } else {\\r\\n                //             return prev.length === curr.length && prev.every((value, index) => value === curr[index]);\\r\\n                //         }\\r\\n                //     } else {\\r\\n                //         if (column.cell?.property && prev && curr) {\\r\\n                //             return prev[column.cell.property] === curr[column.cell.property];\\r\\n                //         }\\r\\n                //     }\\r\\n                //     return prev === curr;\\r\\n                // })\\r\\n            ).subscribe(e => {\\r\\n                const group = control.parent;\\r\\n                this.tableService.onCellChange({ column, row, group, response: e.response });\\r\\n                this._onChangeCell.emit({ column, row, group, response: e.response });\\r\\n            });\\r\\n            control.statusChanges.subscribe(status => {\\r\\n                const group = control.parent;\\r\\n                this.tableService.onStatusCellChange({ cell: control, group, status });\\r\\n                this._onStatusCellChange.emit({ cell: control, group, status });\\r\\n            });\\r\\n\\r\\n            group.addControl(column.cell.name, control);\\r\\n        });\\r\\n        this.lineFields.push(listField);\\r\\n\\r\\n        group.setValidators(this.lineValidations);\\r\\n        group.setAsyncValidators(this.lineAsyncValidations);\\r\\n\\r\\n        group.valueChanges.subscribe(value => {\\r\\n            this.tableService.onLineChange({ group, row, value });\\r\\n        });\\r\\n\\r\\n        group.statusChanges.subscribe(status => {\\r\\n            this.tableService.onStatusLineChange({ group, row, status });\\r\\n            this._onStatusLineChange.emit({ group, row, status });\\r\\n        });\\r\\n        return group;\\r\\n    }\\r\\n\\r\\n\\r\\n    setDataSourceAttributes() {\\r\\n        super.setDataSourceAttributes();\\r\\n        this.dataSource.table = this;\\r\\n        this.dataSource.deptDataAccessor = this.tableService.getDepthDataAccessor;\\r\\n        this.dataSource.parentDataAccessor = this.tableService.getParentDataAccessor;\\r\\n    }\\r\\n}\\r\\n\",\"import { SafeStyle } from '@angular/platform-browser';\\r\\nimport { Observable } from 'rxjs';\\r\\nimport { KlesColumnConfig } from '../../models/columnconfig.model';\\r\\nimport { AbstractKlesTreeTableService } from '../treetable/abstracttreetable.service';\\r\\n\\r\\nexport abstract class AbstractKlesLazyTreetableService extends AbstractKlesTreeTableService {\\r\\n\\r\\n    abstract load(sort: string, order: string, page: number, perPage: number, filter?: { [key: string]: any; })\\r\\n        : Observable<{ lines: any[], totalCount: number, footer?: any, header?: any }>;\\r\\n    abstract loadChild(parent: any, sort?: string, order?: string, page?: number, perPage?: number, filter?: { [key: string]: any; })\\r\\n        : Observable<{ lines: any[], totalCount: number }>;\\r\\n}\\r\\n\",\"<div style=\\\"position: relative;\\\">\\r\\n    @if (loading) {\\r\\n        <div class=\\\"loading\\\">\\r\\n            <mat-spinner></mat-spinner>\\r\\n        </div>\\r\\n    }\\r\\n\\r\\n    <form class=\\\"dynamic-form\\\" [formGroup]=\\\"form\\\" cdkScrollable>\\r\\n        <table mat-table matSort [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"options.elevation | elevationPipe\\\"\\r\\n            formArrayName=\\\"rows\\\" [trackBy]=\\\"multiTemplate ? null : trackById\\\" cdkDropList\\r\\n            [multiTemplateDataRows]=\\\"multiTemplate\\\" (cdkDropListDropped)=\\\"drop($event)\\\" [cdkDropListData]=\\\"this\\\"\\r\\n            [cdkDropListDisabled]=\\\"!dragDropRows\\\" [cdkDropListAutoScrollStep]=\\\"dragDropRowsOptions.autoScrollStep\\\"\\r\\n            [cdkDropListSortPredicate]=\\\"sortPredicate()\\\">\\r\\n            <ng-container *ngFor=\\\"let column of columns();\\\" [cdkColumnDef]=\\\"column.columnDef\\\" [sticky]=\\\"column.sticky || false\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef [klesResizeColumn]=\\\"column.resizable\\\" class=\\\"{{column.class}}\\\"\\r\\n                    [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                    <div style=\\\"display: inline-flex;\\\">\\r\\n                        <ng-container klesDynamicField [field]=\\\"column.headerCell\\\" [group]=\\\"formHeader\\\">\\r\\n                        </ng-container>\\r\\n                    </div>\\r\\n                </th>\\r\\n                @if (column.visible) {\\r\\n                    <div>\\r\\n                        @if (multiTemplate) {\\r\\n                            <ng-container *cdkCellDef=\\\"let row;let index = dataIndex;\\\">\\r\\n                                <td mat-cell [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                    [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                    <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                        [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                    </ng-container>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                        }\\r\\n                        @else {\\r\\n                            <ng-container *cdkCellDef=\\\"let row;let index = index;\\\">\\r\\n                                <td mat-cell [style]=\\\"getCellStyle(row,column)\\\"\\r\\n                                    [ngClass]=\\\"column | cellPipe\\\">\\r\\n                                    <ng-container klesDynamicTreeCell [field]=\\\"column | fieldPipe:index\\\"\\r\\n                                        [group]=\\\"index | groupPipe\\\" [row]=\\\"row\\\" [column]=\\\"column\\\">\\r\\n                                    </ng-container>\\r\\n                                </td>\\r\\n    \\r\\n                            </ng-container>\\r\\n                        }\\r\\n    \\r\\n                        <td mat-footer-cell *matFooterCellDef [style]=\\\"getFooterStyle(column)\\\">\\r\\n                            @if (column.footerCell) {\\r\\n                                <ng-container klesDynamicField [field]=\\\"column.footerCell\\\" [group]=\\\"formFooter\\\">\\r\\n                                </ng-container>\\r\\n                            }\\r\\n                        </td>\\r\\n                    </div>\\r\\n                }\\r\\n\\r\\n            </ng-container>\\r\\n\\r\\n            @if (templateUnfold && multiTemplate) {\\r\\n                <ng-container *ngFor=\\\"let cell of templateUnfold.cells\\\" [matColumnDef]=\\\"cell.name\\\">\\r\\n                    <td mat-cell *matCellDef=\\\"let row;let index = dataIndex;\\\"\\r\\n                        [attr.colspan]=\\\"cell.colspan | spanPipe:displayedColumns().length\\\"\\r\\n                        [attr.rowspan]=\\\"cell.rowspan\\\"\\r\\n                        [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\r\\n                        <ng-container klesDynamicField [field]=\\\"cell\\\" [group]=\\\"index | groupPipe\\\"\\r\\n                            [siblingFields]=\\\"lineFields[row.value._index]\\\">\\r\\n                        </ng-container>\\r\\n                    </td>\\r\\n                </ng-container>\\r\\n            }\\r\\n\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns();sticky: true;\\\"></tr>\\r\\n            <tr mat-row [ngClass]=\\\"row | rowTreePipe\\\" [@rowsAnimation]=\\\"\\\"\\r\\n                *matRowDef=\\\"let row; columns: displayedColumns();\\\"\\r\\n                [class.cdk-visually-hidden]=\\\"!row.value._status.isVisible\\\" (click)=\\\"onClick(row)\\\" cdkDrag\\r\\n                [cdkDragData]=\\\"row\\\" [cdkDragDisabled]=\\\"(row | rowDragDisabledPipe)\\\">\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPreview?.component) {\\r\\n                    <ng-template cdkDragPreview [matchSize]=\\\"true\\\">\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPreview?.component\\\" [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n\\r\\n                @if (dragDropRowsOptions?.dragPlaceholder?.component) {\\r\\n                    <ng-template cdkDragPlaceholder>\\r\\n                        <ng-container klesComponent [component]=\\\"dragDropRowsOptions?.dragPlaceholder?.component\\\"\\r\\n                            [value]=\\\"row\\\">\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                }\\r\\n            </tr>\\r\\n\\r\\n            @if (multiTemplate && templateUnfold) {\\r\\n                <tr mat-row [@rowsAnimation]=\\\"\\\" *matRowDef=\\\"let row; columns: getTemplateColumns(templateUnfold); when: tableService.unfoldPredicate\\\">\\r\\n                </tr>\\r\\n            }\\r\\n\\r\\n            @if (showFooter) {\\r\\n                <div>\\r\\n                    <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns();sticky: true\\\">\\r\\n                    </tr>\\r\\n                </div>\\r\\n            }\\r\\n        </table>\\r\\n\\r\\n    </form>\\r\\n</div>\\r\\n<div [hidden]=\\\"hidePaginator\\\">\\r\\n    <mat-paginator #paginator [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\" [showFirstLastButtons]=\\\"true\\\"\\r\\n        (page)=\\\"pageChanged($event)\\\">\\r\\n    </mat-paginator>\\r\\n</div>\",\"import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnChanges, OnDestroy, OnInit, Signal, SimpleChanges } from '@angular/core';\\r\\nimport { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\\r\\nimport { DateAdapter } from '@angular/material/core';\\r\\nimport { MatDialog } from '@angular/material/dialog';\\r\\nimport { DomSanitizer } from '@angular/platform-browser';\\r\\nimport { TranslateService } from '@ngx-translate/core';\\r\\nimport * as _ from 'lodash';\\r\\nimport { BehaviorSubject, concat, merge, of } from 'rxjs';\\r\\nimport { catchError, debounceTime, switchMap, tap, take, takeUntil, filter, map } from 'rxjs/operators';\\r\\nimport { TreeTableNode } from '../../models/node.model';\\r\\nimport { AbstractKlesLazyTreetableService } from '../../services/lazy/abstractlazytreetable.service';\\r\\nimport { ConverterService } from '../../services/treetable/converter.service';\\r\\nimport { TreeService } from '../../services/treetable/tree.service';\\r\\nimport { KlesTreetableComponent } from '../treetable/treetable.component';\\r\\nimport { rowsAnimation } from '../../animations/row.animation';\\r\\nimport { KlesTreeColumnConfig } from '../../models/columnconfig.model';\\r\\n\\r\\n@Component({\\r\\n    selector: 'app-kles-lazytreetable',\\r\\n    templateUrl: './lazytreetable.component.html',\\r\\n    styleUrls: ['./lazytreetable.component.scss', '../../styles/dragdrop.scss', '../../styles/align-cell.scss', '../../styles/input.scss'],\\r\\n    animations: [rowsAnimation],\\r\\n    changeDetection: ChangeDetectionStrategy.OnPush\\r\\n})\\r\\n\\r\\nexport class KlesLazyTreetableComponent<T> extends KlesTreetableComponent<T> implements OnInit, OnChanges, AfterViewInit, OnDestroy {\\r\\n\\r\\n    loading: boolean;\\r\\n\\r\\n    filteredValues$ = new BehaviorSubject<{ [key: string]: any; }>({});\\r\\n\\r\\n    constructor(protected translate: TranslateService,\\r\\n        protected adapter: DateAdapter<any>,\\r\\n        protected formBuilder: UntypedFormBuilder,\\r\\n        public ref: ChangeDetectorRef,\\r\\n        protected dialog: MatDialog,\\r\\n        public sanitizer: DomSanitizer,\\r\\n        public _adapter: DateAdapter<any>,\\r\\n        public treeService: TreeService,\\r\\n        public converterService: ConverterService,\\r\\n        @Inject('tableService') public tableService: AbstractKlesLazyTreetableService) {\\r\\n        super(translate, adapter, formBuilder, ref, dialog, sanitizer, _adapter, treeService, converterService\\r\\n            , tableService);\\r\\n    }\\r\\n\\r\\n    ngOnInit(): void {\\r\\n        super.ngOnInit();\\r\\n    }\\r\\n\\r\\n    ngOnChanges(changes: SimpleChanges): void {\\r\\n        super.ngOnChanges(changes);\\r\\n    }\\r\\n\\r\\n    ngAfterViewInit(): void {\\r\\n        super.ngAfterViewInit();\\r\\n        this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\\r\\n\\r\\n        merge(this.sort.sortChange, this.paginator.page, this.filteredValues$.pipe(debounceTime(500)))\\r\\n            .pipe(\\r\\n                takeUntil(this._onDestroy),\\r\\n                switchMap(() => {\\r\\n                    return concat(\\r\\n                        of({ loading: true, value: { lines: [], totalCount: 0, footer: {}, header: {} } }),\\r\\n                        this.tableService.load(this.sort.active, this.sort.direction, this.paginator.pageIndex, this.paginator.pageSize,\\r\\n                            this.filteredValues$.getValue()).pipe(\\r\\n                                map(value => ({ loading: false, value })),\\r\\n                                catchError((err) => {\\r\\n                                    console.error(err);\\r\\n                                    return of({ loading: false, value: { lines: [], totalCount: 0, footer: {}, header: {} } });\\r\\n                                })\\r\\n                            )\\r\\n                    );\\r\\n                })\\r\\n            )\\r\\n            .subscribe((response) => {\\r\\n                if (response.loading) {\\r\\n                    this.loading = true;\\r\\n                } else {\\r\\n                    this.loading = false;\\r\\n\\r\\n                    if (this.showFooter && response.value.footer) {\\r\\n                        this.formFooter.patchValue(response.value.footer);\\r\\n                    }\\r\\n                    if (response.value.header) {\\r\\n                        this.formHeader.patchValue(response.value.header, { emitEvent: false });\\r\\n                    }\\r\\n\\r\\n                    this.updateData(response.value.lines);\\r\\n                    this.paginator.length = response.value.totalCount;\\r\\n                }\\r\\n                // this.ref.markForCheck();\\r\\n            });\\r\\n\\r\\n    }\\r\\n\\r\\n    ngOnDestroy(): void {\\r\\n        super.ngOnDestroy();\\r\\n    }\\r\\n\\r\\n    getLineFields(index, key) {\\r\\n        return this.lineFields[index].find(f => f.name === key);\\r\\n    }\\r\\n\\r\\n    createFormNode(node: TreeTableNode<any>): UntypedFormGroup[] {\\r\\n        let children: UntypedFormGroup[] = [];\\r\\n        const parent = this.addFormLine(node);\\r\\n        if (node.children) {\\r\\n            children = node.children.flatMap(child => {\\r\\n                const childControls = this.createFormNode(child);\\r\\n                childControls.filter(control => control.value._status.depth === parent.value._status.depth + 1)\\r\\n                    .forEach((control) => {\\r\\n                        control.valueChanges\\r\\n                            .pipe(\\r\\n                                takeUntil(this._onDestroy))\\r\\n                            .subscribe((value) => {\\r\\n                                const v = { ...value };\\r\\n                                delete v._id;\\r\\n                                delete v._status;\\r\\n\\r\\n                                const data = {\\r\\n                                    value: v,\\r\\n                                    ...(value._status.children && { children: value._status.children }),\\r\\n                                    childrenCounter: value._status.childrenCounter || ~~value._status?.children?.length,\\r\\n                                    depth: value._status.depth,\\r\\n                                    isExpanded: value._status.isExpanded,\\r\\n                                    isVisible: value._status.isVisible,\\r\\n                                    isBusy: value._status.isBusy || false,\\r\\n                                    _id: value._id,\\r\\n                                };\\r\\n\\r\\n                                parent.controls._status\\r\\n                                    .patchValue({\\r\\n                                        children:\\r\\n                                            parent.controls._status.value.children\\r\\n                                                .filter(c => c._id !== value._id)\\r\\n                                                .concat(data)\\r\\n                                    });\\r\\n                            });\\r\\n                    });\\r\\n                return childControls;\\r\\n            });\\r\\n        }\\r\\n        return [parent, ...children];\\r\\n    }\\r\\n\\r\\n\\r\\n    addFormLine(row: TreeTableNode<T>): UntypedFormGroup {\\r\\n        const group = this.formBuilder.group({});\\r\\n        const idControl = this.formBuilder.control(row._id);\\r\\n        const unfoldControl = this.fb.control(row._unfold || false);\\r\\n        group.addControl('_id', idControl);\\r\\n        group.addControl('_unfold', unfoldControl);\\r\\n\\r\\n        const paginator = (this.columns as Signal<KlesTreeColumnConfig[]>)().find(c => c.paginator && c.canExpand);\\r\\n\\r\\n        const statusControl = this.formBuilder.group({\\r\\n            isVisible: row.isVisible,\\r\\n            isExpanded: row.isExpanded,\\r\\n            depth: row.depth,\\r\\n            childrenCounter: row.childrenCounter || ~~row.children?.length,\\r\\n            children: [row.children],\\r\\n            isBusy: false,\\r\\n            ...(paginator && {\\r\\n                paginator: this.formBuilder.group({\\r\\n                    pageIndex: 0,\\r\\n                    pageSize: paginator.paginatorOption?.pageSize || this.paginator?.pageSize || 5,\\r\\n                    length: 0\\r\\n                })\\r\\n            })\\r\\n        });\\r\\n        group.addControl('_status', statusControl);\\r\\n\\r\\n        merge(statusControl.controls.paginator?.valueChanges || of(), statusControl.controls.isExpanded.valueChanges)\\r\\n            .pipe(\\r\\n                takeUntil(this._onDestroy),\\r\\n                switchMap(() => {\\r\\n                    if (statusControl.controls.isExpanded.value) {\\r\\n                        return concat(\\r\\n                            of({ loading: true, value: { lines: [], totalCount: 0 } }),\\r\\n                            this.tableService.loadChild(group, this.sort.active, this.sort.direction, statusControl.controls.paginator?.value.pageIndex,\\r\\n                                statusControl.controls.paginator?.value.pageSize, this.filteredValues$.getValue()).pipe(\\r\\n                                    map(value => ({ loading: false, value })),\\r\\n                                    catchError((err) => {\\r\\n                                        console.error(err);\\r\\n                                        return of({ loading: false, value: { lines: [], totalCount: 0 } });\\r\\n                                    })\\r\\n                                )\\r\\n                        );\\r\\n                    }\\r\\n                    return of({ loading: false, value: { lines: [], totalCount: 0 } })\\r\\n\\r\\n                })\\r\\n            ).subscribe(({ loading, value }) => {\\r\\n                if (!loading) {\\r\\n                    this.tableService.deleteChildren(row._id);\\r\\n                    if (value.lines.length) {\\r\\n                        value.lines.forEach(child => this.tableService.addChild(row._id, child));\\r\\n                    }\\r\\n                    statusControl.controls.paginator?.patchValue({ length: value.totalCount }, { emitEvent: false });\\r\\n                }\\r\\n                statusControl.patchValue({ isBusy: loading }, { emitEvent: false });\\r\\n\\r\\n                this.ref.markForCheck();\\r\\n            })\\r\\n\\r\\n        const rowValue = row.value;\\r\\n        const listField = [];\\r\\n        this.columns().forEach(column => {\\r\\n            column.cell.name = column.columnDef;\\r\\n            const colCell = _.cloneDeep(column.cell);\\r\\n            const control = this.buildControlField(colCell, rowValue[colCell.name]);\\r\\n            listField.push(colCell);\\r\\n            control.valueChanges.pipe(\\r\\n                takeUntil(this._onLinesChanges),\\r\\n                debounceTime(colCell.debounceTime || 0),\\r\\n                switchMap((value) => {\\r\\n                    if (colCell.executeAfterChange) {\\r\\n                        colCell.pending = true;\\r\\n                        this.ref.markForCheck();\\r\\n                        return colCell.executeAfterChange(colCell.name,\\r\\n                            { ...control?.parent.value, [colCell.name]: value }, control?.parent)\\r\\n                            .pipe(\\r\\n                                take(1),\\r\\n                                catchError((err) => {\\r\\n                                    console.error(err);\\r\\n                                    return of(null);\\r\\n                                }),\\r\\n                                map((response) => ({ value, response })),\\r\\n                                tap(() => {\\r\\n                                    colCell.pending = false;\\r\\n                                    this.ref.markForCheck();\\r\\n                                })\\r\\n                            );\\r\\n                    }\\r\\n                    return of({ value, response: null });\\r\\n                })\\r\\n            ).subscribe(e => {\\r\\n                const group = control.parent;\\r\\n                this.tableService.onCellChange({ column, row, group, response: e.response });\\r\\n                this._onChangeCell.emit({ column, row, group, response: e.response });\\r\\n            });\\r\\n            control.statusChanges.pipe(takeUntil(this._onLinesChanges)).subscribe(status => {\\r\\n                const group = control.parent;\\r\\n                this.tableService.onStatusCellChange({ cell: control, group, status });\\r\\n                this._onStatusCellChange.emit({ cell: control, group, status });\\r\\n            });\\r\\n\\r\\n            group.addControl(column.cell.name, control);\\r\\n        });\\r\\n        this.lineFields.push(listField);\\r\\n\\r\\n        group.setValidators(this.lineValidations);\\r\\n        group.setAsyncValidators(this.lineAsyncValidations);\\r\\n\\r\\n        group.valueChanges.pipe(\\r\\n            takeUntil(this._onDestroy)\\r\\n        ).subscribe(value => {\\r\\n            this.tableService.onLineChange({ group, row, value });\\r\\n        });\\r\\n\\r\\n        group.statusChanges\\r\\n            .pipe(takeUntil(this._onDestroy))\\r\\n            .subscribe(status => {\\r\\n                this.tableService.onStatusLineChange({ group, row, status });\\r\\n                this._onStatusLineChange.emit({ group, row, status });\\r\\n            });\\r\\n        return group;\\r\\n    }\\r\\n\\r\\n    setDataSourceAttributes() {\\r\\n        if (this.sort) {\\r\\n            if (this.paginator && !this.hidePaginator) {\\r\\n                this.sort.sortChange.subscribe(() => {\\r\\n                    this.paginator.pageIndex = 0;\\r\\n                });\\r\\n            }\\r\\n            if (\\r\\n                // !this.sortDefault && \\r\\n                this.sortConfig) {\\r\\n                this.sort.active = this.sortConfig.active;\\r\\n                this.sort.direction = this.sortConfig.direction;\\r\\n                this.sort.sortChange.emit(this.sortConfig);\\r\\n                // this.sortDefault = !this.sortDefault;\\r\\n            }\\r\\n        }\\r\\n        this.tableService.setTable(this);\\r\\n        this.dataSource.table = this;\\r\\n        this.dataSource.deptDataAccessor = this.tableService.getDepthDataAccessor;\\r\\n        this.dataSource.parentDataAccessor = this.tableService.getParentDataAccessor;\\r\\n    }\\r\\n}\\r\\n\",\"import { Injectable } from '@angular/core';\\r\\nimport { AbstractControl, UntypedFormArray, UntypedFormGroup } from '@angular/forms';\\r\\nimport { KlesColumnConfig } from '../models/columnconfig.model';\\r\\nimport { SafeStyle } from '@angular/platform-browser';\\r\\nimport { AbstractKlesTableService } from './abstracttable.service';\\r\\nimport * as uuid from 'uuid';\\r\\nimport { IChangeCell, IChangeHeaderFooterCell, IChangeLine } from '../models/cell.model';\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport class DefaultKlesTableService extends AbstractKlesTableService {\\r\\n\\r\\n\\r\\n    //Header\\r\\n    onHeaderChange(e: any) { }\\r\\n    onHeaderCellChange(e: IChangeHeaderFooterCell) { }\\r\\n    onStatusHeaderChange(e: any) { }\\r\\n\\r\\n    //Line\\r\\n    onCellChange(e: IChangeCell) { }\\r\\n    onStatusCellChange(e: any) { }\\r\\n    onLineChange(e: IChangeLine) {\\r\\n        if (this.table.multiTemplate) {\\r\\n            this.table.matTable.renderRows();\\r\\n        }\\r\\n    }\\r\\n    onStatusLineChange(e: any) { }\\r\\n    onClick(e: any) { }\\r\\n\\r\\n    //drag and drop\\r\\n    drop(e: any) { }\\r\\n\\r\\n    getSortPredicate(index: number, item: any): boolean {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //Footer\\r\\n    onFooterChange(e: any) { }\\r\\n    onFooterCellChange(e: IChangeHeaderFooterCell) { }\\r\\n\\r\\n    //Paginator\\r\\n    onPageChange(e: any) { }\\r\\n\\r\\n    //Data\\r\\n    onDataLoaded() { }\\r\\n\\r\\n    //Cell Style\\r\\n    getCellStyle(row: any, column: KlesColumnConfig): SafeStyle { return ''; }\\r\\n    getFooterStyle(column: KlesColumnConfig): SafeStyle { return ''; }\\r\\n\\r\\n    //Sorting\\r\\n    getSortingDataAccessor = (item: AbstractControl, property) => {\\r\\n        if (!item.value) {\\r\\n            return item.value;\\r\\n        }\\r\\n        let value: any = item.value[property];\\r\\n\\r\\n        if (value) {\\r\\n            if (typeof value === 'string') {\\r\\n                value = value.toLowerCase();\\r\\n            }\\r\\n            else if (typeof value === 'object') {\\r\\n                if (value.key) {\\r\\n                    value = value.key;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    };\\r\\n\\r\\n    /**Util Table */\\r\\n    //Manage Record\\r\\n    addRecord(record, index?: number): UntypedFormGroup {\\r\\n        const _id = record._id || uuid.v4();\\r\\n        delete record._id;\\r\\n\\r\\n        const newRecord = {\\r\\n            _id,\\r\\n            _index: typeof index === 'undefined' ? this.table._lines.length : index,\\r\\n            value: record\\r\\n        };\\r\\n\\r\\n        const group: UntypedFormGroup = this.table.addFormLine(newRecord);\\r\\n\\r\\n        if (typeof index !== 'undefined') {\\r\\n\\r\\n            (this.table.getFormArray() as UntypedFormArray).controls.forEach((row: UntypedFormGroup) => {\\r\\n                if (row.value._index >= index) {\\r\\n                    row.patchValue({ _index: row.value._index + 1 }, { emitEvent: false });\\r\\n                }\\r\\n            });\\r\\n            this.table._lines.forEach((line) => {\\r\\n                if (line._index >= index) {\\r\\n                    line._index = line._index + 1;\\r\\n                }\\r\\n            });\\r\\n\\r\\n            this.table._lines.splice(index, 0, newRecord);\\r\\n            this.table.getFormArray().insert(index, group);\\r\\n        } else {\\r\\n            this.table._lines.push(newRecord);\\r\\n            this.table.getFormArray().push(group);\\r\\n        }\\r\\n\\r\\n        this.updateDataSource();\\r\\n\\r\\n        return group;\\r\\n    }\\r\\n\\r\\n    deleteRecord(event: AbstractControl[]) {\\r\\n        // console.log('Delete Record=', event);\\r\\n        event.forEach((e: UntypedFormGroup) => {\\r\\n            const id = e.controls['_id'].value;\\r\\n            const index = this.table.getFormArray().controls.findIndex(f => f.value._id === id);\\r\\n            this.table.getFormArray().removeAt(index);\\r\\n            this.table._lines = this.table._lines.filter(f => f._id !== id);\\r\\n        });\\r\\n        // console.log('List _lines=', this.table._lines);\\r\\n        this.updateDataSource();\\r\\n        this.table.selection.clear();\\r\\n    }\\r\\n\\r\\n\\r\\n    updateRecord(record, options?: { emitEvent: boolean, onlySelf: boolean }) {\\r\\n        const updateForm = this.table.getFormArray().controls\\r\\n            .find((f: UntypedFormGroup) => f.controls._id.value === '' + record._id);\\r\\n        if (updateForm) {\\r\\n            updateForm.patchValue(record, options);\\r\\n            this.updateDataSource();\\r\\n            this.table.ref.detectChanges();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    protected updateDataSource() {\\r\\n        this.table.dataSource.data = this.table.getFormArray().controls;\\r\\n        this.table.dataSource.filteredData = this.table.getFormArray().controls;\\r\\n    }\\r\\n\\r\\n    unfoldPredicate = (index: any, data: any) => {\\r\\n        return data.controls._unfold.value;\\r\\n    }\\r\\n\\r\\n    /**Setters */\\r\\n    public setTable(table: any) {\\r\\n        this.table = table;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"import { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { KlesTableComponent } from \\\"../../../component/table/table.component\\\";\\r\\nimport { KlesTableBaseService } from \\\"../tableservice.interface\\\";\\r\\n\\r\\nexport class KlesSelectionTableService implements KlesTableBaseService {\\r\\n  table: KlesTableComponent;\\r\\n  columnSelect: string;\\r\\n\\r\\n  constructor(column: string) {\\r\\n    this.columnSelect = column;\\r\\n  }\\r\\n\\r\\n  changeSelectionHeader(e: any) {\\r\\n    if (e.column.columnDef === this.columnSelect) {\\r\\n      const val = (e.group as UntypedFormGroup).controls[this.columnSelect].value;\\r\\n      this.table.getFormArray().controls\\r\\n        .filter((e: UntypedFormGroup) => e.controls[this.columnSelect]?.enabled)\\r\\n        .forEach((e: UntypedFormGroup) => {\\r\\n          e.controls[this.columnSelect]?.patchValue(val);\\r\\n        });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  changeSelectionLine(e: any) {\\r\\n    if (this.table) {\\r\\n      if (e.column.columnDef === this.columnSelect && e.row) {\\r\\n        if (this.table.dataSource.filteredData.includes(e.group)) {\\r\\n          if ((e.group as UntypedFormGroup).controls[e.column.columnDef].value) {\\r\\n            if (!this.table.selection.isMultipleSelection()) {\\r\\n              this.table.getFormArray().controls\\r\\n                .filter((row: UntypedFormGroup) => row.value._id !== e.group.value._id)\\r\\n                .forEach((row: UntypedFormGroup) => {\\r\\n                  row.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\\r\\n                });\\r\\n            }\\r\\n\\r\\n            this.table.selection.select(e.group);\\r\\n\\r\\n          } else {\\r\\n            this.table.selection.deselect(e.group);\\r\\n          }\\r\\n          this.table._onSelected.emit(this.table.selection.selected);\\r\\n        } else {\\r\\n          (e.group as UntypedFormGroup).controls[e.column.columnDef]?.patchValue(false, { onlySelf: true, emitEvent: false });\\r\\n          this.table.selection.deselect(e.row);\\r\\n        }\\r\\n      }\\r\\n      if (this.isAllSelected()) {\\r\\n\\r\\n        this.table.columns.update((columns) => {\\r\\n          columns.filter(f => f.columnDef === this.columnSelect).forEach(m => m.headerCell.indeterminate = false);\\r\\n          return columns;\\r\\n        });\\r\\n\\r\\n        this.table.formHeader.controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\\r\\n        this.table.tableService.onSelectIndeterminate.next(false);\\r\\n\\r\\n      } else {\\r\\n        this.table.columns().filter(f => f.columnDef === this.columnSelect)\\r\\n          .map(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\\r\\n\\r\\n        this.table.columns.update((columns) => {\\r\\n          columns.filter(f => f.columnDef === this.columnSelect)\\r\\n            .forEach(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\\r\\n          return columns;\\r\\n        });\\r\\n\\r\\n        this.table.tableService.onSelectIndeterminate.next(!this.table.selection.isEmpty());\\r\\n        if (this.table.selection.isEmpty()) {\\r\\n          this.table.formHeader.controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\\r\\n        }\\r\\n      }\\r\\n\\r\\n    }\\r\\n  }\\r\\n\\r\\n  isAllSelected(): boolean {\\r\\n    if (this.table) {\\r\\n      const numSelected = this.table.selection.selected\\r\\n        .filter(s => this.table.dataSource.filteredData.includes(s)).length;\\r\\n      const numRows = this.table.dataSource.filteredData.length;\\r\\n      return numSelected === numRows;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n\",\"import { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport * as _ from \\\"lodash\\\";\\r\\nimport * as moment from \\\"moment\\\";\\r\\nimport { KlesTableComponent } from \\\"../../../component/table/table.component\\\";\\r\\nimport { KlesColumnConfig } from \\\"../../../models/columnconfig.model\\\";\\r\\nimport { KlesTableBaseService } from \\\"../tableservice.interface\\\";\\r\\nexport class KlesHeaderFilterTableService implements KlesTableBaseService {\\r\\n    table: KlesTableComponent;\\r\\n    filteredValues = {};\\r\\n\\r\\n    filterData() {\\r\\n        if (this.table) {\\r\\n            this.filteredValues = this.table.formHeader.value;\\r\\n            Object.keys(this.filteredValues).map(key => {\\r\\n                if (moment.isMoment(this.filteredValues[key])) {\\r\\n                    this.filteredValues[key] = this.filteredValues[key].toDate().toDateString();\\r\\n                }\\r\\n            })\\r\\n            this.table.dataSource.filterPredicate = this.createFilter();\\r\\n            this.table.dataSource.filter = JSON.stringify(this.filteredValues);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**Filter */\\r\\n    protected createFilter() {\\r\\n        const myFilterPredicate = (data: UntypedFormGroup, filter: string): boolean => {\\r\\n            let searchString = JSON.parse(filter);\\r\\n            const filterableColumn = this.table.columns().filter(f => f.filterable).map(m => m.columnDef);\\r\\n\\r\\n            searchString = _.pick(searchString, filterableColumn);\\r\\n            return Object.keys(searchString).filter(f => searchString[f] && filterableColumn.includes(f)).every(key => {\\r\\n                let keyValue = data?.controls[key]?.value;\\r\\n                const column: KlesColumnConfig = this.table.columns().find(col => col.columnDef === key);\\r\\n\\r\\n                if (column.headerCell.filterPredicate) {\\r\\n                    return column.headerCell.filterPredicate(keyValue, searchString[key]) || false;\\r\\n                }\\r\\n\\r\\n                if (keyValue && typeof (keyValue) === 'object' && column.cell.property) {\\r\\n                    keyValue = keyValue[column.cell.property];\\r\\n                }\\r\\n                if (searchString[key] && typeof (searchString[key]) === 'object' && (column.headerCell.property || column.cell.property)) {\\r\\n                    if (Array.isArray(searchString[key])) {\\r\\n                        if (!searchString[key].length) return true;\\r\\n                        const list = (searchString[key] as Array<any>).map(m => m[column.headerCell.property || column.cell.property].toLowerCase());\\r\\n                        return keyValue && list.includes(keyValue.toString().trim().toLowerCase());\\r\\n                    } else {\\r\\n                        searchString[key] = searchString[key][column.headerCell.property || column.cell.property];\\r\\n                    }\\r\\n                }\\r\\n                if (!keyValue && searchString[key].length === 0) {\\r\\n                    return true;\\r\\n                } else if (!keyValue) {\\r\\n                    return false;\\r\\n                } else if (!searchString[key]) {\\r\\n                    return true;\\r\\n                }\\r\\n                return keyValue && keyValue.toString().trim().toLowerCase().indexOf(searchString[key].toLowerCase()) !== -1;\\r\\n            });\\r\\n        };\\r\\n        return myFilterPredicate;\\r\\n    }\\r\\n\\r\\n}\",\"\\r\\n\\r\\n\\r\\nimport { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { KlesTableComponent } from \\\"../../../component/table/table.component\\\";\\r\\nimport { KlesTableBaseService } from \\\"../tableservice.interface\\\";\\r\\nimport { CdkDrag, CdkDragDrop, moveItemInArray, transferArrayItem } from \\\"@angular/cdk/drag-drop\\\";\\r\\nimport { IKlesDragDropTable } from \\\"./dragdrop.interface\\\";\\r\\nimport { Observable, of } from \\\"rxjs\\\";\\r\\nimport { take } from \\\"rxjs/operators\\\";\\r\\n\\r\\nexport class KlesDragDropRowTableService implements KlesTableBaseService, IKlesDragDropTable {\\r\\n    table: KlesTableComponent;\\r\\n\\r\\n    public beforeDrop(event: any): Observable<boolean> {\\r\\n        return of(true);\\r\\n    }\\r\\n\\r\\n    public onDrop(event: CdkDragDrop<any>) {\\r\\n        this.beforeDrop(event).pipe(take(1)).subscribe((isValid) => {\\r\\n            if (isValid) {\\r\\n                if (event.previousContainer === event.container) {\\r\\n                    const previousIndex = this.table.getFormArray().controls.findIndex((d) => d.value._id === event.item.data.value._id);\\r\\n                    moveItemInArray(this.table.getFormArray().controls, previousIndex, event.currentIndex);\\r\\n\\r\\n                    this.table._onDragDropRow.emit({\\r\\n                        currentIndex: event.currentIndex, previousIndex: previousIndex,\\r\\n                        group: this.table.getFormArray().controls[event.currentIndex] as UntypedFormGroup\\r\\n                    });\\r\\n                    this.table.dataSource.data = this.table.getFormArray().controls;\\r\\n                } else {\\r\\n                    event.previousContainer.data.tableService.deleteRecord([event.item.data]);\\r\\n                    this.table.tableService.addRecord(event.item.data.value, event.currentIndex);\\r\\n\\r\\n                    this.table._onDragDropRow.emit({\\r\\n                        currentIndex: event.currentIndex, previousIndex: event.previousIndex,\\r\\n                        container: event.container,\\r\\n                        group: this.table.getFormArray().controls[event.currentIndex] as UntypedFormGroup\\r\\n                    });\\r\\n                }\\r\\n                this.afterDrop(event);\\r\\n            }\\r\\n        })\\r\\n    }\\r\\n\\r\\n    public afterDrop(event: any) {\\r\\n\\r\\n    }\\r\\n\\r\\n    public sortPredicate(index: number, item: CdkDrag<UntypedFormGroup>): boolean {\\r\\n        return true;\\r\\n    }\\r\\n}\",\"import { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { KlesTableComponent } from \\\"../../../component/table/table.component\\\";\\r\\nimport { KlesTableBaseService } from \\\"../tableservice.interface\\\";\\r\\n\\r\\nexport class KlesUnfoldRowTableService implements KlesTableBaseService {\\r\\n    table: KlesTableComponent;\\r\\n\\r\\n\\r\\n    unfoldRow({ group, row, value }: { group: UntypedFormGroup, row: any, value: any }) {\\r\\n        if (this.table && this.table.templateUnfold) {\\r\\n            const isUnfold = group.controls._unfold?.value;\\r\\n            if (!this.table.templateUnfold?.multiUnfold && isUnfold) {\\r\\n                this.table.getFormArray().controls\\r\\n                    .filter((row: UntypedFormGroup) => row.controls._id.value !== group.controls._id.value)\\r\\n                    .forEach((row: UntypedFormGroup) => row.controls._unfold.patchValue(false, { emitEvent: false }));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"import { Injectable } from '@angular/core';\\r\\nimport { classes } from 'polytype';\\r\\nimport { DefaultKlesTableService } from './defaulttable.service';\\r\\nimport { KlesSelectionTableService } from './features/selection/selectiontable.service';\\r\\nimport { PageEvent } from '@angular/material/paginator';\\r\\nimport { KlesHeaderFilterTableService } from './features/filter/headerfilter-table.service';\\r\\nimport { KlesDragDropRowTableService } from './features/dragdrop/dragdroprow.service';\\r\\nimport { KlesUnfoldRowTableService } from './features/unfoldrow/unfoldrow.service';\\r\\nimport { interval } from 'rxjs';\\r\\n\\r\\n// @Injectable({\\r\\n//     providedIn: 'root'\\r\\n// })\\r\\n@Injectable()\\r\\nexport class KlesTableService extends classes(DefaultKlesTableService, KlesSelectionTableService, KlesHeaderFilterTableService,\\r\\n    KlesDragDropRowTableService, KlesUnfoldRowTableService) {\\r\\n\\r\\n    constructor() {\\r\\n        super\\r\\n            (\\r\\n                { super: KlesSelectionTableService, arguments: ['#select'] },\\r\\n                { super: KlesHeaderFilterTableService },\\r\\n                { super: KlesUnfoldRowTableService },\\r\\n            );\\r\\n    }\\r\\n    //Header \\r\\n    onHeaderChange(e: any) {\\r\\n        this.filterData();\\r\\n    }\\r\\n    onHeaderCellChange(e: any) {\\r\\n        this.changeSelectionHeader(e);\\r\\n    }\\r\\n\\r\\n    //Line\\r\\n    onCellChange(e: any) {\\r\\n        this.changeSelectionLine(e);\\r\\n    }\\r\\n\\r\\n    drop(e: any): void {\\r\\n        this.onDrop(e);\\r\\n    }\\r\\n\\r\\n    getSortPredicate(index: number, item: any): boolean {\\r\\n        return this.sortPredicate(index, item);\\r\\n    }\\r\\n\\r\\n    onLineChange(e: any) {\\r\\n        this.unfoldRow(e);\\r\\n        this.table.matTable.renderRows();\\r\\n    }\\r\\n\\r\\n    //Footer\\r\\n    onFooterChange(e: any) { }\\r\\n\\r\\n    onPageChange(event: PageEvent) { }\\r\\n}\\r\\n\",\"import { UntypedFormGroup } from '@angular/forms';\\r\\nimport { KlesTableComponent } from '../../../component/table/table.component';\\r\\nimport { ISelection } from '../../../interfaces/selection.interface';\\r\\nimport { KlesTableBaseService } from '../tableservice.interface';\\r\\nimport { catchError, map, take } from 'rxjs/operators';\\r\\nimport { of } from 'rxjs';\\r\\n\\r\\nexport class KlesSelectionTableLazyService implements KlesTableBaseService {\\r\\n  table: KlesTableComponent;\\r\\n  columnSelect: string;\\r\\n\\r\\n  constructor(column: string, private selection: ISelection) {\\r\\n    this.columnSelect = column;\\r\\n  }\\r\\n\\r\\n  changeSelectionHeader(e: any) {\\r\\n    if (this.selection?.selectAll) {\\r\\n      if (e.column.columnDef === this.columnSelect) {\\r\\n        const val = (e.group as UntypedFormGroup).controls[this.columnSelect].value;\\r\\n\\r\\n        const filterHeader = this.table.columns()\\r\\n          .filter(column => column.filterable)\\r\\n          .map(column => {\\r\\n            return { [column.columnDef]: this.table.formHeader.controls[column.columnDef].value };\\r\\n          })\\r\\n          .reduce((a, b) => ({ ...a, ...b }), {});\\r\\n\\r\\n        this.selection.selectAll(val, filterHeader)\\r\\n          .pipe(\\r\\n            take(1),\\r\\n            map((response) => {\\r\\n              return { success: true, ...response };\\r\\n            }),\\r\\n            catchError(err => {\\r\\n              console.error(err);\\r\\n              return of({ success: false, indeterminate: false, selected: false });\\r\\n            })\\r\\n          )\\r\\n          .subscribe((response) => {\\r\\n\\r\\n            this.table.getFormArray().controls.forEach((row: UntypedFormGroup) => {\\r\\n              row.controls[this.columnSelect]?.patchValue(response.selected, { emitEvent: false, onlySelf: true });\\r\\n            });\\r\\n            this.table.tableService.onSelectIndeterminate.next(response.indeterminate);\\r\\n            this.table.ref.markForCheck();\\r\\n          });\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  changeSelectionLine(e: any) {\\r\\n    if (this.selection?.select) {\\r\\n      if (e.column.columnDef === this.columnSelect && e.row) {\\r\\n        const val = (e.group as UntypedFormGroup).controls[e.column.columnDef].value;\\r\\n        this.selection.select(val, e.group)\\r\\n          .pipe(\\r\\n            take(1),\\r\\n            map((response) => {\\r\\n              return { success: true, ...response };\\r\\n            }),\\r\\n            catchError(err => {\\r\\n              console.error(err);\\r\\n              return of({ success: false, indeterminate: false, selected: false });\\r\\n            })\\r\\n          )\\r\\n          .subscribe((response) => {\\r\\n            if (!response.success) {\\r\\n              (e.group as UntypedFormGroup).controls[e.column.columnDef].patchValue(!val, { emitEvent: false });\\r\\n            } else if (response.success) {\\r\\n              if (response.indeterminate) {\\r\\n                this.table.formHeader\\r\\n                  .controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\\r\\n              } else if (response.selected && !response.indeterminate) {\\r\\n                this.table.formHeader\\r\\n                  .controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\\r\\n              } else {\\r\\n                this.table.formHeader\\r\\n                  .controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\\r\\n\\r\\n              }\\r\\n\\r\\n              this.table.columns.update((columns) => {\\r\\n                columns.find(f => f.columnDef === this.columnSelect).headerCell.indeterminate = response.indeterminate;\\r\\n                return columns;\\r\\n              });\\r\\n\\r\\n              this.table.tableService.onSelectIndeterminate.next(response.indeterminate);\\r\\n            }\\r\\n          });\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"import { PageEvent } from '@angular/material/paginator';\\r\\nimport * as _ from 'lodash';\\r\\nimport { classes } from 'polytype';\\r\\nimport { Observable } from 'rxjs';\\r\\nimport { IPagination } from '../../interfaces/pagination.interface';\\r\\nimport { ISelection } from '../../interfaces/selection.interface';\\r\\nimport { DefaultKlesTableService } from '../defaulttable.service';\\r\\nimport { KlesSelectionTableLazyService } from '../features/selection/selectiontablelazy.service';\\r\\nimport { KlesDragDropRowTableService } from '../features/dragdrop/dragdroprow.service';\\r\\nimport { KlesUnfoldRowTableService } from '../features/unfoldrow/unfoldrow.service';\\r\\n\\r\\nexport class KlesLazyTableService extends classes(DefaultKlesTableService, KlesSelectionTableLazyService, KlesDragDropRowTableService, KlesUnfoldRowTableService) {\\r\\n\\r\\n    constructor(private pagination: IPagination, selection?: ISelection) {\\r\\n        super\\r\\n            (\\r\\n                { super: KlesSelectionTableLazyService, arguments: ['#select', selection] },\\r\\n                { super: KlesUnfoldRowTableService },\\r\\n            );\\r\\n    }\\r\\n    //Header \\r\\n    onHeaderChange(e: any) {\\r\\n        const value = { ...this.table.formHeader.value };\\r\\n\\r\\n        this.table.columns().forEach(column => {\\r\\n            if (!column.filterable) {\\r\\n                delete value[column.columnDef];\\r\\n            }\\r\\n        });\\r\\n\\r\\n        if (!_.isEqual(this.table.filteredValues$.getValue(), value)) {\\r\\n            this.table.filteredValues$.next(value);\\r\\n        }\\r\\n    }\\r\\n    onHeaderCellChange(e: any) {\\r\\n        this.changeSelectionHeader(e);\\r\\n    }\\r\\n\\r\\n    //Line\\r\\n    onCellChange(e: any) {\\r\\n        this.changeSelectionLine(e);\\r\\n    }\\r\\n\\r\\n    onLineChange(e: any) {\\r\\n        this.unfoldRow(e);\\r\\n        super.onLineChange(e);\\r\\n    }\\r\\n\\r\\n    //Footer\\r\\n    onFooterChange(e: any) { }\\r\\n\\r\\n    onPageChange(event: PageEvent) {\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    drop(e: any): void {\\r\\n        this.onDrop(e);\\r\\n    }\\r\\n\\r\\n    getSortPredicate(index: number, item: any): boolean {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    load(sort: string, order: string, page: number, perPage: number, filter?: { [key: string]: any; }):\\r\\n        Observable<{ lines: any[], totalCount: number, footer?: any, header?: any }> {\\r\\n        return this.pagination.list(sort, order, page, perPage, filter);\\r\\n    }\\r\\n\\r\\n    reload(): void {\\r\\n        this.table.reload$.next();\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"import { Injectable } from '@angular/core';\\r\\nimport { AbstractControl, UntypedFormArray, UntypedFormGroup } from '@angular/forms';\\r\\nimport { DefaultKlesTableService } from '../defaulttable.service';\\r\\nimport { flatMap } from 'lodash';\\r\\nimport { isSome, fold } from 'fp-ts/lib/Option';\\r\\nimport { pipe } from 'fp-ts/lib/function';\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport class DefaultKlesTreetableService extends DefaultKlesTableService {\\r\\n\\r\\n    getDepthDataAccessor = (item: AbstractControl, property: string): number => {\\r\\n        return item.value._status.depth;\\r\\n    }\\r\\n\\r\\n    getParentDataAccessor(item: UntypedFormGroup, property: string): AbstractControl {\\r\\n        const [parent] = this.table.searchableTree.map(st => this.table.treeService.searchById(st, item.value._id))\\r\\n            .filter(node => {\\r\\n                return isSome(node);\\r\\n            })\\r\\n            .flatMap(node => {\\r\\n                return pipe(\\r\\n                    node,\\r\\n                    fold(() => -1, (n: any) => n.pathToRoot.length)\\r\\n                );\\r\\n            })\\r\\n            .map(node => this.table.dataSource.data.find(row => row.value._id === node._id));\\r\\n        return parent || null;\\r\\n    }\\r\\n\\r\\n\\r\\n    getTable() {\\r\\n        return this;\\r\\n    }\\r\\n\\r\\n    getSortingDataAccessor = (item: AbstractControl, property) => {\\r\\n        let value: any = item.value[property];\\r\\n        if (value) {\\r\\n            if (typeof value === 'string') {\\r\\n                value = value.toLowerCase();\\r\\n            }\\r\\n            else if (typeof value === 'object') {\\r\\n                if (value.key) {\\r\\n                    value = value.key;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return value;\\r\\n    };\\r\\n\\r\\n    onLineOpen(e: any) {\\r\\n\\r\\n    }\\r\\n\\r\\n    onLineClose(e: any) {\\r\\n\\r\\n    }\\r\\n\\r\\n    onLineChange(e: any) {\\r\\n        this.changeChildrenVisibility(e.group, e.group.controls._status.value.isExpanded);\\r\\n        super.onLineChange(e);\\r\\n    }\\r\\n\\r\\n    protected changeChildrenVisibility(node: UntypedFormGroup, visibility: boolean) {\\r\\n\\r\\n        const paginator = node.value._status.paginator;\\r\\n        const start = (paginator?.pageIndex * paginator?.pageSize) || 0;\\r\\n        const end = (start + paginator?.pageSize) || node.value._status.children?.length;\\r\\n\\r\\n        node.value._status.children?.forEach((child, index) => {\\r\\n            const childGroup = this.table.getFormArray().controls.find(control => control.value._id === child._id) as UntypedFormGroup;\\r\\n\\r\\n            if (childGroup) {\\r\\n                childGroup.controls._status.patchValue({\\r\\n                    isVisible: (index >= start && index < end) ? visibility : false,\\r\\n                }, { emitEvent: false });\\r\\n                this.changeChildrenVisibility(childGroup, childGroup.controls._status.value.isExpanded\\r\\n                    && ((index >= start && index < end) ? visibility : false));\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n\\r\\n    addRecord(record, index?: number): UntypedFormGroup {\\r\\n\\r\\n        const searchableNode = this.table.converterService.toSearchableTree(record);\\r\\n        const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\\r\\n\\r\\n        const groups = this.table.createFormNode(treeNode);\\r\\n\\r\\n        if (typeof index !== 'undefined') {\\r\\n            this.table._lines.splice(index, 0, record);\\r\\n            groups.forEach((group, i) => {\\r\\n                this.table.getFormArray().insert(index + i, group);\\r\\n            });\\r\\n        } else {\\r\\n            this.table._lines.push(record);\\r\\n            groups.forEach((group) => {\\r\\n                this.table.getFormArray().push(group);\\r\\n            });\\r\\n        }\\r\\n        this.table.searchableTree = this.table._lines.map(t => this.table.converterService.toSearchableTree(t));\\r\\n\\r\\n        this.updateDataSource();\\r\\n\\r\\n        return groups[0];\\r\\n    }\\r\\n\\r\\n    updateRow(row: any, options?: { emitEvent: boolean, onlySelf: boolean }) {\\r\\n        const data = {\\r\\n            ...row.value,\\r\\n            _id: row._id,\\r\\n            // _status: { depth: row.depth, isExpanded: row.isExpanded, isVisible: row.isVisible }\\r\\n        };\\r\\n        return this.updateRecord(data, options);\\r\\n    }\\r\\n\\r\\n    addChild(parentId: string, record): UntypedFormGroup {\\r\\n        const treeTableTree = this.table.searchableTree.map(st => this.table.converterService.toTreeTableTree(st));\\r\\n        const parent = treeTableTree.find(s => s._id === parentId);\\r\\n        const parentDepth = ~~parent?.depth;\\r\\n\\r\\n        if (parent) {\\r\\n            const searchableNode = this.table.converterService.toSearchableTree(record);\\r\\n\\r\\n            const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\\r\\n            treeNode.depth = ~~parentDepth + 1;\\r\\n            const groups = this.table.createFormNode(treeNode);\\r\\n            const indexParent = this.table.getFormArray().controls.findIndex((group: UntypedFormGroup) => group.value._id === parentId);\\r\\n            const index = indexParent;\\r\\n            + (parent.children?.length || 0);\\r\\n\\r\\n            if (parent.children) {\\r\\n                parent.children.push({ value: groups[0].getRawValue() });\\r\\n            } else {\\r\\n                parent.children = [{ value: groups[0].getRawValue() }];\\r\\n            }\\r\\n\\r\\n            this.table._lines[indexParent].children = parent.children;\\r\\n            this.table._lines.splice(index + 1, 0, record);\\r\\n            groups.forEach((group, i) => {\\r\\n                this.table.getFormArray().insert(index + (i + 1), group);\\r\\n            });\\r\\n            this.table.searchableTree = (this.table.getFormArray() as UntypedFormArray).controls.map(line => {\\r\\n                return {\\r\\n                    value: (line.value?._id === parentId) ? { ...line.value, children: parent.children, childrenCounter: ~~parent.children?.length } : line.value,\\r\\n                    _id: line.value?._id,\\r\\n                    children: (line.value?._id === parentId) ? parent.children : line.value?._status?.children,\\r\\n                    childrenCounter: (line.value?._id === parentId) ? ~~parent.children?.length : ~~line.value?._status?.childrenCounter,\\r\\n                    isBusy: line.value?._status?.isBusy || false\\r\\n                }\\r\\n            });\\r\\n\\r\\n            this.updateDataSource();\\r\\n            return groups[0];\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    unfoldPredicate = (index: any, data: any) => {\\r\\n        return data.controls._status.value.isVisible && data.controls._unfold.value;\\r\\n    }\\r\\n}\\r\\n\",\"import { Observable, of } from \\\"rxjs\\\";\\r\\nimport { KlesDragDropRowTableService } from \\\"./dragdroprow.service\\\";\\r\\nimport { CdkDrag, CdkDragDrop, moveItemInArray } from \\\"@angular/cdk/drag-drop\\\";\\r\\nimport { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { take } from \\\"rxjs/operators\\\";\\r\\n\\r\\nexport class KlesDragDropRowTreeTableService extends KlesDragDropRowTableService {\\r\\n    beforeDrop(event: any): Observable<boolean> {\\r\\n        const rowDrop = event.item.data;\\r\\n        const row = this.table.getFormArray().controls[event.currentIndex];\\r\\n        return of(row.value._status.depth === rowDrop.value._status.depth && row.value._status.parentId === rowDrop.value._status.parentId)\\r\\n    }\\r\\n\\r\\n    public onDrop(event: CdkDragDrop<any>) {\\r\\n        this.beforeDrop(event).pipe(take(1)).subscribe((isValid) => {\\r\\n            if (isValid) {\\r\\n                const previousIndex = this.table.getFormArray().controls.findIndex((d) => d.value._id === event.item.data.value._id);\\r\\n\\r\\n                const currentIndex = (event.previousIndex < event.currentIndex ?\\r\\n                    this.findIndexLastChild(this.table.getFormArray().controls[event.currentIndex] as UntypedFormGroup) || event.currentIndex\\r\\n                    : event.currentIndex);\\r\\n\\r\\n                moveItemInArray(this.table.getFormArray().controls, previousIndex, currentIndex);\\r\\n                this.moveChildren(this.table.getFormArray().controls[currentIndex] as UntypedFormGroup, currentIndex);\\r\\n                this.table._onDragDropRow.emit({\\r\\n                    currentIndex, previousIndex: previousIndex,\\r\\n                    group: this.table.getFormArray().controls[currentIndex] as UntypedFormGroup\\r\\n                });\\r\\n                this.table.dataSource.data = this.table.getFormArray().controls;\\r\\n                this.afterDrop(event);\\r\\n            }\\r\\n        })\\r\\n    }\\r\\n\\r\\n    private moveChildren(parent: UntypedFormGroup, index: number): number {\\r\\n        parent?.controls._status.value.children?.forEach((child) => {\\r\\n            const previousIndex = this.table.getFormArray().controls.findIndex((group: UntypedFormGroup) => group.controls._id.value === child._id);\\r\\n            if (previousIndex !== -1) {\\r\\n                if (previousIndex > index) {\\r\\n                    index++;\\r\\n                }\\r\\n                moveItemInArray(this.table.getFormArray().controls, previousIndex, index);\\r\\n                index = this.moveChildren(this.table.getFormArray().controls[index] as UntypedFormGroup, index);\\r\\n            }\\r\\n        })\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    private findIndexLastChild(parent: UntypedFormGroup): number {\\r\\n        if (!parent.controls._status.value.children || !parent.controls._status.value.children.length) {\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        return Math.max(...parent.controls._status.value.children?.map((child) => {\\r\\n            return this.table.getFormArray().controls.findIndex((group: UntypedFormGroup) => group.controls._id.value === child._id);\\r\\n        }))\\r\\n    }\\r\\n\\r\\n    public sortPredicate(index: number, item: CdkDrag<UntypedFormGroup>): boolean {\\r\\n        return (this.table.getFormArray().controls[index] as UntypedFormGroup).controls._status.value.depth === item.data.controls._status.value.depth\\r\\n            && (this.table.getFormArray().controls[index] as UntypedFormGroup).controls._status.value.parentId === item.data.controls._status.value.parentId;\\r\\n    }\\r\\n}\",\"import { UntypedFormGroup } from '@angular/forms';\\r\\nimport { PageEvent } from '@angular/material/paginator';\\r\\nimport * as _ from 'lodash';\\r\\nimport { classes } from 'polytype';\\r\\nimport { Observable } from 'rxjs';\\r\\nimport { ILoadChildren } from '../../interfaces/loadChildren.interface';\\r\\nimport { IPagination } from '../../interfaces/pagination.interface';\\r\\nimport { ISelection } from '../../interfaces/selection.interface';\\r\\nimport { KlesSelectionTableLazyService } from '../features/selection/selectiontablelazy.service';\\r\\nimport { DefaultKlesTreetableService } from '../treetable/defaulttreetable.service';\\r\\nimport { KlesDragDropRowTreeTableService } from '../features/dragdrop/dragdroprowtree.service';\\r\\n\\r\\nimport * as O from \\\"fp-ts/lib/Option\\\";\\r\\nimport { pipe } from \\\"fp-ts/lib/function\\\";\\r\\n\\r\\nexport class KlesLazyTreetableService extends classes(DefaultKlesTreetableService, KlesSelectionTableLazyService, KlesDragDropRowTreeTableService) {\\r\\n\\r\\n    constructor(private data: IPagination, private child: ILoadChildren, selection?: ISelection) {\\r\\n        super\\r\\n            (\\r\\n                { super: KlesSelectionTableLazyService, arguments: ['#select', selection] },\\r\\n            );\\r\\n\\r\\n    }\\r\\n\\r\\n    //Header \\r\\n    onHeaderChange(e: any) {\\r\\n        const value = { ...this.table.formHeader.value };\\r\\n\\r\\n        this.table.columns().forEach(column => {\\r\\n            if (!column.filterable) {\\r\\n                delete value[column.columnDef];\\r\\n            }\\r\\n        });\\r\\n\\r\\n        if (!_.isEqual(this.table.filteredValues$.getValue(), value)) {\\r\\n            this.table.filteredValues$.next(value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    onHeaderCellChange(e: any) {\\r\\n        this.changeSelectionHeader(e);\\r\\n    }\\r\\n\\r\\n    //Line\\r\\n    onCellChange(e: any) {\\r\\n        this.changeSelectionLine(e);\\r\\n    }\\r\\n\\r\\n    onLineChange(e: any) {\\r\\n        super.onLineChange(e);\\r\\n    }\\r\\n\\r\\n    drop(e: any): void {\\r\\n        this.onDrop(e);\\r\\n    }\\r\\n\\r\\n    getSortPredicate(index: number, item: any): boolean {\\r\\n        return this.sortPredicate(index, item);\\r\\n    }\\r\\n\\r\\n    protected changeChildrenVisibility(node: UntypedFormGroup, visibility: boolean) {\\r\\n        node.value._status.children?.forEach(child => {\\r\\n            const childGroup = this.table.getFormArray().controls.find(control => control.value._id === child._id) as UntypedFormGroup;\\r\\n            if (childGroup) {\\r\\n                childGroup.controls._status.patchValue({\\r\\n                    isVisible: visibility,\\r\\n                }, { emitEvent: false });\\r\\n                this.changeChildrenVisibility(childGroup, childGroup.controls._status.value.isExpanded && visibility);\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n\\r\\n    //Footer\\r\\n    onFooterChange(e: any) { }\\r\\n\\r\\n    onPageChange(event: PageEvent) {\\r\\n        // super.onPageChange(event);\\r\\n    }\\r\\n\\r\\n    load(sort: string, order: string, page: number, perPage: number, filter?: { [key: string]: any; }):\\r\\n        Observable<{ lines: any[], totalCount: number, footer?: any, header?: any }> {\\r\\n        return this.data.list(sort, order, page, perPage, filter);\\r\\n    }\\r\\n\\r\\n    loadChild(parentId: string, sort?: string, order?: string, page?: number, perPage?: number, filter?: { [key: string]: any; }): Observable<{ lines: any[], totalCount: number }> {\\r\\n        return this.child.loadChildren(parentId, sort, order, page, perPage, filter);\\r\\n    }\\r\\n\\r\\n    addChild(parentId: string, record): UntypedFormGroup {\\r\\n        const searchableParent = this.table.searchableTree.map(s => {\\r\\n            return this.table.treeService.getById(s, parentId)\\r\\n        }).filter(Boolean)?.[0];\\r\\n\\r\\n        if (searchableParent) {\\r\\n            const searchableNode = this.table.converterService.toSearchableTree(record);\\r\\n            searchableParent.children ? searchableParent.children.push(searchableNode) : searchableParent.children = [searchableNode];\\r\\n\\r\\n            const treeTableTree = this.table.searchableTree.map(st => this.table.converterService.toTreeTableTree(st));\\r\\n\\r\\n            const treeTableParent = this.table.treeService.flatten(treeTableTree.map(s => {\\r\\n                return this.table.treeService.searchById(s, parentId)\\r\\n            }).find(s => pipe(\\r\\n                O.isSome(s)\\r\\n            )))[0].value;\\r\\n\\r\\n            const treeNode = this.table.converterService.toTreeTableTree(searchableNode);\\r\\n            treeNode.depth = ~~treeTableParent.pathToRoot.length + 1;\\r\\n\\r\\n            const groups = this.table.createFormNode(treeNode);\\r\\n\\r\\n            const parentIndex = this.table.getFormArray().controls.findIndex((group: UntypedFormGroup) => group.value._id === parentId);\\r\\n\\r\\n            this.table.getFormArray().controls[parentIndex].controls._status.patchValue({\\r\\n                children: (this.table.getFormArray().controls[parentIndex].controls._status.value.children || []).concat([treeNode]),\\r\\n                childrenCounter: (this.table.getFormArray().controls[parentIndex].controls._status.value.children?.length || 0) + 1\\r\\n            }, { emitEvent: false });\\r\\n\\r\\n            groups.forEach((group, index) => {\\r\\n                this.table.getFormArray().insert(parentIndex + index + 1, group);\\r\\n            });\\r\\n\\r\\n            this.updateDataSource();\\r\\n            return groups[0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    addChildren(parentId: string, record: any[]): UntypedFormGroup[] {\\r\\n        return record.map(m => this.addChild(parentId, record));\\r\\n    }\\r\\n\\r\\n\\r\\n    deleteRow(rowId: string) {\\r\\n        const row = this.table.getFormArray().controls.find((group: UntypedFormGroup) => group.value._id === rowId);\\r\\n        if (row) {\\r\\n            row.controls._status.value.children?.forEach((child) => {\\r\\n                this.deleteRow(child._id);\\r\\n            });\\r\\n\\r\\n            const parentId = row.controls._status.value.parentId;\\r\\n            if (parentId) {\\r\\n                const parent: UntypedFormGroup = this.table.getFormArray().controls.find((group: UntypedFormGroup) => group.value._id === parentId);\\r\\n                if (parent) {\\r\\n                    parent.controls._status.patchValue({ children: parent.controls._status.value.children.filter(c => c._id !== rowId) }, { emitEvent: false });\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const index = this.table.getFormArray().controls.findIndex((group: UntypedFormGroup) => group.value._id === rowId);\\r\\n            if (index !== -1) {\\r\\n                this.table.getFormArray().removeAt(index);\\r\\n            }\\r\\n\\r\\n            this.table.searchableTree = this.table.searchableTree.filter(searchableNode => searchableNode._id !== rowId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    deleteChildren(parentId: string) {\\r\\n        const parent = this.table.getFormArray().controls.find((group: UntypedFormGroup) => group.value._id === parentId);\\r\\n        if (parent?.controls._status.controls.children?.value) {\\r\\n            parent?.controls._status.controls.children?.value?.forEach((child) => {\\r\\n                this.deleteRow(child._id);\\r\\n            });\\r\\n\\r\\n            parent?.controls._status.patchValue({ children: [] }, { emitEvent: false });\\r\\n\\r\\n            const searchableParent = this.table.searchableTree.map(s => {\\r\\n                return this.table.treeService.getById(s, parentId)\\r\\n            })?.[0];\\r\\n\\r\\n            if (searchableParent) {\\r\\n                searchableParent.children = [];\\r\\n            }\\r\\n\\r\\n            this.updateDataSource();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"import { UntypedFormArray, UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { KlesTreetableComponent } from \\\"../../../component/treetable/treetable.component\\\";\\r\\nimport { KlesSelectionTableService } from \\\"./selectiontable.service\\\";\\r\\nimport * as O from \\\"fp-ts/lib/Option\\\";\\r\\nimport { pipe } from \\\"fp-ts/lib/function\\\";\\r\\n\\r\\nexport class KlesSelectionTreetableService extends KlesSelectionTableService {\\r\\n    table: KlesTreetableComponent<any>;\\r\\n\\r\\n    columnSelect: string;\\r\\n\\r\\n    constructor(column: string) {\\r\\n        super(column);\\r\\n    }\\r\\n\\r\\n    changeSelectionLine(e: any) {\\r\\n        if (this.table) {\\r\\n            if (e.column.columnDef === this.columnSelect && e.row) {\\r\\n                if (this.table.dataSource.filteredData.includes(e.group)) {\\r\\n                    const selected = (e.group as UntypedFormGroup).controls[e.column.columnDef].value;\\r\\n                    this.updateChildrens(e.column, e.group, selected);\\r\\n                    this.updateParent(e.column, e.group);\\r\\n\\r\\n                    this.table.selection.clear();\\r\\n\\r\\n                    /* TODO not sure about this*/\\r\\n                    (this.table.form.controls.rows as UntypedFormArray).controls\\r\\n                        .filter((group: UntypedFormGroup) => group.controls[this.columnSelect].value === true)\\r\\n                        .forEach(control => {\\r\\n                            this.table.selection.select(control);\\r\\n                        });\\r\\n                    /* ***************** */\\r\\n                    this.table._onSelected.emit(this.table.selection.selected);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (this.isAllSelected()) {\\r\\n                this.table.columns().filter(f => f.columnDef === this.columnSelect).map(m => m.headerCell.indeterminate = false);\\r\\n                this.table.formHeader.controls[this.columnSelect]?.patchValue(true, { onlySelf: true, emitEvent: false });\\r\\n                this.table.tableService.onSelectIndeterminate.next(false);\\r\\n\\r\\n            } else {\\r\\n                this.table.columns().filter(f => f.columnDef === this.columnSelect).map(m => m.headerCell.indeterminate = !this.table.selection.isEmpty());\\r\\n                this.table.tableService.onSelectIndeterminate.next(!this.table.selection.isEmpty());\\r\\n                if (this.table.selection.isEmpty()) {\\r\\n                    this.table.formHeader.controls[this.columnSelect]?.patchValue(false, { onlySelf: true, emitEvent: false });\\r\\n                }\\r\\n            }\\r\\n\\r\\n            this.table.form.updateValueAndValidity();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    childrenIsAllSelected(column, group: UntypedFormGroup): boolean {\\r\\n        if (!group.value._status.children) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return group.value._status.children.every(children => {\\r\\n            return (this.table.dataSource.data.find(row => row.value._id === children._id) as UntypedFormGroup).controls[column.columnDef].value === true;\\r\\n        });\\r\\n    }\\r\\n\\r\\n\\r\\n    childrenAtLeastOneSelected(column, group: UntypedFormGroup): boolean {\\r\\n        if (!group.value._status.children) {\\r\\n            return true;\\r\\n        }\\r\\n        return group.value._status.children.some(children => {\\r\\n            const index = this.table.dataSource.data.findIndex(row => row.value._id === children._id);\\r\\n\\r\\n            return (this.table.dataSource.data.find(row => row.value._id === children._id) as UntypedFormGroup).controls[column.columnDef].value === true\\r\\n                || this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate === true;\\r\\n        });\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    isAllSelected(): boolean {\\r\\n        if (this.table) {\\r\\n            const numSelected = this.table.selection.selected\\r\\n                .filter(s => this.table.dataSource.filteredData.includes(s)).length;\\r\\n            const numRows = this.table.dataSource.filteredData.length;\\r\\n            return numSelected === numRows;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    updateChildrens(column, group: UntypedFormGroup, selected: boolean) {\\r\\n        const childrens = (group.controls._status as UntypedFormGroup).controls.children?.value || [];\\r\\n        childrens.forEach(children => {\\r\\n            const childGroup = this.table.dataSource.data.find(row => row.value._id === children._id) as UntypedFormGroup;\\r\\n            if (childGroup.controls[column.columnDef].value !== selected) {\\r\\n                childGroup.controls[column.columnDef].patchValue(selected, { emitEvent: false });\\r\\n            }\\r\\n            this.updateChildrens(column, childGroup, selected);\\r\\n        });\\r\\n    }\\r\\n\\r\\n    updateParent(column, group: UntypedFormGroup) {\\r\\n        // const node = this.table.searchableTree.map(st => this.table.treeService.searchById(st, group.value._id)).find(st => st.isSome()).getOrElse(null);\\r\\n        const node = this.table.searchableTree\\r\\n            .map(st => this.table.treeService.searchById(st, group.value._id))\\r\\n            .find(st =>\\r\\n                pipe(\\r\\n                    O.isSome(st)\\r\\n                )\\r\\n            );\\r\\n        if (node) {\\r\\n            // node.pathToRoot.forEach(parent => {\\r\\n            //     const parentGroup = this.table.dataSource.data.find(row => row.value._id === parent._id) as FormGroup;\\r\\n\\r\\n            //     const index = this.table.dataSource.data.findIndex(row => row.value._id === parent._id);\\r\\n            //     this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = false;\\r\\n\\r\\n            //     if (this.childrenIsAllSelected(column, parentGroup)) {\\r\\n            //         parentGroup.controls[column.columnDef].patchValue(true, { emitEvent: false });\\r\\n            //     } else if (this.childrenAtLeastOneSelected(column, parentGroup)) {\\r\\n            //         this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = true;\\r\\n            //         parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\\r\\n            //     } else {\\r\\n            //         parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\\r\\n            //     }\\r\\n\\r\\n            // })\\r\\n            pipe(\\r\\n                node,\\r\\n                O.map(m => m.pathToRoot.forEach(parent => {\\r\\n                    const parentGroup = this.table.dataSource.data.find(row => row.value._id === parent._id) as UntypedFormGroup;\\r\\n\\r\\n                    const index = this.table.dataSource.data.findIndex(row => row.value._id === parent._id);\\r\\n                    this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = false;\\r\\n\\r\\n                    if (this.childrenIsAllSelected(column, parentGroup)) {\\r\\n                        parentGroup.controls[column.columnDef].patchValue(true, { emitEvent: false });\\r\\n                    } else if (this.childrenAtLeastOneSelected(column, parentGroup)) {\\r\\n                        this.table.lineFields[index].find(field => field.name === column.columnDef).indeterminate = true;\\r\\n                        parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\\r\\n                    } else {\\r\\n                        parentGroup.controls[column.columnDef].patchValue(false, { emitEvent: false });\\r\\n                    }\\r\\n\\r\\n                })\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"import { Injectable } from \\\"@angular/core\\\";\\r\\nimport { classes } from \\\"polytype\\\";\\r\\nimport { KlesSelectionTreetableService } from \\\"../features/selection/selectiontreetable.service\\\";\\r\\nimport { DefaultKlesTreetableService } from \\\"./defaulttreetable.service\\\";\\r\\nimport { KlesDragDropRowTreeTableService } from \\\"../features/dragdrop/dragdroprowtree.service\\\";\\r\\n\\r\\n@Injectable()\\r\\nexport class KlesTreetableService extends classes(DefaultKlesTreetableService, KlesSelectionTreetableService, KlesDragDropRowTreeTableService) {\\r\\n\\r\\n    constructor() {\\r\\n        super\\r\\n            (\\r\\n                { super: KlesSelectionTreetableService, arguments: ['#select'] },\\r\\n            );\\r\\n    }\\r\\n\\r\\n    onHeaderCellChange(e: any) {\\r\\n        this.changeSelectionHeader(e);\\r\\n    }\\r\\n\\r\\n    onCellChange(e: any) {\\r\\n        this.changeSelectionLine(e);\\r\\n    }\\r\\n\\r\\n    drop(e: any): void {\\r\\n        this.onDrop(e);\\r\\n    }\\r\\n\\r\\n    getSortPredicate(index: number, item: any): boolean {\\r\\n        return this.sortPredicate(index, item);\\r\\n    }\\r\\n}\\r\\n\",\"import { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport { KlesTableComponent } from \\\"../../../component/table/table.component\\\";\\r\\nimport { KlesTableBaseService } from \\\"../tableservice.interface\\\";\\r\\n\\r\\nexport class KlesSelectionClickTableService implements KlesTableBaseService {\\r\\n    table: KlesTableComponent;\\r\\n    columnSelect: string;\\r\\n\\r\\n    constructor(column?: string) {\\r\\n        this.columnSelect = column;\\r\\n    }\\r\\n\\r\\n    changeClickLine(group: UntypedFormGroup) {\\r\\n        if (this.table) {\\r\\n            if (this.table.dataSource.filteredData.includes(group)) {\\r\\n                if (!this.table.selection.isMultipleSelection()) {\\r\\n                    this.table.getFormArray().controls\\r\\n                        .filter((row: UntypedFormGroup) => row.value._id !== group.value._id)\\r\\n                        .forEach((row: UntypedFormGroup) => {\\r\\n                            row.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\\r\\n                        });\\r\\n                }\\r\\n                if (!this.table.selection.isSelected(group)) {\\r\\n                    this.table.selection.select(group);\\r\\n                    group.controls[this.columnSelect]?.patchValue(true, { emitEvent: false });\\r\\n                } else {\\r\\n                    this.table.selection.deselect(group);\\r\\n                    group.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\\r\\n                }\\r\\n                this.table._onSelected.emit(this.table.selection.selected);\\r\\n            } else {\\r\\n                this.table.selection.deselect(group);\\r\\n                group.controls[this.columnSelect]?.patchValue(false, { emitEvent: false });\\r\\n            }\\r\\n            this.table.ref.markForCheck();\\r\\n        }\\r\\n    }\\r\\n}\",\"import { UntypedFormGroup } from \\\"@angular/forms\\\";\\r\\nimport * as _ from \\\"lodash\\\";\\r\\nimport { KlesTableComponent } from \\\"../../../component/table/table.component\\\";\\r\\nimport { KlesTableBaseService } from \\\"../tableservice.interface\\\";\\r\\nexport class KlesTextFilterTableService implements KlesTableBaseService {\\r\\n    table: KlesTableComponent;\\r\\n    filteredValues = {};\\r\\n\\r\\n    filterData() {\\r\\n        if (this.table) {\\r\\n            this.filteredValues = this.table.formHeader.value;\\r\\n            this.table.dataSource.filterPredicate = this.createFilter();\\r\\n            this.table.dataSource.filter = JSON.stringify(this.filteredValues);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**Filter */\\r\\n    protected createFilter() {\\r\\n        const myFilterPredicate = (data: UntypedFormGroup, filter: string): boolean => {\\r\\n            let searchString = JSON.parse(filter);\\r\\n            const filterableColumn = this.table.columns().filter(f => f.filterable).map(m => m.columnDef);\\r\\n\\r\\n            searchString = _.pick(searchString, filterableColumn);\\r\\n\\r\\n            return Object.keys(searchString).filter(f => filterableColumn.includes(f)).every(key => {\\r\\n\\r\\n                let keyValue = data?.controls[key]?.value;\\r\\n\\r\\n                if (!keyValue && searchString[key].length === 0) {\\r\\n                    return true;\\r\\n                } else if (!keyValue) {\\r\\n                    return false;\\r\\n                } else if (!searchString[key]) {\\r\\n                    return true;\\r\\n                }\\r\\n\\r\\n                const column = this.table.columns().find(col => col.columnDef === key);\\r\\n\\r\\n                if (column.cell.property) {\\r\\n                    keyValue = data?.controls[key]?.value[column.cell.property];\\r\\n                }\\r\\n                return keyValue && keyValue.toString().trim().toLowerCase().indexOf(searchString[key].toLowerCase()) !== -1;\\r\\n            });\\r\\n        };\\r\\n        return myFilterPredicate;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"export enum AlignCell {\\r\\n    LEFT = 'left',\\r\\n    CENTER = 'center',\\r\\n    RIGHT = 'right'\\r\\n}\\r\\n\",\"import { NgModule } from '@angular/core';\\r\\nimport { CommonModule } from '@angular/common';\\r\\nimport { MatSliderModule } from '@angular/material/slider';\\r\\nimport { MatButtonModule } from '@angular/material/button';\\r\\nimport { MatToolbarModule } from '@angular/material/toolbar';\\r\\nimport { MatIconModule } from '@angular/material/icon';\\r\\nimport { MatSidenavModule } from '@angular/material/sidenav';\\r\\nimport { MatBadgeModule } from '@angular/material/badge';\\r\\nimport { MatListModule } from '@angular/material/list';\\r\\nimport { MatGridListModule } from '@angular/material/grid-list';\\r\\nimport { MatFormFieldModule } from '@angular/material/form-field';\\r\\nimport { MatDatepickerModule } from '@angular/material/datepicker';\\r\\nimport { MatInputModule } from '@angular/material/input';\\r\\nimport { MatSelectModule } from '@angular/material/select';\\r\\nimport { MatRadioModule } from '@angular/material/radio';\\r\\nimport { MatChipsModule } from '@angular/material/chips';\\r\\nimport { MatTooltipModule } from '@angular/material/tooltip';\\r\\nimport { MatTableModule } from '@angular/material/table';\\r\\nimport { MatPaginatorModule } from '@angular/material/paginator';\\r\\nimport { MatCardModule } from '@angular/material/card';\\r\\nimport { MatMenuModule } from '@angular/material/menu';\\r\\nimport { CdkTableModule } from '@angular/cdk/table';\\r\\nimport { MatTabsModule } from '@angular/material/tabs';\\r\\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\\r\\nimport { MatCheckboxModule } from '@angular/material/checkbox';\\r\\nimport { MatDialogModule } from '@angular/material/dialog';\\r\\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\\r\\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\\r\\nimport { MatSortModule } from '@angular/material/sort';\\r\\nimport { MatExpansionModule } from '@angular/material/expansion';\\r\\nimport { MatNativeDateModule } from '@angular/material/core';\\r\\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\\r\\nimport { MatTreeModule } from '@angular/material/tree';\\r\\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\\r\\nimport { ColorPickerModule } from 'ngx-color-picker';\\r\\nimport { DragDropModule } from '@angular/cdk/drag-drop';\\r\\nimport { KlesMaterialDatepickerModule } from '@3kles/kles-material-datepicker';\\r\\n\\r\\n\\r\\n@NgModule({\\r\\n    imports: [\\r\\n        CommonModule,\\r\\n        MatSliderModule,\\r\\n        MatButtonModule,\\r\\n        MatToolbarModule,\\r\\n        MatIconModule,\\r\\n        MatSidenavModule,\\r\\n        MatBadgeModule,\\r\\n        MatListModule,\\r\\n        MatGridListModule,\\r\\n        MatFormFieldModule,\\r\\n        MatInputModule,\\r\\n        MatSelectModule,\\r\\n        MatRadioModule,\\r\\n        MatDatepickerModule,\\r\\n        MatChipsModule,\\r\\n        MatTooltipModule,\\r\\n        MatTableModule,\\r\\n        MatPaginatorModule,\\r\\n        MatCardModule,\\r\\n        MatMenuModule,\\r\\n        MatTabsModule,\\r\\n        CdkTableModule,\\r\\n        MatProgressSpinnerModule,\\r\\n        MatCheckboxModule,\\r\\n        MatDialogModule,\\r\\n        MatAutocompleteModule,\\r\\n        MatProgressBarModule,\\r\\n        MatSortModule,\\r\\n        MatExpansionModule,\\r\\n        MatNativeDateModule,\\r\\n        MatSnackBarModule,\\r\\n        MatTreeModule,\\r\\n        MatSliderModule,\\r\\n        MatButtonModule,\\r\\n        MatSlideToggleModule,\\r\\n        ColorPickerModule,\\r\\n        DragDropModule\\r\\n    ],\\r\\n\\r\\n    exports: [\\r\\n        MatButtonModule,\\r\\n        MatToolbarModule,\\r\\n        MatIconModule,\\r\\n        MatSidenavModule,\\r\\n        MatBadgeModule,\\r\\n        MatListModule,\\r\\n        MatGridListModule,\\r\\n        MatInputModule,\\r\\n        MatFormFieldModule,\\r\\n        MatSelectModule,\\r\\n        MatRadioModule,\\r\\n        MatDatepickerModule,\\r\\n        MatChipsModule,\\r\\n        MatTooltipModule,\\r\\n        MatTableModule,\\r\\n        MatPaginatorModule,\\r\\n        MatCardModule,\\r\\n        MatMenuModule,\\r\\n        MatTabsModule,\\r\\n        CdkTableModule,\\r\\n        MatProgressSpinnerModule,\\r\\n        MatCheckboxModule,\\r\\n        MatDialogModule,\\r\\n        MatAutocompleteModule,\\r\\n        MatProgressBarModule,\\r\\n        MatSortModule,\\r\\n        MatExpansionModule,\\r\\n        MatNativeDateModule,\\r\\n        MatSnackBarModule,\\r\\n        MatTreeModule,\\r\\n        MatSliderModule,\\r\\n        MatButtonModule,\\r\\n        MatSlideToggleModule,\\r\\n        ColorPickerModule,\\r\\n        DragDropModule,\\r\\n        KlesMaterialDatepickerModule\\r\\n    ],\\r\\n    providers: [\\r\\n        MatDatepickerModule,\\r\\n        MatDialogModule\\r\\n    ]\\r\\n})\\r\\n\\r\\nexport class MaterialModule { }\\r\\n\",\"import { CommonModule } from '@angular/common';\\r\\nimport { NgModule } from '@angular/core';\\r\\nimport { KlesTableComponent } from './component/table/table.component';\\r\\nimport { KlesLazyTableComponent } from './component/lazytable/lazytable.component';\\r\\nimport { MaterialModule } from './modules/material.module';\\r\\nimport { TranslateModule } from '@ngx-translate/core';\\r\\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\\r\\nimport { KlesFormTextHeaderFilterComponent } from './component/header/textheaderfilter.component';\\r\\nimport { KlesMaterialDynamicformsModule } from '@3kles/kles-material-dynamicforms';\\r\\nimport { KlesTableDirective } from './directives/table.directive';\\r\\nimport { AbstractKlesTableService } from './services/abstracttable.service';\\r\\nimport { KlesTableService } from './services/table.service';\\r\\nimport { KlesResizeColumnDirective } from './directives/resizecolumn.directive';\\r\\nimport { FieldPipe } from './pipe/field.pipe';\\r\\nimport { GroupPipe } from './pipe/group.pipe';\\r\\nimport { ElevationPipe } from './pipe/elevation.pipe';\\r\\nimport { KlesCellStyleDirective } from './directives/cellstyle.directive';\\r\\nimport { KlesFormDynamicHeaderFilterComponent } from './component/header/dynamic-headerfilter.component';\\r\\nimport { KlesComponentHeaderDirective } from './directives/dynamic-component.directive';\\r\\nimport { KlesFormTextHeaderComponent } from './component/header/textheader.component';\\r\\nimport { KlesLeafComponent } from './component/treetable/cell/leaf.component';\\r\\nimport { KlesNodeComponent } from './component/treetable/cell/node.component';\\r\\nimport { KlesTreetableComponent } from './component/treetable/treetable.component';\\r\\nimport { KlesDynamicTreeCellDirective } from './directives/dynamic-treecell.directive';\\r\\nimport { KlesTreetableDirective } from './directives/treetable.directive';\\r\\nimport { DefaultKlesTreetableService } from './services/treetable/defaulttreetable.service';\\r\\nimport { ConverterService } from './services/treetable/converter.service';\\r\\nimport { TreeService } from './services/treetable/tree.service';\\r\\nimport { KlesLazyTreetableComponent } from './component/lazytreetable/lazytreetable.component';\\r\\nimport { AbstractKlesLazyTableService } from './services/lazy/abstractlazytable.service';\\r\\nimport { AbstractKlesTreeTableService } from './services/treetable/abstracttreetable.service';\\r\\nimport { AbstractKlesLazyTreetableService } from './services/lazy/abstractlazytreetable.service';\\r\\nimport { RowPipe } from './pipe/row.pipe';\\r\\nimport { RowTreePipe } from './pipe/rowtree.pipe';\\r\\nimport { RowDragDisabledPipe } from './pipe/rowdragdisabled.pipe';\\r\\nimport { KlesDynamicCellDirective } from './directives/dynamic-cell.directive';\\r\\nimport { KlesUnfoldCellComponent } from './component/cell/unfoldcell.component';\\r\\nimport { SpanPipe } from './pipe/span.pipe';\\r\\nimport { CellPipe } from './pipe/cell.pipe';\\r\\n\\r\\nconst components = [\\r\\n    KlesTableComponent,\\r\\n    KlesLazyTableComponent,\\r\\n    KlesFormTextHeaderComponent,\\r\\n    KlesFormTextHeaderFilterComponent,\\r\\n    KlesFormDynamicHeaderFilterComponent,\\r\\n    KlesLeafComponent,\\r\\n    KlesNodeComponent,\\r\\n    KlesTreetableComponent,\\r\\n    KlesLazyTreetableComponent,\\r\\n    KlesUnfoldCellComponent\\r\\n];\\r\\nconst directives = [\\r\\n    KlesTableDirective,\\r\\n    KlesResizeColumnDirective,\\r\\n    KlesCellStyleDirective,\\r\\n    KlesComponentHeaderDirective,\\r\\n    KlesDynamicTreeCellDirective,\\r\\n    KlesTreetableDirective,\\r\\n    KlesDynamicCellDirective\\r\\n];\\r\\nconst services = [\\r\\n    AbstractKlesTableService,\\r\\n    AbstractKlesLazyTableService,\\r\\n    KlesTableService,\\r\\n    // KlesLazyTableService,\\r\\n    AbstractKlesTreeTableService,\\r\\n    AbstractKlesLazyTreetableService,\\r\\n    // KlesTreetableService,\\r\\n    DefaultKlesTreetableService,\\r\\n    // KlesLazyTreetableService,\\r\\n    ConverterService,\\r\\n    TreeService\\r\\n];\\r\\nconst pipes = [FieldPipe, GroupPipe, ElevationPipe, RowPipe, RowTreePipe, RowDragDisabledPipe, SpanPipe, CellPipe];\\r\\n\\r\\n@NgModule({\\r\\n    declarations: [\\r\\n        components,\\r\\n        directives,\\r\\n        pipes\\r\\n    ],\\r\\n    imports: [\\r\\n        CommonModule,\\r\\n        MaterialModule,\\r\\n        TranslateModule,\\r\\n        ReactiveFormsModule,\\r\\n        FormsModule,\\r\\n        KlesMaterialDynamicformsModule\\r\\n    ],\\r\\n    exports: [\\r\\n        components,\\r\\n        directives,\\r\\n        pipes\\r\\n    ],\\r\\n    providers: [\\r\\n        services\\r\\n    ]\\r\\n})\\r\\n\\r\\nexport class KlesMaterialTableModule { }\\r\\n\",\"/*\\r\\n * Public API Surface of kles-material-table\\r\\n */\\r\\n\\r\\n/**MODEL */\\r\\nexport * from './lib/models/cell.model';\\r\\nexport * from './lib/models/node.model';\\r\\nexport * from './lib/models/options.model';\\r\\nexport * from './lib/models/columnconfig.model';\\r\\nexport * from './lib/models/tableconfig.model';\\r\\nexport * from './lib/models/header-field.config.model';\\r\\nexport * from './lib/interfaces/pagination.interface';\\r\\nexport * from './lib/interfaces/selection.interface';\\r\\nexport * from './lib/interfaces/loadChildren.interface';\\r\\n\\r\\n/**DIRECTIVE */\\r\\nexport * from './lib/directives/table.directive';\\r\\nexport * from './lib/directives/resizecolumn.directive';\\r\\nexport * from './lib/directives/cellstyle.directive';\\r\\nexport * from './lib/directives/dynamic-component.directive';\\r\\nexport * from './lib/directives/dynamic-treecell.directive';\\r\\nexport * from './lib/directives/treetable.directive';\\r\\nexport * from './lib/directives/dynamic-cell.directive';\\r\\n\\r\\n/**COMPONENT */\\r\\nexport * from './lib/component/table/table.component';\\r\\nexport * from './lib/component/lazytable/lazytable.component';\\r\\nexport * from './lib/component/header/textheader.component';\\r\\nexport * from './lib/component/header/textheaderfilter.component';\\r\\nexport * from './lib/component/header/dynamic-headerfilter.component';\\r\\nexport * from './lib/component/treetable/cell/treecell.abstract';\\r\\nexport * from './lib/component/treetable/cell/leaf.component';\\r\\nexport * from './lib/component/treetable/cell/node.component';\\r\\nexport * from './lib/component/treetable/mat-treetable-datasource';\\r\\nexport * from './lib/component/treetable/treetable.component';\\r\\nexport * from './lib/component/lazytreetable/lazytreetable.component';\\r\\nexport * from './lib/component/cell/cell.abstract';\\r\\nexport * from './lib/component/cell/unfoldcell.component';\\r\\n\\r\\n\\r\\n/**SERVICES */\\r\\nexport * from './lib/services/abstracttable.service';\\r\\nexport * from './lib/services/defaulttable.service';\\r\\nexport * from './lib/services/table.service';\\r\\nexport * from './lib/services/lazy/abstractlazytable.service';\\r\\nexport * from './lib/services/lazy/abstractlazytreetable.service';\\r\\nexport * from './lib/services/lazy/lazytable.service';\\r\\nexport * from './lib/services/lazy/lazytreetable.service';\\r\\nexport * from './lib/services/treetable/abstracttreetable.service';\\r\\nexport * from './lib/services/treetable/converter.service';\\r\\nexport * from './lib/services/treetable/defaulttreetable.service';\\r\\nexport * from './lib/services/treetable/tree.service';\\r\\nexport * from './lib/services/treetable/treetable.service';\\r\\nexport * from './lib/services/features/treetableservice.interface';\\r\\nexport * from './lib/services/features/selection/selectiontreetable.service';\\r\\nexport * from './lib/services/features/selection/selectiontablelazy.service';\\r\\nexport * from './lib/services/features/selectionclick/selectionclick.service';\\r\\n\\r\\n/**FEATURES */\\r\\nexport * from './lib/services/features/tableservice.interface';\\r\\nexport * from './lib/services/features/filter/textfiltertable.service';\\r\\nexport * from './lib/services/features/filter/headerfilter-table.service';\\r\\nexport * from './lib/services/features/selection/selectiontable.service';\\r\\nexport * from './lib/services/features/dragdrop/dragdrop.interface';\\r\\nexport * from './lib/services/features/dragdrop/dragdroprow.service';\\r\\nexport * from './lib/services/features/dragdrop/dragdroprowtree.service';\\r\\nexport * from './lib/services/features/unfoldrow/unfoldrow.service';\\r\\n\\r\\n/**PIPE */\\r\\nexport * from './lib/pipe/field.pipe';\\r\\nexport * from './lib/pipe/group.pipe';\\r\\nexport * from './lib/pipe/elevation.pipe';\\r\\nexport * from './lib/pipe/row.pipe';\\r\\nexport * from './lib/pipe/rowtree.pipe';\\r\\nexport * from './lib/pipe/rowdragdisabled.pipe';\\r\\nexport * from './lib/pipe/span.pipe';\\r\\nexport * from './lib/pipe/cell.pipe';\\r\\n\\r\\n\\r\\n/**ENUM */\\r\\nexport * from './lib/enums/align.enum';\\r\\nexport * from './lib/enums/span.enum';\\r\\n\\r\\n/**MODULE */\\r\\nexport * from './lib/table.module';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"_c0\",\"_c1\",\"i6\",\"i8\",\"i3\",\"i14.KlesResizeColumnDirective\",\"i15.KlesDynamicCellDirective\",\"i16.FieldPipe\",\"i17.GroupPipe\",\"i18.ElevationPipe\",\"i19.RowPipe\",\"i20.RowDragDisabledPipe\",\"i21.SpanPipe\",\"i22.CellPipe\",\"_forTrack0\",\"i11\",\"i12\",\"i13\",\"i14\",\"i15.KlesResizeColumnDirective\",\"i16.KlesDynamicCellDirective\",\"i17.FieldPipe\",\"i18.GroupPipe\",\"i19.ElevationPipe\",\"i20.RowPipe\",\"i21.RowDragDisabledPipe\",\"i22.SpanPipe\",\"i23.CellPipe\",\"uuidv4\",\"i1.TreeService\",\"i9\",\"i10\",\"i15\",\"i16.KlesResizeColumnDirective\",\"i17.KlesDynamicTreeCellDirective\",\"i18.FieldPipe\",\"i19.GroupPipe\",\"i20.ElevationPipe\",\"i21.RowTreePipe\",\"i22.RowDragDisabledPipe\",\"i23.SpanPipe\",\"i24.CellPipe\",\"i16\",\"i17.KlesResizeColumnDirective\",\"i18.KlesDynamicTreeCellDirective\",\"i19.FieldPipe\",\"i20.GroupPipe\",\"i21.ElevationPipe\",\"i22.RowTreePipe\",\"i23.RowDragDisabledPipe\",\"i24.SpanPipe\",\"i25.CellPipe\"],\"mappings\":\"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\"}","type":"asset"}]}